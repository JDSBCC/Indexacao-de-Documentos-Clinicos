//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Security;
using WCF = global::System.ServiceModel;

namespace Cpchs.Documents.WCF.ServiceContracts
{
	/// <summary>
	/// Service Contract Class - DocumentsManagementSC
	/// </summary>
	[WCF::ServiceContract(Namespace = "urn:Cpchs.Documents", Name = "DocumentsManagementSC", SessionMode = WCF::SessionMode.Allowed, ProtectionLevel = ProtectionLevel.None )]
	public partial interface IDocumentsManagementSC 
	{
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = true, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.RegisterDocumentAccess", ProtectionLevel = ProtectionLevel.None)]
		void RegisterDocumentAccess(Cpchs.Documents.WCF.MessageContracts.RegisterDocumentAccessRequest request);
		
[WCF::FaultContract(typeof(Cpchs.Documents.WCF.FaultContracts.DocumentNotFound))]
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetAllPatientDocuments", ReplyAction = "urn:Cpchs.Documents.DocumentsMangaementSC.GetAllPatientDocuments", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetAllPatientDocumentsResponse GetAllPatientDocuments(Cpchs.Documents.WCF.MessageContracts.GetAllPatientDocumentsRequest request);
		
[WCF::FaultContract(typeof(Cpchs.Documents.WCF.FaultContracts.DocumentNotFound))]
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByExternalId", ReplyAction = "urn:Cpchs.Documents.DocumentsMangaementSC.GetDocumentsByExternalId", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocumentsByExternalIdResponse GetDocumentsByExternalId(Cpchs.Documents.WCF.MessageContracts.GetDocumentsByExternalIdRequest request);
		
[WCF::FaultContract(typeof(Cpchs.Documents.WCF.FaultContracts.DocumentNotFound))]
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByExternalIdV2", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentByExternalIdV2", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocumentsByExternalIdV2Response GetDocumentsByExternalIdV2(Cpchs.Documents.WCF.MessageContracts.GetDocumentsByExternalIdV2Request request);
		
[WCF::FaultContract(typeof(Cpchs.Documents.WCF.FaultContracts.DocumentNotFound))]
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetAllPatientDocumentsMulti", ReplyAction = "GetAllPatientDocumentsMulti", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetAllPatientDocumentsMultiResponse GetAllPatientDocumentsMulti(Cpchs.Documents.WCF.MessageContracts.GetAllPatientDocumentsMultiRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocTypeDesc", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocTypeDesc", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocTypeDescResponse GetDocTypeDesc(Cpchs.Documents.WCF.MessageContracts.GetDocTypeDescRequest request);

[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByMultiCriteria", ReplyAction = "GetDocumentsByMultiCriteria", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocumentsByMultiCriteriaResponse GetDocumentsByMultiCriteria(Cpchs.Documents.WCF.MessageContracts.GetDocumentsByMultiCriteriaRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.CancelDocument", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.CancelDocument", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.CancelDocumentResponse CancelDocument(Cpchs.Documents.WCF.MessageContracts.CancelDocumentRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.CancelElement", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.CancelElement", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.CancelElementResponse CancelElement(Cpchs.Documents.WCF.MessageContracts.CancelElementRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.UpdateElementReportInfo", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.UpdateElementReportInfo", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.UpdateElementReportInfoResponse UpdateElementReportInfo(Cpchs.Documents.WCF.MessageContracts.UpdateElementReportInfoRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.LogDocumentAccess", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.LogDocumentAccess", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.LogDocumentAccessResponse LogDocumentAccess(Cpchs.Documents.WCF.MessageContracts.LogDocumentAccessRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentVideos", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocumentVideosResponse GetDocumentVideos(Cpchs.Documents.WCF.MessageContracts.GetDocumentVideosRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByMultiCriteriaV2", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByMultiCriteriaV2", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocumentsByMultiCriteriaV2Response GetDocumentsByMultiCriteriaV2(Cpchs.Documents.WCF.MessageContracts.GetDocumentsByMultiCriteriaV2Request request);

[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByMultiCriteriaV3", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsByMultiCriteriaV3", ProtectionLevel = ProtectionLevel.None)]
Cpchs.Documents.WCF.MessageContracts.GetDocumentsByMultiCriteriaV2Response GetDocumentsByMultiCriteriaV3(Cpchs.Documents.WCF.MessageContracts.GetDocumentsByMultiCriteriaV2Request request);

[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsForEPR", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsForEPR", ProtectionLevel = ProtectionLevel.None)]
Cpchs.Documents.WCF.MessageContracts.GetDocumentsForEPRResponse GetDocumentsForEPR(Cpchs.Documents.WCF.MessageContracts.GetDocumentsForEPRRequest request);

[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsForEPRv1", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetDocumentsForEPRv1", ProtectionLevel = ProtectionLevel.None)]
bool GetDocumentsForEPRv1();	

[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.PromoteDocumentToPublic", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.PromoteDocumentToPublic", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.PromoteDocumentToPublicResponse PromoteDocumentToPublic(Cpchs.Documents.WCF.MessageContracts.PromoteDocumentToPublicRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.GetPatientDocuments", ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.GetPatientDocuments", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetPatientDocumentsResponse GetPatientDocuments(Cpchs.Documents.WCF.MessageContracts.GetPatientDocumentsRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.CancelDocumentPermanently", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.CancelDocumentPermanentlyResponse CancelDocumentPermanently(Cpchs.Documents.WCF.MessageContracts.CancelDocumentPermanentlyRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.CancelDocumentLastVersion", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.CancelDocumentLastVersionResponse CancelDocumentLastVersion(Cpchs.Documents.WCF.MessageContracts.CancelDocumentLastVersionRequest request);

[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.DocumentsManagementSC.UpdateElementDescription",ReplyAction = "urn:Cpchs.Documents.DocumentsManagementSC.UpdateElementDescription", ProtectionLevel = ProtectionLevel.None)]
Cpchs.Documents.WCF.MessageContracts.UpdateElementDescriptionResponse UpdateElementDescription(Cpchs.Documents.WCF.MessageContracts.UpdateElementDescriptionRequest request);
		
	}
}

