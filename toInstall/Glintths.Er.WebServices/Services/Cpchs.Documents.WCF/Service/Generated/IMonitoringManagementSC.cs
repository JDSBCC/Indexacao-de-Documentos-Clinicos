//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Security;
using WCF = global::System.ServiceModel;

namespace Cpchs.Documents.WCF.ServiceContracts
{
	/// <summary>
	/// Service Contract Class - MonitoringManagementSC
	/// </summary>
	[WCF::ServiceContract(Namespace = "urn:Cpchs.Documents", Name = "MonitoringManagementSC", SessionMode = WCF::SessionMode.Allowed, ProtectionLevel = ProtectionLevel.None )]
	public partial interface IMonitoringManagementSC 
	{
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.GetDocumentLogsByMultiCriteria", ReplyAction = "GetDocumentLogsByMultiCriteria", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetDocumentLogsByMultiCriteriaResponse GetDocumentLogsByMultiCriteria(Cpchs.Documents.WCF.MessageContracts.GetDocumentLogsByMultiCriteriaRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.GetAlerts", ReplyAction = "urn:Cpchs.Documents.MonitoringManagementSC.GetAlerts", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetAlertsResponse GetAlerts(Cpchs.Documents.WCF.MessageContracts.GetAlertsRequest request);
		
[WCF::FaultContract(typeof(Cpchs.Entities.WCF.FaultContracts.OperationCouldNotBePerformed))]
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.UpdateAlertsSubscriptions", ReplyAction = "urn:Cpchs.Documents.MonitoringManagementSC.UpdateAlertsSubscriptions", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.UpdateAlertsSubscriptionsResponse UpdateAlertsSubscriptions(Cpchs.Documents.WCF.MessageContracts.UpdateAlertsSubscriptionsRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.GetAlertsSubscriptions", ReplyAction = "urn:Cpchs.Documents.MonitoringManagementSC.GetAlertsSubscriptions", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.GetAlertsSubscriptionsResponse GetAlertsSubscriptions(Cpchs.Documents.WCF.MessageContracts.GetAlertsSubscriptionsRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.ProcessIndexDocument", ReplyAction = "urn:Cpchs.Documents.MonitoringManagementSC.ProcessIndexDocument", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.ProcessIndexDocumentResponse ProcessIndexDocument(Cpchs.Documents.WCF.MessageContracts.ProcessIndexDocumentRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.IgnoredAlert", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.IgnoredAlertResponse IgnoredAlert(Cpchs.Documents.WCF.MessageContracts.IgnoredAlertRequest request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "urn:Cpchs.Documents.MonitoringManagementSC.CorrectedAlert", ProtectionLevel = ProtectionLevel.None)]
		Cpchs.Documents.WCF.MessageContracts.CorrectedAlertResponse CorrectedAlert(Cpchs.Documents.WCF.MessageContracts.CorrectedAlertRequest request);
		
	}
}

