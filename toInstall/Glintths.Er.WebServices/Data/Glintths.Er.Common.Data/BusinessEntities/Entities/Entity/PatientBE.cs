using System;
using System.Data;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Logging;

using CPCHS.Common.BusinessEntities;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
using System.Collections.Generic;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: segunda-feira, 6 de Outubro de 2008
    /// Created By: Generated by CodeSmith
    /// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class Patient : Patient_GEN
    {
        public string patEntIds { get; set; }

        public int? HighestPriority { get; set; }
        public string HighestPriorityDescription { get; set; }
        public int? PendingSamples { get; set; }
        public int? InvalidSamples { get; set; }

        public VisitList Episodes { get; set; }
        public string PresentationPatient { get; set; }
        public string PresentationNSC { get; set; }
        public string PresentationNProc { get; set; }

        public int Order
        {
            get
            {
                int valor = 100000;
                int prioridade = 0;
                bool temColheitasPendentes = false;
                bool temColheitasInvalidas = false;

                if (HighestPriority.HasValue)
                    prioridade = HighestPriority.Value;

                if (PendingSamples.HasValue && PendingSamples.Value != 0)
                    temColheitasPendentes = true;

                if (InvalidSamples.HasValue && InvalidSamples.Value != 0)
                    temColheitasInvalidas = true;

                if (!temColheitasPendentes && !temColheitasInvalidas)
                    valor = 100000;
                else if (temColheitasInvalidas)
                {
                    valor = 10000;
                }
                else if (temColheitasPendentes)
                {
                    valor = 20000;
                }

                return valor + prioridade;
            }
        }

        /// <summary>
        /// Initialize an new empty Patient object.
        /// </summary>
        public Patient()
            : base()
        {
            Episodes = new VisitList();
        }

        /// <summary>
        /// Initialize an new empty Patient object.
        /// </summary>
        public Patient(IDataReader reader, string companyDB)
            : base(reader, companyDB)
        {
            if (reader != null && !reader.IsClosed)
            {
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                    {
                        case "PATENTIDS":
                            if (!reader.IsDBNull(i))
                            {
                                this.patEntIds = Convert.ToString(reader.GetValue(i));
                            }
                            break;
                        case "PATIENTPATID":
                            if (!reader.IsDBNull(i))
                            {
                                LocalPatient p ;
                                string s = Convert.ToString(reader.GetValue(i));
                                if (this.PatLocalPatients != null && this.PatLocalPatients.Count != 0)
                                {
                                    p = PatLocalPatients[0];
                                    p.LocpatPatientId = s;
                                }
                                else
                                {
                                    p = new LocalPatient();
                                    p.LocpatPatientId = s;
                                    this.PatLocalPatients.Add(p);
                                }
                            }
                            break;
                        case "PATIENTPATTYPE":
                            if (!reader.IsDBNull(i))
                            {
                                LocalPatient p;
                                string s = Convert.ToString(reader.GetValue(i));
                                if (this.PatLocalPatients != null && this.PatLocalPatients.Count != 0)
                                {
                                    p = PatLocalPatients[0];
                                    p.LocpatPatientType.PattypCode = s;
                                }
                                else
                                {
                                    p = new LocalPatient();
                                    p.LocpatPatientType.PattypCode = s;
                                    this.PatLocalPatients.Add(p);
                                }
                            }
                            break;
                        case "HIGHESTPRIORITY":
                            if (!reader.IsDBNull(i))
                            {
                                this.HighestPriority = reader.GetInt32(i);
                            }
                            break;
                        case "HIGHESTPRIORITYDESCRIPTION":
                            if (!reader.IsDBNull(i))
                            {
                                this.HighestPriorityDescription = reader.GetString(i);
                            }
                            break;
                        case "PENDINGSAMPLES":
                            if (!reader.IsDBNull(i))
                            {
                                this.PendingSamples = reader.GetInt32(i);
                            }
                            break;
                        case "INVALIDSAMPLES":
                            if (!reader.IsDBNull(i))
                            {
                                this.InvalidSamples = reader.GetInt32(i);
                            }
                            break;
                        case "PRESPATIENTID":
                            if (!reader.IsDBNull(i))
                            {
                                this.PresentationPatient = Convert.ToString(reader.GetValue(i));
                            }
                            break;
                        case "PRESNSC":
                            if (!reader.IsDBNull(i))
                            {
                                this.PresentationNSC = Convert.ToString(reader.GetValue(i));
                            }
                            break;
                        case "PRESPROC":
                            if (!reader.IsDBNull(i))
                            {
                                this.PresentationNProc = Convert.ToString(reader.GetValue(i));
                            }
                            break;
                    }
                }
            }

            Cpchs.Eresults.Common.WCF.BusinessEntities.ErEntity entity = new ErEntity(reader, companyDB);
            this.PatEntity = entity;

            Cpchs.Eresults.Common.WCF.BusinessEntities.LocalPatient localPatient = new LocalPatient(reader, companyDB);
            if (!string.IsNullOrEmpty(localPatient.LocpatPatientId) && !string.IsNullOrEmpty(localPatient.LocpatPatientType.PattypCode))
                this.PatLocalPatients.Add(localPatient);

            Cpchs.Eresults.Common.WCF.BusinessEntities.Gender gender = new Gender(reader, companyDB);
            this.PatGender = gender;

            Cpchs.Eresults.Common.WCF.BusinessEntities.MaritalStatus maritalStatus = new MaritalStatus(reader, companyDB);
            this.PatMaritalStatus = maritalStatus;
        }

        /// <summary>
        /// Initialize a new  Patient object with the given parameters.
        /// </summary>
        public Patient(long patEntId, string patProc, string patNSns, string patNBenef, string patNBi, Nullable<DateTime> patBirthdate, long patSexo, long patCivil, string patClinic)
            : base(patEntId, patProc, patNSns, patNBenef, patNBi, patBirthdate, patSexo, patCivil, patClinic)
        {
        }

        public Patient(long patEntId)
            : base(patEntId)
        {

        }
    }
}


