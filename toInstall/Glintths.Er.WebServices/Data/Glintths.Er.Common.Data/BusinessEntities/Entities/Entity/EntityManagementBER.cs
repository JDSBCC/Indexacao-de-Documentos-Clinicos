
using System;
using System.Data;
using System.Collections;

using Cpchs.Eresults.Common.WCF.BusinessEntities;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
	
using CPCHS.Common.BusinessEntities;

using Microsoft.Practices.EnterpriseLibrary.Caching;

using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using System.Data.Common;
using System.Globalization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: quarta-feira, 11 de Fevereiro de 2009
    /// Created By: Generated by CodeSmith
		/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public sealed class EntityManagementBER : EntityManagementBER_GEN
    {
		#region Singleton
		private static EntityManagementBER instance = new EntityManagementBER();
		
		public static EntityManagementBER Instance
		{
			get { return instance; }
		}
		#endregion
		private EntityManagementBER()
		{
			
		}

        //protected override string GenericPatientFindDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GenericPatientIdsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GetPatientBySamplesDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GetPatientBySamplesPatientIdsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        protected override string SimplePatientFindDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        protected override string GetAllApplicationsDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        //protected override string GetPatientByDocumentDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPatientByDocumentV2DBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPatientIdsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPatientIdsByDocumentDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPatientIdsByDocumentV2DBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string  GetSampleInfoEntitiesDBPackageName
        //{
        //    get { return "PCK_ACTIVITIES_SAMPLE"; }
        //}

        //protected override string  GetServicesForSampleColDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string  GetServicesForDoctorDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        protected override string GetServicesForExternalAccessDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        //protected override string GetEntityBySessionDBPackageName
        //{
        //    get
        //    {
        //        return "PCK_ENTITIES_ENTITY";
        //    }
        //}

        //protected override string GetGroupExamsByGroupDBPackageName
        //{
        //    get
        //    {
        //        return "PCK_ENTITIES_REQUEST";
        //    }
        //}



        public string GetFiltersActivity(string companyDB, string globalFilters, string docsSession, string servsSession, string userName, string showArch, string showAnaRes, string showLinks)
        {
            return GetFiltersActivityDB(companyDB, globalFilters, docsSession, servsSession, userName, showArch, showAnaRes, showLinks);
        }

        private string GetFiltersActivityDB(string companyDB, string globalFilters, string docsSession, string servsSession, string userName, string showArch, string showAnaRes, string showLinks)
        {
            try
            {
                string dbMethod = GetFiltersActivityDBMethod(companyDB);
                System.Data.Common.DbCommand dbCommand = dal.GetStoredProcCommand(
                dbMethod
                , globalFilters, docsSession, servsSession, userName, showArch, showAnaRes, showLinks
                , DBNull.Value
                );

                dal.ExecuteNonQuery(dbCommand);

                return Convert.ToString(dbCommand.Parameters["p_FILTERS_ACTIVITY"].Value, System.Globalization.CultureInfo.CurrentCulture)
                ;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return "N";
        }

        private string GetFiltersActivityDBMethod(string companyDB)
        {
            string proc = "GetFiltersActivity";
            string package = "PCK_ENTITIES_ENTITY";

            dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            /*if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
                proc = package + "." + proc;
            else
                proc = package + "_" + proc;*/

            return proc;
        }

        

        //protected override string GetRequisitionTypeByIdDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetAllHospPersonsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}


        //protected override string GetAllPrioritiesDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST_GEN"; }
        //}

        //protected override string GetAllPlacesForInstitutionDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string  GetAllRequisitionTypesDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST_GEN"; }
        //}

        protected override string GetAllServicesDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; } //ALTEREI AQUI
        }

        //protected override string  GetStateByIdDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string  GetAllStatesDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string  GetHospPersonByEntIdDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPriorityByIdDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetFavoriteServicesForDoctorDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GetAllGroupsBySpecsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GetGroupExamsBySpecsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPatientByIdDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetPatientByIdIdsDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        //protected override string GetOrInsertEntityDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GetOrInsertEntityDBMethodName
        //{
        //    get
        //    {
        //        return "getorinsertentitygh";
        //    }
        //}

        //protected override string GetOrInsertPatientDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string GetOrInsertPatientDBMethodName
        //{
        //    get 
        //    { 
        //         return "getorinsertpatientgh";
        //    }
        //}

        //protected override string  GetPatientByRequestDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //protected override string CountGroupExamsByGroupDBPackageName
        //{
        //    get { return "PCK_ENTITIES_ENTITY"; }
        //}

        protected override string GetConfigurationByScopeDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        //protected override string GetExamsBySearchCriteriaDBPackageName
        //{
        //    get { return "PCK_ENTITIES_REQUEST"; }
        //}

        //public VisitList GetPatientEpisodesByGenericPatient(string companyDB, string tDoente, long doente)
        //{
        //    IDataReader reader = GetPatientEpisodesByGenericPatientDB(companyDB, tDoente, doente);
        //    VisitList list = new VisitList();
        //    while (reader.Read())
        //    {
        //        try
        //        {
        //            list.Add(new Visit(reader, companyDB));
        //        }
        //        catch (Exception ex)
        //        {
        //            // Quick Start is configured so that the Propagate Policy will
        //            // log the exception and then recommend a rethrow.
        //            bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
        //            if (rethrow)
        //            {
        //                throw;
        //            }
        //        }
        //    }
        //    reader.Close();
        //    return list;
        //}

        //private IDataReader GetPatientEpisodesByGenericPatientDB(string companyDB, string tDoente, long doente)
        //{
        //    IDataReader ret = null;
        //    try
        //    {
        //        string dbMethod = GetPatientEpisodesByGenericPatientDBMethod(companyDB);
        //        ret = dal.ExecuteReader(dbMethod, doente, tDoente, DBNull.Value);
        //    }
        //    catch (Exception ex)
        //    {
        //        // Quick Start is configured so that the Propagate Policy will
        //        // log the exception and then recommend a rethrow.
        //        bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        //        if (rethrow)
        //        {
        //            throw;
        //        }
        //    }
        //    return ret;
        //}

        //private string GetPatientEpisodesByGenericPatientDBMethod(string companyDB)
        //{
        //    string proc = "GetPatientEpisodesByPatient";
        //    string package = "PCK_ENTITIES_ENTITY";

        //    dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

        //    proc = GetDBMethod(dal, proc, package);

        //    return proc;
        //}

        protected override string GetPatientsFromExtProviderDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        //protected override string GenericPatientFindDBMethodName
        //{
        //    get
        //    {
        //        return "genericpatientfindGH";
        //    }
        //}

        //protected override string GenericPatientIdsDBMethodName
        //{
        //    get
        //    {
        //        return "genericpatientids2";
        //    }
        //}

        //protected override string GetFavoriteServicesForDoctorDBMethodName
        //{
        //    get
        //    {
        //        return "getfavoriteservicesfordoct2";
        //    }
        //}

        //protected override string GetServicesForDoctorDBMethodName
        //{
        //    get
        //    {
        //        return "getservicesfordoct2";
        //    }
        //}

        //protected override string GetAllGroupsBySpecsDBMethodName
        //{
        //    get
        //    {
        //        return "getallgroupsbyspecs2";
        //    }
        //}

        //protected override string GetGroupExamsByGroupDBMethodName
        //{
        //    get
        //    {
        //        return "GetGroupExamsByGroup2";
        //    }
        //}

        //protected override string GetExamsBySearchCriteriaDBMethodName
        //{
        //    get
        //    {
        //        return "GetExamsBySearchCriteria2";
        //    }
        //}

        protected override string GetConfigurationByScopeKeyDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }


        #region Override de BDMethods


        #endregion

        //public PatientList GetPatientBySamples(string companyDB, string appId, string localId, string instid, Nullable<DateTime> minDate, Nullable<DateTime> maxDate, string reqService, string execService, string state, string nmecan)
        //{
        //    IDataReader reader = GetPatientBySamplesDB(companyDB, appId, localId, instid, minDate, maxDate, reqService, execService, state, nmecan);
        //    PatientList list = new PatientList();
        //    while (reader.Read())
        //    {
        //        try
        //        {
        //            list.Add(new Patient(reader, companyDB));
        //        }
        //        catch (Exception ex)
        //        {
        //            // Quick Start is configured so that the Propagate Policy will
        //            // log the exception and then recommend a rethrow.
        //            bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
        //            if (rethrow)
        //            {
        //                throw;
        //            }
        //        }
        //    }
        //    reader.Close();
        //    return list;
        //}

        //public IDataReader GetPatientBySamplesDB(string companyDB, string appId, string localId, string instid, Nullable<DateTime> minDate, Nullable<DateTime> maxDate, string reqService, string execService, string state, string nmecan)
        //{
        //    IDataReader ret = null;
        //    try
        //    {
        //        string dbMethod = GetPatientBySamplesDBMethod(companyDB);
        //        DbCommand dbCommand;

        //        dbCommand = GetStoredProcCommand(dal, dbMethod, appId, localId, instid, minDate, maxDate, reqService, execService, state, nmecan, DBNull.Value);
        //        ret = dal.ExecuteReader(dbCommand);
        //    }
        //    catch (Exception ex)
        //    {
        //        // Quick Start is configured so that the Propagate Policy will
        //        // log the exception and then recommend a rethrow.
        //        bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        //        if (rethrow)
        //        {
        //            throw;
        //        }
        //    }
        //    return ret;
        //}


        #region CheckUserSettings

        public bool? CheckUserSettings(string companyDB, string username, string application, string module)
        {
            try
            {
                return CheckUserSettingsDB(companyDB, username, application, module);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }

            return null;
        }

        private bool? CheckUserSettingsDB(string companyDB, string username, string application, string module)
        {
            try
            {
                string dbMethod = CheckUserSettingsDBMethod(companyDB);

                DbCommand dbCommand = dal.GetStoredProcCommand(
                    dbMethod,
                    new object[] { username, application, module, DBNull.Value }
                );

                dal.ExecuteNonQuery(dbCommand);

                return Convert.ToBoolean(GetParameterValue(dal, dbCommand, "w_hasSettings"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
                return null;
            }
        }

        private string CheckUserSettingsDBMethod(string companyDB)
        {
            string proc = CheckUserSettingsDBMethodName;
            string package = CheckUserSettingsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        private string CheckUserSettingsDBMethodName
        {
            get { return "CheckUserSettings"; }

        }

        private string CheckUserSettingsDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        #endregion

        #region SimplePatientFindV2

        public PatientList SimplePatientFindV2(
            string companyDB, 
            string patProcessNum, 
            string patSnsNum, 
            Nullable<DateTime> patBirthDate, 
            string patId, 
            string patType, 
            string patName, 
            string patSex, 
            long? tEpisodioId, 
            string tEpisodioCode,
            string episodeId, 
            Nullable<DateTime> epiDateBegin, 
            Nullable<DateTime> epiDateEnd, 
            string doc, 
            string extId,
            long? docTypeId, 
            string docTypeCode, 
            long? appId, 
            string appCode, 
            long? localId,  
            string localCode, 
            long? instId, 
            string instCode, 
            Nullable<DateTime> docDateBegin, 
            Nullable<DateTime> docDateEnd, 
            Nullable<DateTime> valDateBegin, 
            Nullable<DateTime> valDateEnd, 
            string searchType, 
            string globalFilters, 
            string docsSession, 
            string servsSession, 
            string userName, 
            string userAnaRes)
        {
            IDataReader reader = SimplePatientFindV2DB(companyDB, patProcessNum, patSnsNum, patBirthDate, patId, patType, patName, patSex, tEpisodioId, tEpisodioCode, episodeId, epiDateBegin, epiDateEnd, doc, extId, docTypeId, docTypeCode, appId, appCode, localId, localCode, instId, instCode, docDateBegin, docDateEnd, valDateBegin, valDateEnd, searchType, globalFilters, docsSession, servsSession, userName, userAnaRes);
            PatientList list = new PatientList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Patient(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        private IDataReader SimplePatientFindV2DB(
            string companyDB, 
            string patProcessNum, 
            string patSnsNum, 
            Nullable<DateTime> patBirthDate, 
            string patId, 
            string patType, 
            string patName,
            string patSex,
            long? tEpisodioId,
            string tEpisodioCode,
            string episodeId, 
            Nullable<DateTime> epiDateBegin, 
            Nullable<DateTime> epiDateEnd, 
            string doc,
            string extId,
            long? docTypeId,
            string docTypeCode,
            long? appId,
            string appCode,
            long? localId,
            string localCode,
            long? instId,
            string instCode, 
            Nullable<DateTime> docDateBegin,
            Nullable<DateTime> docDateEnd, 
            Nullable<DateTime> valDateBegin,
            Nullable<DateTime> valDateEnd, 
            string searchType,
            string globalFilters, 
            string docsSession,
            string servsSession,
            string userName, 
            string userAnaRes)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = SimplePatientFindV2DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, patProcessNum, patSnsNum, patBirthDate, patId, patType, patName, patSex, tEpisodioId, tEpisodioCode, episodeId, epiDateBegin, epiDateEnd, doc, extId, docTypeId, docTypeCode, appId, appCode, localId, localCode, instId, instCode, docDateBegin, docDateEnd, valDateBegin, valDateEnd, searchType, globalFilters, docsSession, servsSession, userName, userAnaRes, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        private string SimplePatientFindV2DBMethod(string companyDB)
        {
            string proc = SimplePatientFindV2DBMethodName;
            string package = SimplePatientFindV2DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        private string SimplePatientFindV2DBMethodName
        {
            get { return "SimplePatientFindV2"; }
        }

        private string SimplePatientFindV2DBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }
        
        #endregion

        #region SimplePatientFindV3

        public PatientList SimplePatientFindV3(
            string companyDB,
            string patProcessNum,
            string patSnsNum,
            Nullable<DateTime> patBirthDate,
            string patId,
            string patType,
            string patName,
            string patSex,
            long? tEpisodioId,
            string tEpisodioCode,
            string episodeId,
            Nullable<DateTime> epiDateBegin,
            Nullable<DateTime> epiDateEnd,
            string doc,
            string extId,
            long? docTypeId,
            string docTypeCode,
            long? appId,
            string appCode,
            long? localId,
            string localCode,
            long? instId,
            string instCode,
            Nullable<DateTime> docDateBegin,
            Nullable<DateTime> docDateEnd,
            Nullable<DateTime> valDateBegin,
            Nullable<DateTime> valDateEnd,
            Nullable<DateTime> procDateBegin,
            Nullable<DateTime> procDateEnd,
            string searchType,
            string globalFilters,
            string docsSession,
            string servsSession,
            string userName,
            string userAnaRes)
        {
            IDataReader reader = SimplePatientFindV3DB(companyDB, patProcessNum, patSnsNum, patBirthDate, patId, patType, patName, patSex, tEpisodioId, tEpisodioCode, episodeId, epiDateBegin, epiDateEnd, doc, extId, docTypeId, docTypeCode, appId, appCode, localId, localCode, instId, instCode, docDateBegin, docDateEnd, valDateBegin, valDateEnd, procDateBegin, procDateEnd, searchType, globalFilters, docsSession, servsSession, userName, userAnaRes);
            PatientList list = new PatientList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Patient(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        private IDataReader SimplePatientFindV3DB(
            string companyDB,
            string patProcessNum,
            string patSnsNum,
            Nullable<DateTime> patBirthDate,
            string patId,
            string patType,
            string patName,
            string patSex,
            long? tEpisodioId,
            string tEpisodioCode,
            string episodeId,
            Nullable<DateTime> epiDateBegin,
            Nullable<DateTime> epiDateEnd,
            string doc,
            string extId,
            long? docTypeId,
            string docTypeCode,
            long? appId,
            string appCode,
            long? localId,
            string localCode,
            long? instId,
            string instCode,
            Nullable<DateTime> docDateBegin,
            Nullable<DateTime> docDateEnd,
            Nullable<DateTime> valDateBegin,
            Nullable<DateTime> valDateEnd,
            Nullable<DateTime> procDateBegin,
            Nullable<DateTime> procDateEnd,
            string searchType,
            string globalFilters,
            string docsSession,
            string servsSession,
            string userName,
            string userAnaRes)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = SimplePatientFindV3DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, patProcessNum, patSnsNum, patBirthDate, patId, patType, patName, patSex, tEpisodioId, tEpisodioCode, episodeId, epiDateBegin, epiDateEnd, doc, extId, docTypeId, docTypeCode, appId, appCode, localId, localCode, instId, instCode, docDateBegin, docDateEnd, valDateBegin, valDateEnd, procDateBegin, procDateEnd, searchType, globalFilters, docsSession, servsSession, userName, userAnaRes, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        private string SimplePatientFindV3DBMethod(string companyDB)
        {
            string proc = SimplePatientFindV3DBMethodName;
            string package = SimplePatientFindV3DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        private string SimplePatientFindV3DBMethodName
        {
            get { return "SimplePatientFindV3"; }
        }

        private string SimplePatientFindV3DBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        #endregion

        #region GetIndexFilesConfiguration

        private string GetIndexFilesConfigurationDBMethod(string companyDB)
        {
            string proc = GetIndexFilesConfigurationDBMethodName;
            string package = GetIndexFilesConfigurationDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        private string GetIndexFilesConfigurationDBMethodName
        {
            get { return "GetIndexFilesConfiguration"; }
        }

        private string GetIndexFilesConfigurationDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }


        private IDataReader GetIndexFilesConfigurationDB(string companyDB, string Institution, string Place, string Application, string DocType, string Scope)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetIndexFilesConfigurationDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, Institution, Place, Application, DocType, Scope, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        public ERConfiguration GetIndexFilesConfiguration(string companyDB, string Institution, string Place, string Application, string DocType, string Scope)
        {
            IDataReader reader = GetIndexFilesConfigurationDB(companyDB, Institution, Place, Application, DocType, Scope);
            ERConfiguration obj = null;
            if (reader.Read())
            {
                try
                {
                    obj = new ERConfiguration(reader, companyDB);
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();

            return obj;
        }

        #endregion


        #region GetPatientsBySpecs

        public PatientList GetPatientsBySpecs(
            string companyDB,
            string search,
            string globalFilters,
           // string docsSession,
            string servsSession,
            string userName)
        {
            IDataReader reader = GetPatientsBySpecsDB(companyDB, search, globalFilters, /* docsSession,*/ servsSession, userName);
            PatientList list = new PatientList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Patient(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        private IDataReader GetPatientsBySpecsDB(
            string companyDB,          
            string search,
            string globalFilters,
           // string docsSession,
            string servsSession,
            string userName)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientsBySpecsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, search, globalFilters, /* docsSession,*/ servsSession, userName, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        private string GetPatientsBySpecsDBMethod(string companyDB)
        {
            string proc = GetPatientsBySpecsDBMethodName;
            string package = GetPatientsBySpecsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("EntitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        private string GetPatientsBySpecsDBMethodName
        {
            get { return "GetPatientsBySpecs"; }
        }

        private string GetPatientsBySpecsDBPackageName
        {
            get { return "PCK_ENTITIES_ENTITY"; }
        }

        #endregion
    }
}


