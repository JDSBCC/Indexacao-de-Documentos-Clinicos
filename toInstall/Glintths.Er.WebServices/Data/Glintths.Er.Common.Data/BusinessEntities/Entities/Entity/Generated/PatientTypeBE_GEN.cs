using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quinta-feira, 9 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class PatientType_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long pattypId; ///
		private string pattypCode; ///
		private string pattypAcronym; ///
		private string pattypDescription; ///
		private long pattypInstitutionId; ///
		private long pattypLocalId; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty PatientType object.
        /// </summary>
        public PatientType_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty PatientType object.
        /// </summary>
        public PatientType_GEN(long pattypId) : base(ObjectState.Added, null) 
        {
			this.pattypId = pattypId;
        }
		/// <summary>
        /// Initialize an new empty PatientType object.
        /// </summary>
        public PatientType_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  PatientType object with the given parameters.
        /// </summary>
        public  PatientType_GEN(long pattypId, string pattypCode, string pattypAcronym, string pattypDescription, long pattypInstitutionId, long pattypLocalId) : base(ObjectState.Added, null) 
        {	 
			this.pattypId = pattypId;
			this.pattypCode = pattypCode;
			this.pattypAcronym = pattypAcronym;
			this.pattypDescription = pattypDescription;
			this.pattypInstitutionId = pattypInstitutionId;
			this.pattypLocalId = pattypLocalId;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PattypId
        {
            get { return this.pattypId; }
            set { 
				if(this.pattypId != value) {
					DataStateChanged(ObjectState.Modified, "PattypId");
            		this.pattypId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PattypCode
        {
            get { return this.pattypCode; }
            set { 
				if(this.pattypCode != value) {
					DataStateChanged(ObjectState.Modified, "PattypCode");
            		this.pattypCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PattypAcronym
        {
            get { return this.pattypAcronym; }
            set { 
				if(this.pattypAcronym != value) {
					DataStateChanged(ObjectState.Modified, "PattypAcronym");
            		this.pattypAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PattypDescription
        {
            get { return this.pattypDescription; }
            set { 
				if(this.pattypDescription != value) {
					DataStateChanged(ObjectState.Modified, "PattypDescription");
            		this.pattypDescription = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PattypInstitutionId
        {
            get { return this.pattypInstitutionId; }
            set { 
				if(this.pattypInstitutionId != value) {
					DataStateChanged(ObjectState.Modified, "PattypInstitutionId");
            		this.pattypInstitutionId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PattypLocalId
        {
            get { return this.pattypLocalId; }
            set { 
				if(this.pattypLocalId != value) {
					DataStateChanged(ObjectState.Modified, "PattypLocalId");
            		this.pattypLocalId = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "PATTYPID":
							if (!reader.IsDBNull(i)) this.pattypId = reader.GetInt64(i);
							break;
						case "PATTYPCODE":
							if (!reader.IsDBNull(i)) this.pattypCode = Convert.ToString(reader.GetValue(i));
							break;
						case "PATTYPACRONYM":
							if (!reader.IsDBNull(i)) this.pattypAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "PATTYPDESCRIPTION":
							if (!reader.IsDBNull(i)) this.pattypDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "PATTYPINSTITUTIONID":
							if (!reader.IsDBNull(i)) this.pattypInstitutionId = reader.GetInt64(i);
							break;
						case "PATTYPLOCALID":
							if (!reader.IsDBNull(i)) this.pattypLocalId = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			PatientType patienttype = obj as PatientType;
			if (patienttype == null)
				return false;
			return patienttype.PattypId == PattypId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


