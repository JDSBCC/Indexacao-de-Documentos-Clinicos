using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: sexta-feira, 5 de Fevereiro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class ExecPlace_GEN : AbstractEntity
    {	
		#region Variables
		
		private long locexecid; ///
		private string locexeccode = string.Empty; ///
		private string locexecacronym = string.Empty; ///
		private string locexecdescription = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty ExecPlace object.
        /// </summary>
        public ExecPlace_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty ExecPlace object.
        /// </summary>
        public ExecPlace_GEN(long locexecid) 
			: base(ObjectState.Added, null) 
        {
			this.locexecid = locexecid;
        }
		/// <summary>
        /// Initialize an new empty ExecPlace object.
        /// </summary>
        public ExecPlace_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  ExecPlace object with the given parameters.
        /// </summary>
        public  ExecPlace_GEN(long locexecid, string locexeccode, string locexecacronym, string locexecdescription) 
			: base(ObjectState.Added, null) 
        {	 
			this.locexecid = locexecid;
			this.locexeccode = locexeccode;
			this.locexecacronym = locexecacronym;
			this.locexecdescription = locexecdescription;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long Locexecid
        {
            get { return this.locexecid; }
            set { 
				if(this.locexecid != value) {
					DataStateChanged(ObjectState.Modified, "Locexecid");
            		this.locexecid = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Locexeccode
        {
            get { return this.locexeccode; }
            set { 
				if(this.locexeccode != value) {
					DataStateChanged(ObjectState.Modified, "Locexeccode");
            		this.locexeccode = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Locexecacronym
        {
            get { return this.locexecacronym; }
            set { 
				if(this.locexecacronym != value) {
					DataStateChanged(ObjectState.Modified, "Locexecacronym");
            		this.locexecacronym = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Locexecdescription
        {
            get { return this.locexecdescription; }
            set { 
				if(this.locexecdescription != value) {
					DataStateChanged(ObjectState.Modified, "Locexecdescription");
            		this.locexecdescription = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "LOCEXECID":
							if (!reader.IsDBNull(i)) this.locexecid = reader.GetInt64(i);
							break;
						case "LOCEXECCODE":
							if (!reader.IsDBNull(i)) this.locexeccode = Convert.ToString(reader.GetValue(i));
							break;
						case "LOCEXECACRONYM":
							if (!reader.IsDBNull(i)) this.locexecacronym = Convert.ToString(reader.GetValue(i));
							break;
						case "LOCEXECDESCRIPTION":
							if (!reader.IsDBNull(i)) this.locexecdescription = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			ExecPlace execplace = obj as ExecPlace;
			if (execplace == null)
				return false;
			return execplace.Locexecid == Locexecid;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


