using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 7 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Application_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long applicationId; ///
		private string applicationCode; ///
		private string applicationAcronym; ///
		private string applicationDescription; ///
		
		private DocumentTypeList applicationDocumentTypes = new DocumentTypeList();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Application object.
        /// </summary>
        public Application_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Application object.
        /// </summary>
        public Application_GEN(long applicationId) : base(ObjectState.Added, null) 
        {
			this.applicationId = applicationId;
        }
		/// <summary>
        /// Initialize an new empty Application object.
        /// </summary>
        public Application_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Application object with the given parameters.
        /// </summary>
        public  Application_GEN(long applicationId, string applicationCode, string applicationAcronym, string applicationDescription) : base(ObjectState.Added, null) 
        {	 
			this.applicationId = applicationId;
			this.applicationCode = applicationCode;
			this.applicationAcronym = applicationAcronym;
			this.applicationDescription = applicationDescription;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ApplicationId
        {
            get { return this.applicationId; }
            set { 
				if(this.applicationId != value) {
					DataStateChanged(ObjectState.Modified, "ApplicationId");
            		this.applicationId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ApplicationCode
        {
            get { return this.applicationCode; }
            set { 
				if(this.applicationCode != value) {
					DataStateChanged(ObjectState.Modified, "ApplicationCode");
            		this.applicationCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ApplicationAcronym
        {
            get { return this.applicationAcronym; }
            set { 
				if(this.applicationAcronym != value) {
					DataStateChanged(ObjectState.Modified, "ApplicationAcronym");
            		this.applicationAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ApplicationDescription
        {
            get { return this.applicationDescription; }
            set { 
				if(this.applicationDescription != value) {
					DataStateChanged(ObjectState.Modified, "ApplicationDescription");
            		this.applicationDescription = value;
				}
			}
		}
		
		
		
		public DocumentTypeList ApplicationDocumentTypes
		{
			get { return this.applicationDocumentTypes; }
			set { 
				if(this.applicationDocumentTypes != value) {
					DataStateChanged(ObjectState.Modified, "ApplicationDocumentTypes");
            				this.applicationDocumentTypes = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		public virtual void AddApplicationDocumentTypes(DocumentType obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.applicationDocumentTypes.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemoveApplicationDocumentTypes(DocumentType obj)
		{
			this.applicationDocumentTypes.RemoveItem(obj);
			/*obj = this.applicationDocumentTypes[this.applicationDocumentTypes.IndexOf(obj)];
			this.applicationDocumentTypes.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.applicationDocumentTypesToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "APPLICATIONID":
							if (!reader.IsDBNull(i)) this.applicationId = reader.GetInt64(i);
							break;
						case "APPLICATIONCODE":
							if (!reader.IsDBNull(i)) this.applicationCode = Convert.ToString(reader.GetValue(i));
							break;
						case "APPLICATIONACRONYM":
							if (!reader.IsDBNull(i)) this.applicationAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "APPLICATIONDESCRIPTION":
							if (!reader.IsDBNull(i)) this.applicationDescription = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Application application = obj as Application;
			if (application == null)
				return false;
			return application.ApplicationId == ApplicationId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


