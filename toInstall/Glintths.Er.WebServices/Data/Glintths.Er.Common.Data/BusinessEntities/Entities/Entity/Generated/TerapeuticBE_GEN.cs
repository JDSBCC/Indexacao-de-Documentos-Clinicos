using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: sexta-feira, 5 de Mar?o de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Terapeutic_GEN : AbstractEntity
    {	
		#region Variables
		
		private long terapeuticId; ///
		private string terapeuticCode = string.Empty; ///
		private string terapeuticDescription = string.Empty; ///
		private string terapeuticAcronym = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Terapeutic object.
        /// </summary>
        public Terapeutic_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Terapeutic object.
        /// </summary>
        public Terapeutic_GEN(long terapeuticId) 
			: base(ObjectState.Added, null) 
        {
			this.terapeuticId = terapeuticId;
        }
		/// <summary>
        /// Initialize an new empty Terapeutic object.
        /// </summary>
        public Terapeutic_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Terapeutic object with the given parameters.
        /// </summary>
        public  Terapeutic_GEN(long terapeuticId, string terapeuticCode, string terapeuticDescription, string terapeuticAcronym) 
			: base(ObjectState.Added, null) 
        {	 
			this.terapeuticId = terapeuticId;
			this.terapeuticCode = terapeuticCode;
			this.terapeuticDescription = terapeuticDescription;
			this.terapeuticAcronym = terapeuticAcronym;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long TerapeuticId
        {
            get { return this.terapeuticId; }
            set { 
				if(this.terapeuticId != value) {
					DataStateChanged(ObjectState.Modified, "TerapeuticId");
            		this.terapeuticId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string TerapeuticCode
        {
            get { return this.terapeuticCode; }
            set { 
				if(this.terapeuticCode != value) {
					DataStateChanged(ObjectState.Modified, "TerapeuticCode");
            		this.terapeuticCode = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string TerapeuticDescription
        {
            get { return this.terapeuticDescription; }
            set { 
				if(this.terapeuticDescription != value) {
					DataStateChanged(ObjectState.Modified, "TerapeuticDescription");
            		this.terapeuticDescription = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string TerapeuticAcronym
        {
            get { return this.terapeuticAcronym; }
            set { 
				if(this.terapeuticAcronym != value) {
					DataStateChanged(ObjectState.Modified, "TerapeuticAcronym");
            		this.terapeuticAcronym = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "TERAPEUTICID":
							if (!reader.IsDBNull(i)) this.terapeuticId = reader.GetInt64(i);
							break;
						case "TERAPEUTICCODE":
							if (!reader.IsDBNull(i)) this.terapeuticCode = Convert.ToString(reader.GetValue(i));
							break;
						case "TERAPEUTICDESCRIPTION":
							if (!reader.IsDBNull(i)) this.terapeuticDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "TERAPEUTICACRONYM":
							if (!reader.IsDBNull(i)) this.terapeuticAcronym = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Terapeutic terapeutic = obj as Terapeutic;
			if (terapeutic == null)
				return false;
			return terapeutic.TerapeuticId == TerapeuticId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


