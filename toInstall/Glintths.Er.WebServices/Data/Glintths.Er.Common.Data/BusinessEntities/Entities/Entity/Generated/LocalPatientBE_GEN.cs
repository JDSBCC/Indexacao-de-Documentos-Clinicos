using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 29 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class LocalPatient_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long locpatId; ///
		private long locpatParentId; ///
		private long locpatEntityId; ///
		private long locpatPatientTypeId; ///
		private string locpatPatientId; ///
		private string locpatActive; ///
		
		private PatientType locpatPatientType = new PatientType();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty LocalPatient object.
        /// </summary>
        public LocalPatient_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty LocalPatient object.
        /// </summary>
        public LocalPatient_GEN(long locpatId) : base(ObjectState.Added, null) 
        {
			this.locpatId = locpatId;
        }
		/// <summary>
        /// Initialize an new empty LocalPatient object.
        /// </summary>
        public LocalPatient_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  LocalPatient object with the given parameters.
        /// </summary>
        public  LocalPatient_GEN(long locpatId, long locpatParentId, long locpatEntityId, long locpatPatientTypeId, string locpatPatientId, string locpatActive) : base(ObjectState.Added, null) 
        {	 
			this.locpatId = locpatId;
			this.locpatParentId = locpatParentId;
			this.locpatEntityId = locpatEntityId;
			this.locpatPatientTypeId = locpatPatientTypeId;
			this.locpatPatientId = locpatPatientId;
			this.locpatActive = locpatActive;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LocpatId
        {
            get { return this.locpatId; }
            set { 
				if(this.locpatId != value) {
					DataStateChanged(ObjectState.Modified, "LocpatId");
            		this.locpatId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LocpatParentId
        {
            get { return this.locpatParentId; }
            set { 
				if(this.locpatParentId != value) {
					DataStateChanged(ObjectState.Modified, "LocpatParentId");
            		this.locpatParentId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LocpatEntityId
        {
            get { return this.locpatEntityId; }
            set { 
				if(this.locpatEntityId != value) {
					DataStateChanged(ObjectState.Modified, "LocpatEntityId");
            		this.locpatEntityId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LocpatPatientTypeId
        {
            get { return this.locpatPatientTypeId; }
            set { 
				if(this.locpatPatientTypeId != value) {
					DataStateChanged(ObjectState.Modified, "LocpatPatientTypeId");
            		this.locpatPatientTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LocpatPatientId
        {
            get { return this.locpatPatientId; }
            set { 
				if(this.locpatPatientId != value) {
					DataStateChanged(ObjectState.Modified, "LocpatPatientId");
            		this.locpatPatientId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LocpatActive
        {
            get { return this.locpatActive; }
            set { 
				if(this.locpatActive != value) {
					DataStateChanged(ObjectState.Modified, "LocpatActive");
            		this.locpatActive = value;
				}
			}
		}
		
		
		
		public PatientType LocpatPatientType
		{
			get { return this.locpatPatientType; }
			set { 
				if(this.locpatPatientType != value) {
					DataStateChanged(ObjectState.Modified, "LocpatPatientType");
            				this.locpatPatientType = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "LOCPATID":
							if (!reader.IsDBNull(i)) this.locpatId = reader.GetInt64(i);
							break;
						case "LOCPATPARENTID":
							if (!reader.IsDBNull(i)) this.locpatParentId = reader.GetInt64(i);
							break;
						case "LOCPATENTITYID":
							if (!reader.IsDBNull(i)) this.locpatEntityId = reader.GetInt64(i);
							break;
						case "LOCPATPATIENTTYPEID":
							if (!reader.IsDBNull(i)) this.locpatPatientTypeId = reader.GetInt64(i);
							break;
						case "LOCPATPATIENTID":
							if (!reader.IsDBNull(i)) this.locpatPatientId = Convert.ToString(reader.GetValue(i));
							break;
						case "LOCPATACTIVE":
							if (!reader.IsDBNull(i)) this.locpatActive = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			LocalPatient localpatient = obj as LocalPatient;
			if (localpatient == null)
				return false;
			return localpatient.LocpatId == LocpatId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


