using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 22 de Dezembro de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class State_GEN : AbstractEntity
    {	
		#region Variables
		
		private long stateId; ///
		private string stateCode = string.Empty; ///
		private string stateTag = string.Empty; ///
		private string stateDescription = string.Empty; ///
		private string stateScope = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty State object.
        /// </summary>
        public State_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty State object.
        /// </summary>
        public State_GEN(long stateId) 
			: base(ObjectState.Added, null) 
        {
			this.stateId = stateId;
        }
		/// <summary>
        /// Initialize an new empty State object.
        /// </summary>
        public State_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  State object with the given parameters.
        /// </summary>
        public  State_GEN(string stateCode, string stateTag, string stateDescription, string stateScope) 
			: base(ObjectState.Added, null) 
        {	 
			this.stateCode = stateCode;
			this.stateTag = stateTag;
			this.stateDescription = stateDescription;
			this.stateScope = stateScope;
        }
		#endregion
		
		#region Properties
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long StateId
        {
            get { return this.stateId; }
            set { 
				if(this.stateId != value) {
					DataStateChanged(ObjectState.Modified, "StateId");
            		this.stateId = value;
				}
			}
		}
		
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string StateCode
        {
            get { return this.stateCode; }
            set { 
				if(this.stateCode != value) {
					DataStateChanged(ObjectState.Modified, "StateCode");
            		this.stateCode = value;
				}
			}
		}
		
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string StateTag
        {
            get { return this.stateTag; }
            set { 
				if(this.stateTag != value) {
					DataStateChanged(ObjectState.Modified, "StateTag");
            		this.stateTag = value;
				}
			}
		}
		
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string StateDescription
        {
            get { return this.stateDescription; }
            set { 
				if(this.stateDescription != value) {
					DataStateChanged(ObjectState.Modified, "StateDescription");
            		this.stateDescription = value;
				}
			}
		}
		
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string StateScope
        {
            get { return this.stateScope; }
            set { 
				if(this.stateScope != value) {
					DataStateChanged(ObjectState.Modified, "StateScope");
            		this.stateScope = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "STATEID":
							if (!reader.IsDBNull(i)) this.stateId = reader.GetInt64(i);
							break;
						case "STATECODE":
							if (!reader.IsDBNull(i)) this.stateCode = Convert.ToString(reader.GetValue(i));
							break;
						case "STATETAG":
							if (!reader.IsDBNull(i)) this.stateTag = Convert.ToString(reader.GetValue(i));
							break;
						case "STATEDESCRIPTION":
							if (!reader.IsDBNull(i)) this.stateDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "STATESCOPE":
							if (!reader.IsDBNull(i)) this.stateScope = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			State state = obj as State;
			if (state == null)
				return false;
			return state.StateId == StateId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


