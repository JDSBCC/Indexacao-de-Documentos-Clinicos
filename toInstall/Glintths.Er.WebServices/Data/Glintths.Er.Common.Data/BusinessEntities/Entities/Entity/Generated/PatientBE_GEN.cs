using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quinta-feira, 9 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Patient_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long patEntityId; ///
		private bool patEntityIdLoaded;
		private string patProcessNum; ///
		private bool patProcessNumLoaded;
		private string patSnsNum; ///
		private bool patSnsNumLoaded;
		private string patBenefNum; ///
		private bool patBenefNumLoaded;
		private string patIdCardNum; ///
		private bool patIdCardNumLoaded;
		private Nullable<DateTime> patBirthDate = new Nullable<DateTime>(); ///
		private bool patBirthDateLoaded;
		private long patGenderId; ///
		private bool patGenderIdLoaded;
		private long patMaritalStatusId; ///
		private bool patMaritalStatusIdLoaded;
		private string patHealthCentre; ///
		private bool patHealthCentreLoaded;
		
		private Gender patGender = new Gender();
		private bool patGenderLoaded;
		private ErEntity patEntity = new ErEntity();
		private bool patEntityLoaded;
		private MaritalStatus patMaritalStatus = new MaritalStatus();
		private bool patMaritalStatusLoaded;
		private LocalPatientList patLocalPatients = new LocalPatientList();
		private bool patLocalPatientsLoaded;
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Patient object.
        /// </summary>
        public Patient_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Patient object.
        /// </summary>
        public Patient_GEN(long patEntityId) : base(ObjectState.Added, null) 
        {
			this.patEntityId = patEntityId;
        }
		/// <summary>
        /// Initialize an new empty Patient object.
        /// </summary>
        public Patient_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Patient object with the given parameters.
        /// </summary>
        public  Patient_GEN(long patEntityId, string patProcessNum, string patSnsNum, string patBenefNum, string patIdCardNum, Nullable<DateTime> patBirthDate, long patGenderId, long patMaritalStatusId, string patHealthCentre) : base(ObjectState.Added, null) 
        {	 
			this.patEntityId = patEntityId;
			this.patProcessNum = patProcessNum;
			this.patSnsNum = patSnsNum;
			this.patBenefNum = patBenefNum;
			this.patIdCardNum = patIdCardNum;
			this.patBirthDate = patBirthDate;
			this.patGenderId = patGenderId;
			this.patMaritalStatusId = patMaritalStatusId;
			this.patHealthCentre = patHealthCentre;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PatEntityId
        {
            get { return this.patEntityId; }
            set { 
				if(this.patEntityId != value) {
					DataStateChanged(ObjectState.Modified, "PatEntityId");
            		this.patEntityId = value;
				}
			}
		}
		
		public bool PatEntityIdLoaded
        {
            get { return this.patEntityIdLoaded; }
			set { this.patEntityIdLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PatProcessNum
        {
            get { return this.patProcessNum; }
            set { 
				if(this.patProcessNum != value) {
					DataStateChanged(ObjectState.Modified, "PatProcessNum");
            		this.patProcessNum = value;
				}
			}
		}
		
		public bool PatProcessNumLoaded
        {
            get { return this.patProcessNumLoaded; }
			set { this.patProcessNumLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PatSnsNum
        {
            get { return this.patSnsNum; }
            set { 
				if(this.patSnsNum != value) {
					DataStateChanged(ObjectState.Modified, "PatSnsNum");
            		this.patSnsNum = value;
				}
			}
		}
		
		public bool PatSnsNumLoaded
        {
            get { return this.patSnsNumLoaded; }
			set { this.patSnsNumLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PatBenefNum
        {
            get { return this.patBenefNum; }
            set { 
				if(this.patBenefNum != value) {
					DataStateChanged(ObjectState.Modified, "PatBenefNum");
            		this.patBenefNum = value;
				}
			}
		}
		
		public bool PatBenefNumLoaded
        {
            get { return this.patBenefNumLoaded; }
			set { this.patBenefNumLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PatIdCardNum
        {
            get { return this.patIdCardNum; }
            set { 
				if(this.patIdCardNum != value) {
					DataStateChanged(ObjectState.Modified, "PatIdCardNum");
            		this.patIdCardNum = value;
				}
			}
		}
		
		public bool PatIdCardNumLoaded
        {
            get { return this.patIdCardNumLoaded; }
			set { this.patIdCardNumLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public Nullable<DateTime> PatBirthDate
        {
            get { return this.patBirthDate; }
            set { 
				if(!this.patBirthDate.Equals(value)) {
					DataStateChanged(ObjectState.Modified, "PatBirthDate");
					this.patBirthDate = value;
				}
		}

		}
		
		public bool PatBirthDateLoaded
        {
            get { return this.patBirthDateLoaded; }
			set { this.patBirthDateLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PatGenderId
        {
            get { return this.patGenderId; }
            set { 
				if(this.patGenderId != value) {
					DataStateChanged(ObjectState.Modified, "PatGenderId");
            		this.patGenderId = value;
				}
			}
		}
		
		public bool PatGenderIdLoaded
        {
            get { return this.patGenderIdLoaded; }
			set { this.patGenderIdLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PatMaritalStatusId
        {
            get { return this.patMaritalStatusId; }
            set { 
				if(this.patMaritalStatusId != value) {
					DataStateChanged(ObjectState.Modified, "PatMaritalStatusId");
            		this.patMaritalStatusId = value;
				}
			}
		}
		
		public bool PatMaritalStatusIdLoaded
        {
            get { return this.patMaritalStatusIdLoaded; }
			set { this.patMaritalStatusIdLoaded = value; }
		}
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PatHealthCentre
        {
            get { return this.patHealthCentre; }
            set { 
				if(this.patHealthCentre != value) {
					DataStateChanged(ObjectState.Modified, "PatHealthCentre");
            		this.patHealthCentre = value;
				}
			}
		}
		
		public bool PatHealthCentreLoaded
        {
            get { return this.patHealthCentreLoaded; }
			set { this.patHealthCentreLoaded = value; }
		}
		
		
		public Gender PatGender
		{
			get { return this.patGender; }
			set { 
				if(this.patGender != value) {
					DataStateChanged(ObjectState.Modified, "PatGender");
            				this.patGender = value;
				}
			}
		}
		
		public bool PatGenderLoaded
        {
            get { return this.patGenderLoaded; }
			set { this.patGenderLoaded = value; }
		}
		
		public ErEntity PatEntity
		{
			get { return this.patEntity; }
			set { 
				if(this.patEntity != value) {
					DataStateChanged(ObjectState.Modified, "PatEntity");
            				this.patEntity = value;
				}
			}
		}
		
		public bool PatEntityLoaded
        {
            get { return this.patEntityLoaded; }
			set { this.patEntityLoaded = value; }
		}
		
		public MaritalStatus PatMaritalStatus
		{
			get { return this.patMaritalStatus; }
			set { 
				if(this.patMaritalStatus != value) {
					DataStateChanged(ObjectState.Modified, "PatMaritalStatus");
            				this.patMaritalStatus = value;
				}
			}
		}
		
		public bool PatMaritalStatusLoaded
        {
            get { return this.patMaritalStatusLoaded; }
			set { this.patMaritalStatusLoaded = value; }
		}
		
		public LocalPatientList PatLocalPatients
		{
			get { return this.patLocalPatients; }
			set { 
				if(this.patLocalPatients != value) {
					DataStateChanged(ObjectState.Modified, "PatLocalPatients");
            				this.patLocalPatients = value;
				}
			}
		}
		
		public bool PatLocalPatientsLoaded
        {
            get { return this.patLocalPatientsLoaded; }
			set { this.patLocalPatientsLoaded = value; }
		}
		
		#endregion
	
		#region Methods
	
		public virtual void AddPatLocalPatients(LocalPatient obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.patLocalPatients.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemovePatLocalPatients(LocalPatient obj)
		{
			this.patLocalPatients.RemoveItem(obj);
			/*obj = this.patLocalPatients[this.patLocalPatients.IndexOf(obj)];
			this.patLocalPatients.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.patLocalPatientsToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "PATENTITYID":
							if (!reader.IsDBNull(i)) 
							{
								this.patEntityId = reader.GetInt64(i);
								this.patEntityIdLoaded = true;
							}
							break;
						case "PATPROCESSNUM":
							if (!reader.IsDBNull(i)) 
							{
								this.patProcessNum = Convert.ToString(reader.GetValue(i));
								this.patProcessNumLoaded = true;
							}
							break;
						case "PATSNSNUM":
							if (!reader.IsDBNull(i)) 
							{
								this.patSnsNum = Convert.ToString(reader.GetValue(i));
								this.patSnsNumLoaded = true;
							}
							break;
						case "PATBENEFNUM":
							if (!reader.IsDBNull(i)) 
							{
								this.patBenefNum = Convert.ToString(reader.GetValue(i));
								this.patBenefNumLoaded = true;
							}
							break;
						case "PATIDCARDNUM":
							if (!reader.IsDBNull(i)) 
							{
								this.patIdCardNum = Convert.ToString(reader.GetValue(i));
								this.patIdCardNumLoaded = true;
							}
							break;
						case "PATBIRTHDATE":
							if (!reader.IsDBNull(i)) 
							{
								this.patBirthDate = reader.GetDateTime(i);
								this.patBirthDateLoaded = true;
							}
							break;
						case "PATGENDERID":
							if (!reader.IsDBNull(i)) 
							{
								this.patGenderId = reader.GetInt64(i);
								this.patGenderIdLoaded = true;
							}
							break;
						case "PATMARITALSTATUSID":
							if (!reader.IsDBNull(i)) 
							{
								this.patMaritalStatusId = reader.GetInt64(i);
								this.patMaritalStatusIdLoaded = true;
							}
							break;
						case "PATHEALTHCENTRE":
							if (!reader.IsDBNull(i)) 
							{
								this.patHealthCentre = Convert.ToString(reader.GetValue(i));
								this.patHealthCentreLoaded = true;
							}
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Patient patient = obj as Patient;
			if (patient == null)
				return false;
			return patient.PatEntityId == PatEntityId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


