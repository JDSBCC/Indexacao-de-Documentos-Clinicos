using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quinta-feira, 9 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Gender_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long genId; ///
		private string genCode; ///
		private string genAcronym; ///
		private string genDescription; ///
		private long genPresOrder; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Gender object.
        /// </summary>
        public Gender_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Gender object.
        /// </summary>
        public Gender_GEN(long genId) : base(ObjectState.Added, null) 
        {
			this.genId = genId;
        }
		/// <summary>
        /// Initialize an new empty Gender object.
        /// </summary>
        public Gender_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Gender object with the given parameters.
        /// </summary>
        public  Gender_GEN(long genId, string genCode, string genAcronym, string genDescription, long genPresOrder) : base(ObjectState.Added, null) 
        {	 
			this.genId = genId;
			this.genCode = genCode;
			this.genAcronym = genAcronym;
			this.genDescription = genDescription;
			this.genPresOrder = genPresOrder;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long GenId
        {
            get { return this.genId; }
            set { 
				if(this.genId != value) {
					DataStateChanged(ObjectState.Modified, "GenId");
            		this.genId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string GenCode
        {
            get { return this.genCode; }
            set { 
				if(this.genCode != value) {
					DataStateChanged(ObjectState.Modified, "GenCode");
            		this.genCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string GenAcronym
        {
            get { return this.genAcronym; }
            set { 
				if(this.genAcronym != value) {
					DataStateChanged(ObjectState.Modified, "GenAcronym");
            		this.genAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string GenDescription
        {
            get { return this.genDescription; }
            set { 
				if(this.genDescription != value) {
					DataStateChanged(ObjectState.Modified, "GenDescription");
            		this.genDescription = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long GenPresOrder
        {
            get { return this.genPresOrder; }
            set { 
				if(this.genPresOrder != value) {
					DataStateChanged(ObjectState.Modified, "GenPresOrder");
            		this.genPresOrder = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "GENID":
							if (!reader.IsDBNull(i)) this.genId = reader.GetInt64(i);
							break;
						case "GENCODE":
							if (!reader.IsDBNull(i)) this.genCode = Convert.ToString(reader.GetValue(i));
							break;
						case "GENACRONYM":
							if (!reader.IsDBNull(i)) this.genAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "GENDESCRIPTION":
							if (!reader.IsDBNull(i)) this.genDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "GENPRESORDER":
							if (!reader.IsDBNull(i)) this.genPresOrder = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Gender gender = obj as Gender;
			if (gender == null)
				return false;
			return gender.GenId == GenId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


