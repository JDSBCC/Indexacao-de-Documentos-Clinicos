using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 7 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Genre_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long genreId; ///
		private string genreCode; ///
		private string genreAcronym; ///
		private string genreDescription; ///
		private long genrePresOrder; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Genre object.
        /// </summary>
        public Genre_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Genre object.
        /// </summary>
        public Genre_GEN(long genreId) : base(ObjectState.Added, null) 
        {
			this.genreId = genreId;
        }
		/// <summary>
        /// Initialize an new empty Genre object.
        /// </summary>
        public Genre_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Genre object with the given parameters.
        /// </summary>
        public  Genre_GEN(long genreId, string genreCode, string genreAcronym, string genreDescription, long genrePresOrder) : base(ObjectState.Added, null) 
        {	 
			this.genreId = genreId;
			this.genreCode = genreCode;
			this.genreAcronym = genreAcronym;
			this.genreDescription = genreDescription;
			this.genrePresOrder = genrePresOrder;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long GenreId
        {
            get { return this.genreId; }
            set { 
				if(this.genreId != value) {
					DataStateChanged(ObjectState.Modified, "GenreId");
            		this.genreId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string GenreCode
        {
            get { return this.genreCode; }
            set { 
				if(this.genreCode != value) {
					DataStateChanged(ObjectState.Modified, "GenreCode");
            		this.genreCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string GenreAcronym
        {
            get { return this.genreAcronym; }
            set { 
				if(this.genreAcronym != value) {
					DataStateChanged(ObjectState.Modified, "GenreAcronym");
            		this.genreAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string GenreDescription
        {
            get { return this.genreDescription; }
            set { 
				if(this.genreDescription != value) {
					DataStateChanged(ObjectState.Modified, "GenreDescription");
            		this.genreDescription = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long GenrePresOrder
        {
            get { return this.genrePresOrder; }
            set { 
				if(this.genrePresOrder != value) {
					DataStateChanged(ObjectState.Modified, "GenrePresOrder");
            		this.genrePresOrder = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "GENREID":
							if (!reader.IsDBNull(i)) this.genreId = reader.GetInt64(i);
							break;
						case "GENRECODE":
							if (!reader.IsDBNull(i)) this.genreCode = Convert.ToString(reader.GetValue(i));
							break;
						case "GENREACRONYM":
							if (!reader.IsDBNull(i)) this.genreAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "GENREDESCRIPTION":
							if (!reader.IsDBNull(i)) this.genreDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "GENREPRESORDER":
							if (!reader.IsDBNull(i)) this.genrePresOrder = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Genre genre = obj as Genre;
			if (genre == null)
				return false;
			return genre.GenreId == GenreId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


