using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 7 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Place_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long placeInstitutionId; ///
		private long placeId; ///
		private string placeCode; ///
		private string placeAcronym; ///
		private string placeDescription; ///
		
		private ApplicationList placeApplicationList = new ApplicationList();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Place object.
        /// </summary>
        public Place_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Place object.
        /// </summary>
        public Place_GEN(long placeInstitutionId, long placeId) : base(ObjectState.Added, null) 
        {
			this.placeInstitutionId = placeInstitutionId;
			this.placeId = placeId;
        }
		/// <summary>
        /// Initialize an new empty Place object.
        /// </summary>
        public Place_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Place object with the given parameters.
        /// </summary>
        public  Place_GEN(long placeInstitutionId, long placeId, string placeCode, string placeAcronym, string placeDescription) : base(ObjectState.Added, null) 
        {	 
			this.placeInstitutionId = placeInstitutionId;
			this.placeId = placeId;
			this.placeCode = placeCode;
			this.placeAcronym = placeAcronym;
			this.placeDescription = placeDescription;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PlaceInstitutionId
        {
            get { return this.placeInstitutionId; }
            set { 
				if(this.placeInstitutionId != value) {
					DataStateChanged(ObjectState.Modified, "PlaceInstitutionId");
            		this.placeInstitutionId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long PlaceId
        {
            get { return this.placeId; }
            set { 
				if(this.placeId != value) {
					DataStateChanged(ObjectState.Modified, "PlaceId");
            		this.placeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PlaceCode
        {
            get { return this.placeCode; }
            set { 
				if(this.placeCode != value) {
					DataStateChanged(ObjectState.Modified, "PlaceCode");
            		this.placeCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PlaceAcronym
        {
            get { return this.placeAcronym; }
            set { 
				if(this.placeAcronym != value) {
					DataStateChanged(ObjectState.Modified, "PlaceAcronym");
            		this.placeAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string PlaceDescription
        {
            get { return this.placeDescription; }
            set { 
				if(this.placeDescription != value) {
					DataStateChanged(ObjectState.Modified, "PlaceDescription");
            		this.placeDescription = value;
				}
			}
		}
		
		
		
		public ApplicationList PlaceApplicationList
		{
			get { return this.placeApplicationList; }
			set { 
				if(this.placeApplicationList != value) {
					DataStateChanged(ObjectState.Modified, "PlaceApplicationList");
            				this.placeApplicationList = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		public virtual void AddPlaceApplication(Application obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.placeApplicationList.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemovePlaceApplication(Application obj)
		{
			this.placeApplicationList.RemoveItem(obj);
			/*obj = this.placeApplicationList[this.placeApplicationList.IndexOf(obj)];
			this.placeApplicationList.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.placeApplicationListToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "PLACEINSTITUTIONID":
							if (!reader.IsDBNull(i)) this.placeInstitutionId = reader.GetInt64(i);
							break;
						case "PLACEID":
							if (!reader.IsDBNull(i)) this.placeId = reader.GetInt64(i);
							break;
						case "PLACECODE":
							if (!reader.IsDBNull(i)) this.placeCode = Convert.ToString(reader.GetValue(i));
							break;
						case "PLACEACRONYM":
							if (!reader.IsDBNull(i)) this.placeAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "PLACEDESCRIPTION":
							if (!reader.IsDBNull(i)) this.placeDescription = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Place place = obj as Place;
			if (place == null)
				return false;
			return place.PlaceId == PlaceId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


