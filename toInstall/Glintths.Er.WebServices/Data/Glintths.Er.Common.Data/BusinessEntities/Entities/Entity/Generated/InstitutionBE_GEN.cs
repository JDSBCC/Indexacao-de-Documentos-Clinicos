using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 7 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Institution_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long institutionId; ///
		private string institutionCode; ///
		private string institutionAcronym; ///
		private string institutionDesc; ///
		
		private PlaceList institutionPlaceList = new PlaceList();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Institution object.
        /// </summary>
        public Institution_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Institution object.
        /// </summary>
        public Institution_GEN(long institutionId) : base(ObjectState.Added, null) 
        {
			this.institutionId = institutionId;
        }
		/// <summary>
        /// Initialize an new empty Institution object.
        /// </summary>
        public Institution_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Institution object with the given parameters.
        /// </summary>
        public  Institution_GEN(long institutionId, string institutionCode, string institutionAcronym, string institutionDesc) : base(ObjectState.Added, null) 
        {	 
			this.institutionId = institutionId;
			this.institutionCode = institutionCode;
			this.institutionAcronym = institutionAcronym;
			this.institutionDesc = institutionDesc;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long InstitutionId
        {
            get { return this.institutionId; }
            set { 
				if(this.institutionId != value) {
					DataStateChanged(ObjectState.Modified, "InstitutionId");
            		this.institutionId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string InstitutionCode
        {
            get { return this.institutionCode; }
            set { 
				if(this.institutionCode != value) {
					DataStateChanged(ObjectState.Modified, "InstitutionCode");
            		this.institutionCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string InstitutionAcronym
        {
            get { return this.institutionAcronym; }
            set { 
				if(this.institutionAcronym != value) {
					DataStateChanged(ObjectState.Modified, "InstitutionAcronym");
            		this.institutionAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string InstitutionDesc
        {
            get { return this.institutionDesc; }
            set { 
				if(this.institutionDesc != value) {
					DataStateChanged(ObjectState.Modified, "InstitutionDesc");
            		this.institutionDesc = value;
				}
			}
		}
		
		
		
		public PlaceList InstitutionPlaceList
		{
			get { return this.institutionPlaceList; }
			set { 
				if(this.institutionPlaceList != value) {
					DataStateChanged(ObjectState.Modified, "InstitutionPlaceList");
            				this.institutionPlaceList = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		public virtual void AddInstitutionPlace(Place obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.institutionPlaceList.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemoveInstitutionPlace(Place obj)
		{
			this.institutionPlaceList.RemoveItem(obj);
			/*obj = this.institutionPlaceList[this.institutionPlaceList.IndexOf(obj)];
			this.institutionPlaceList.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.institutionPlaceListToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "INSTITUTIONID":
							if (!reader.IsDBNull(i)) this.institutionId = reader.GetInt64(i);
							break;
						case "INSTITUTIONCODE":
							if (!reader.IsDBNull(i)) this.institutionCode = Convert.ToString(reader.GetValue(i));
							break;
						case "INSTITUTIONACRONYM":
							if (!reader.IsDBNull(i)) this.institutionAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "INSTITUTIONDESC":
							if (!reader.IsDBNull(i)) this.institutionDesc = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Institution institution = obj as Institution;
			if (institution == null)
				return false;
			return institution.InstitutionId == InstitutionId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


