using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 9 de Fevereiro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class ERConfiguration_GEN : AbstractEntity
    {	
		#region Variables
		
		private long erConfigInstId; ///
		private long erConfigPlaceId; ///
		private long erConfigAppId; ///
		private long erConfigDocTypeId; ///
		private string erConfigKey = string.Empty; ///
		private string erConfigValue = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty ERConfiguration object.
        /// </summary>
        public ERConfiguration_GEN()
            : base(ObjectState.Added, null)
        {
        }
	
		/// <summary>
        /// Initialize an new empty ERConfiguration object.
        /// </summary>
        public ERConfiguration_GEN(long erConfigInstId, long erConfigPlaceId, long erConfigAppId, long erConfigDocTypeId, string erConfigKey)
            : base(ObjectState.Added, null)
        {
			this.erConfigInstId = erConfigInstId;
			this.erConfigPlaceId = erConfigPlaceId;
			this.erConfigAppId = erConfigAppId;
			this.erConfigDocTypeId = erConfigDocTypeId;
			this.erConfigKey = erConfigKey;
        }
		/// <summary>
        /// Initialize an new empty ERConfiguration object.
        /// </summary>
        public ERConfiguration_GEN(IDataReader reader, string companyDB)
            : base(ObjectState.Unchanged, null)
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  ERConfiguration object with the given parameters.
        /// </summary>
        public  ERConfiguration_GEN(long erConfigInstId, long erConfigPlaceId, long erConfigAppId, long erConfigDocTypeId, string erConfigKey, string erConfigValue)
            : base(ObjectState.Added, null)
        {	 
			this.erConfigInstId = erConfigInstId;
			this.erConfigPlaceId = erConfigPlaceId;
			this.erConfigAppId = erConfigAppId;
			this.erConfigDocTypeId = erConfigDocTypeId;
			this.erConfigKey = erConfigKey;
			this.erConfigValue = erConfigValue;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ErConfigInstId
        {
            get { return this.erConfigInstId; }
            set { 
				if(this.erConfigInstId != value) {
					DataStateChanged(ObjectState.Modified, "ErConfigInstId");
            		this.erConfigInstId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ErConfigPlaceId
        {
            get { return this.erConfigPlaceId; }
            set { 
				if(this.erConfigPlaceId != value) {
					DataStateChanged(ObjectState.Modified, "ErConfigPlaceId");
            		this.erConfigPlaceId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ErConfigAppId
        {
            get { return this.erConfigAppId; }
            set { 
				if(this.erConfigAppId != value) {
					DataStateChanged(ObjectState.Modified, "ErConfigAppId");
            		this.erConfigAppId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ErConfigDocTypeId
        {
            get { return this.erConfigDocTypeId; }
            set { 
				if(this.erConfigDocTypeId != value) {
					DataStateChanged(ObjectState.Modified, "ErConfigDocTypeId");
            		this.erConfigDocTypeId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ErConfigKey
        {
            get { return this.erConfigKey; }
            set { 
				if(this.erConfigKey != value) {
					DataStateChanged(ObjectState.Modified, "ErConfigKey");
            		this.erConfigKey = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ErConfigValue
        {
            get { return this.erConfigValue; }
            set { 
				if(this.erConfigValue != value) {
					DataStateChanged(ObjectState.Modified, "ErConfigValue");
            		this.erConfigValue = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "ERCONFIGINSTID":
							if (!reader.IsDBNull(i)) this.erConfigInstId = reader.GetInt64(i);
							break;
						case "ERCONFIGPLACEID":
							if (!reader.IsDBNull(i)) this.erConfigPlaceId = reader.GetInt64(i);
							break;
						case "ERCONFIGAPPID":
							if (!reader.IsDBNull(i)) this.erConfigAppId = reader.GetInt64(i);
							break;
						case "ERCONFIGDOCTYPEID":
							if (!reader.IsDBNull(i)) this.erConfigDocTypeId = reader.GetInt64(i);
							break;
						case "ERCONFIGKEY":
							if (!reader.IsDBNull(i)) this.erConfigKey = Convert.ToString(reader.GetValue(i));
							break;
						case "ERCONFIGVALUE":
							if (!reader.IsDBNull(i)) this.erConfigValue = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			ERConfiguration erconfiguration = obj as ERConfiguration;
			if (erconfiguration == null)
				return false;
			return erconfiguration.ErConfigKey.Equals(ErConfigKey);; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


