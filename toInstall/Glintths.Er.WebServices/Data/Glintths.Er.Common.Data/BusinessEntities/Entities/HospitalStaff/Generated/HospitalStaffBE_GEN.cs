using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Glintths.Er.Common.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 25 de Agosto de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class HospitalStaff_GEN : Entity
    {	
		#region Variables
		
		private string hospStaffMechanNum = string.Empty; ///
		private bool hospStaffMechanNumLoaded;
		private string hospStaffType = string.Empty; ///
		private bool hospStaffTypeLoaded;
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty HospitalStaff object.
        /// </summary>
        public HospitalStaff_GEN() 
			: base()
        {
        }
	
		/// <summary>
        /// Initialize an new empty HospitalStaff object.
        /// </summary>
		/// <summary>
        /// Initialize an new empty HospitalStaff object.
        /// </summary>
        public HospitalStaff_GEN(IDataReader reader, string companyDB) 
			: base(reader, companyDB)
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  HospitalStaff object with the given parameters.
        /// </summary>
        public  HospitalStaff_GEN(string hospStaffMechanNum, string hospStaffType) 
			: base()
        {	 
			this.hospStaffMechanNum = hospStaffMechanNum;
			this.hospStaffType = hospStaffType;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string HospStaffMechanNum
        {
            get { return this.hospStaffMechanNum; }
            set { 
				if(this.hospStaffMechanNum != value) {
					this.hospStaffMechanNum = value;
					DataStateChanged(ObjectState.Modified, "HospStaffMechanNum");
				}
			}
		}
		
		[DataMember]
		public bool HospStaffMechanNumLoaded
        {
            get { return this.hospStaffMechanNumLoaded; }
			set { this.hospStaffMechanNumLoaded = value; }
		}
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string HospStaffType
        {
            get { return this.hospStaffType; }
            set { 
				if(this.hospStaffType != value) {
					this.hospStaffType = value;
					DataStateChanged(ObjectState.Modified, "HospStaffType");
				}
			}
		}
		
		[DataMember]
		public bool HospStaffTypeLoaded
        {
            get { return this.hospStaffTypeLoaded; }
			set { this.hospStaffTypeLoaded = value; }
		}
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "HOSPSTAFFMECHANNUM":
							if (!reader.IsDBNull(i)) 
							{
								this.hospStaffMechanNum = Convert.ToString(reader.GetValue(i));
								this.hospStaffMechanNumLoaded = true;
							}
							break;
						case "HOSPSTAFFTYPE":
							if (!reader.IsDBNull(i)) 
							{
								this.hospStaffType = Convert.ToString(reader.GetValue(i));
								this.hospStaffTypeLoaded = true;
							}
							break;
					}
				}
            }
		}
		
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


