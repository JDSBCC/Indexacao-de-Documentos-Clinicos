using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Glintths.Er.Common.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 25 de Agosto de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Entity_GEN : AbstractEntity
    {	
		#region Variables
		
		private string entName = string.Empty; ///
		private string entTaxPayerNum = string.Empty; ///
		private string entAddress = string.Empty; ///
		private string entPlace = string.Empty; ///
		private string entPostalCode = string.Empty; ///
		private string entPhoneNum1 = string.Empty; ///
		private string entPhoneNum2 = string.Empty; ///
		private string entFaxNum = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Entity object.
        /// </summary>
        public Entity_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Entity object.
        /// </summary>
		/// <summary>
        /// Initialize an new empty Entity object.
        /// </summary>
        public Entity_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Entity object with the given parameters.
        /// </summary>
        public  Entity_GEN(string entName, string entTaxPayerNum, string entAddress, string entPlace, string entPostalCode, string entPhoneNum1, string entPhoneNum2, string entFaxNum) 
			: base(ObjectState.Added, null) 
        {	 
			this.entName = entName;
			this.entTaxPayerNum = entTaxPayerNum;
			this.entAddress = entAddress;
			this.entPlace = entPlace;
			this.entPostalCode = entPostalCode;
			this.entPhoneNum1 = entPhoneNum1;
			this.entPhoneNum2 = entPhoneNum2;
			this.entFaxNum = entFaxNum;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntName
        {
            get { return this.entName; }
            set { 
				if(this.entName != value) {
					this.entName = value;
					DataStateChanged(ObjectState.Modified, "EntName");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntTaxPayerNum
        {
            get { return this.entTaxPayerNum; }
            set { 
				if(this.entTaxPayerNum != value) {
					this.entTaxPayerNum = value;
					DataStateChanged(ObjectState.Modified, "EntTaxPayerNum");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntAddress
        {
            get { return this.entAddress; }
            set { 
				if(this.entAddress != value) {
					this.entAddress = value;
					DataStateChanged(ObjectState.Modified, "EntAddress");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntPlace
        {
            get { return this.entPlace; }
            set { 
				if(this.entPlace != value) {
					this.entPlace = value;
					DataStateChanged(ObjectState.Modified, "EntPlace");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntPostalCode
        {
            get { return this.entPostalCode; }
            set { 
				if(this.entPostalCode != value) {
					this.entPostalCode = value;
					DataStateChanged(ObjectState.Modified, "EntPostalCode");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntPhoneNum1
        {
            get { return this.entPhoneNum1; }
            set { 
				if(this.entPhoneNum1 != value) {
					this.entPhoneNum1 = value;
					DataStateChanged(ObjectState.Modified, "EntPhoneNum1");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntPhoneNum2
        {
            get { return this.entPhoneNum2; }
            set { 
				if(this.entPhoneNum2 != value) {
					this.entPhoneNum2 = value;
					DataStateChanged(ObjectState.Modified, "EntPhoneNum2");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EntFaxNum
        {
            get { return this.entFaxNum; }
            set { 
				if(this.entFaxNum != value) {
					this.entFaxNum = value;
					DataStateChanged(ObjectState.Modified, "EntFaxNum");
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "ENTNAME":
							if (!reader.IsDBNull(i)) this.entName = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTTAXPAYERNUM":
							if (!reader.IsDBNull(i)) this.entTaxPayerNum = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTADDRESS":
							if (!reader.IsDBNull(i)) this.entAddress = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTPLACE":
							if (!reader.IsDBNull(i)) this.entPlace = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTPOSTALCODE":
							if (!reader.IsDBNull(i)) this.entPostalCode = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTPHONENUM1":
							if (!reader.IsDBNull(i)) this.entPhoneNum1 = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTPHONENUM2":
							if (!reader.IsDBNull(i)) this.entPhoneNum2 = Convert.ToString(reader.GetValue(i));
							break;
						case "ENTFAXNUM":
							if (!reader.IsDBNull(i)) this.entFaxNum = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


