using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.ER2Indexer.WCF.BusinessEntities;

namespace Cpchs.ER2Indexer.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: segunda-feira, 10 de Novembro de 2008
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class DocumentInfo_GEN : AbstractEntity
    {	
		#region Variables
	
		private string key;
		
		private decimal documentInfoXmlId; ///
		private object documentInfoXml; ///
		private long documentInfoInstId; ///
		private long documentInfoPlaceId; ///
		private long documentInfoAppId; ///
		private long documentInfoDocTypeId; ///
		private string documentInfoDocRef; ///
		private Nullable<DateTime> documentInfoDocDate = new Nullable<DateTime>(); ///
		private string documentInfoProcState; ///
		private long documentInfoDocId; ///
		
		private FileStreamInfoList filesStreams = new FileStreamInfoList();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty DocumentInfo object.
        /// </summary>
        public DocumentInfo_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty DocumentInfo object.
        /// </summary>
        public DocumentInfo_GEN(decimal documentInfoXmlId) : base(ObjectState.Added, null) 
        {
			this.documentInfoXmlId = documentInfoXmlId;
			this.key = BuildKey(documentInfoXmlId.ToString(CultureInfo.CurrentCulture));
        }
		/// <summary>
        /// Initialize an new empty DocumentInfo object.
        /// </summary>
        public DocumentInfo_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
			this.key = BuildKey(documentInfoXmlId.ToString(CultureInfo.CurrentCulture));
        }
		
        /// <summary>
        /// Initialize a new  DocumentInfo object with the given parameters.
        /// </summary>
        public  DocumentInfo_GEN(object documentInfoXml, long documentInfoInstId, long documentInfoPlaceId, long documentInfoAppId, long documentInfoDocTypeId, string documentInfoDocRef, Nullable<DateTime> documentInfoDocDate, string documentInfoProcState, long documentInfoDocId) : base(ObjectState.Added, null) 
        {	 
			this.documentInfoXml = documentInfoXml;
			this.documentInfoInstId = documentInfoInstId;
			this.documentInfoPlaceId = documentInfoPlaceId;
			this.documentInfoAppId = documentInfoAppId;
			this.documentInfoDocTypeId = documentInfoDocTypeId;
			this.documentInfoDocRef = documentInfoDocRef;
			this.documentInfoDocDate = documentInfoDocDate;
			this.documentInfoProcState = documentInfoProcState;
			this.documentInfoDocId = documentInfoDocId;
			this.key = BuildKey(documentInfoXmlId.ToString(CultureInfo.CurrentCulture));
        }
		#endregion
		
		#region Properties
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
		public string DocumentInfoKey
		{
			get { return this.key; }
		}
	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public decimal DocumentInfoXmlId
        {
            get { return this.documentInfoXmlId; }
            set { 
				if(this.documentInfoXmlId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoXmlId");
            		this.documentInfoXmlId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public object DocumentInfoXml
        {
            get { return this.documentInfoXml; }
            set { 
				if(this.documentInfoXml != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoXml");
            		this.documentInfoXml = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentInfoInstId
        {
            get { return this.documentInfoInstId; }
            set { 
				if(this.documentInfoInstId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoInstId");
            		this.documentInfoInstId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentInfoPlaceId
        {
            get { return this.documentInfoPlaceId; }
            set { 
				if(this.documentInfoPlaceId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoPlaceId");
            		this.documentInfoPlaceId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentInfoAppId
        {
            get { return this.documentInfoAppId; }
            set { 
				if(this.documentInfoAppId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoAppId");
            		this.documentInfoAppId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentInfoDocTypeId
        {
            get { return this.documentInfoDocTypeId; }
            set { 
				if(this.documentInfoDocTypeId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoDocTypeId");
            		this.documentInfoDocTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentInfoDocRef
        {
            get { return this.documentInfoDocRef; }
            set { 
				if(this.documentInfoDocRef != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoDocRef");
            		this.documentInfoDocRef = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public Nullable<DateTime> DocumentInfoDocDate
        {
            get { return this.documentInfoDocDate; }
            set { 
				if(!this.documentInfoDocDate.Equals(value)) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoDocDate");
					this.documentInfoDocDate = value;
				}
		}

		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentInfoProcState
        {
            get { return this.documentInfoProcState; }
            set { 
				if(this.documentInfoProcState != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoProcState");
            		this.documentInfoProcState = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentInfoDocId
        {
            get { return this.documentInfoDocId; }
            set { 
				if(this.documentInfoDocId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentInfoDocId");
            		this.documentInfoDocId = value;
				}
			}
		}
		
		
		
		public FileStreamInfoList FilesStreams
		{
			get { return this.filesStreams; }
			set { 
				if(this.filesStreams != value) {
					DataStateChanged(ObjectState.Modified, "FilesStreams");
            				this.filesStreams = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		public virtual void AddFilesStreams(FileStreamInfo obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.filesStreams.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemoveFilesStreams(FileStreamInfo obj)
		{
			this.filesStreams.RemoveItem(obj);
			/*obj = this.filesStreams[this.filesStreams.IndexOf(obj)];
			this.filesStreams.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.filesStreamsToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "DOCUMENTINFOXMLID":
							if (!reader.IsDBNull(i)) this.documentInfoXmlId = reader.GetDecimal(i);
							break;
						case "DOCUMENTINFOXML":
							if (!reader.IsDBNull(i)) this.documentInfoXml = reader.GetValue(i);
							break;
						case "DOCUMENTINFOINSTID":
							if (!reader.IsDBNull(i)) this.documentInfoInstId = reader.GetInt64(i);
							break;
						case "DOCUMENTINFOPLACEID":
							if (!reader.IsDBNull(i)) this.documentInfoPlaceId = reader.GetInt64(i);
							break;
						case "DOCUMENTINFOAPPID":
							if (!reader.IsDBNull(i)) this.documentInfoAppId = reader.GetInt64(i);
							break;
						case "DOCUMENTINFODOCTYPEID":
							if (!reader.IsDBNull(i)) this.documentInfoDocTypeId = reader.GetInt64(i);
							break;
						case "DOCUMENTINFODOCREF":
							if (!reader.IsDBNull(i)) this.documentInfoDocRef = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTINFODOCDATE":
							if (!reader.IsDBNull(i)) this.documentInfoDocDate = reader.GetDateTime(i);
							break;
						case "DOCUMENTINFOPROCSTATE":
							if (!reader.IsDBNull(i)) this.documentInfoProcState = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTINFODOCID":
							if (!reader.IsDBNull(i)) this.documentInfoDocId = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			DocumentInfo documentinfo = obj as DocumentInfo;
			if (documentinfo == null)
				return false;
			return documentinfo.DocumentInfoXmlId == DocumentInfoXmlId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		internal static string BuildKey(string key)
		{
			return "DocumentInfo_" + key;
		}
		
		#endregion
    }
}


