using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.ER2Indexer.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: segunda-feira, 10 de Novembro de 2008
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class FileStreamInfo_GEN : AbstractEntity
    {	
		#region Variables
	
		private string key;
		
		private decimal fileStreamInfoXmlId; ///
		private long fileStreamInfoBinId; ///
		private object fileStreamInfoBinaryData; ///
		private string fileStreamInfoFileId; ///
		private string fileStreamInfoFileName; ///
		private object fileStreamInfoThumbFile; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty FileStreamInfo object.
        /// </summary>
        public FileStreamInfo_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty FileStreamInfo object.
        /// </summary>
        public FileStreamInfo_GEN(decimal fileStreamInfoXmlId, long fileStreamInfoBinId) : base(ObjectState.Added, null) 
        {
			this.fileStreamInfoXmlId = fileStreamInfoXmlId;
			this.fileStreamInfoBinId = fileStreamInfoBinId;
			this.key = BuildKey(fileStreamInfoXmlId.ToString(CultureInfo.CurrentCulture) + "_" +fileStreamInfoBinId.ToString(CultureInfo.CurrentCulture));
        }
		/// <summary>
        /// Initialize an new empty FileStreamInfo object.
        /// </summary>
        public FileStreamInfo_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
			this.key = BuildKey(fileStreamInfoXmlId.ToString(CultureInfo.CurrentCulture) + "_" +fileStreamInfoBinId.ToString(CultureInfo.CurrentCulture));
        }
		
        /// <summary>
        /// Initialize a new  FileStreamInfo object with the given parameters.
        /// </summary>
        public  FileStreamInfo_GEN(long fileStreamInfoBinId, object fileStreamInfoBinaryData, string fileStreamInfoFileId, string fileStreamInfoFileName, object fileStreamInfoThumbFile) : base(ObjectState.Added, null) 
        {	 
			this.fileStreamInfoBinId = fileStreamInfoBinId;
			this.fileStreamInfoBinaryData = fileStreamInfoBinaryData;
			this.fileStreamInfoFileId = fileStreamInfoFileId;
			this.fileStreamInfoFileName = fileStreamInfoFileName;
			this.fileStreamInfoThumbFile = fileStreamInfoThumbFile;
			this.key = BuildKey(fileStreamInfoXmlId.ToString(CultureInfo.CurrentCulture) + "_" +fileStreamInfoBinId.ToString(CultureInfo.CurrentCulture));
        }
		#endregion
		
		#region Properties
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
		public string FileStreamInfoKey
		{
			get { return this.key; }
		}
	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public decimal FileStreamInfoXmlId
        {
            get { return this.fileStreamInfoXmlId; }
            set { 
				if(this.fileStreamInfoXmlId != value) {
					DataStateChanged(ObjectState.Modified, "FileStreamInfoXmlId");
            		this.fileStreamInfoXmlId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long FileStreamInfoBinId
        {
            get { return this.fileStreamInfoBinId; }
            set { 
				if(this.fileStreamInfoBinId != value) {
					DataStateChanged(ObjectState.Modified, "FileStreamInfoBinId");
            		this.fileStreamInfoBinId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public object FileStreamInfoBinaryData
        {
            get { return this.fileStreamInfoBinaryData; }
            set { 
				if(this.fileStreamInfoBinaryData != value) {
					DataStateChanged(ObjectState.Modified, "FileStreamInfoBinaryData");
            		this.fileStreamInfoBinaryData = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FileStreamInfoFileId
        {
            get { return this.fileStreamInfoFileId; }
            set { 
				if(this.fileStreamInfoFileId != value) {
					DataStateChanged(ObjectState.Modified, "FileStreamInfoFileId");
            		this.fileStreamInfoFileId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FileStreamInfoFileName
        {
            get { return this.fileStreamInfoFileName; }
            set { 
				if(this.fileStreamInfoFileName != value) {
					DataStateChanged(ObjectState.Modified, "FileStreamInfoFileName");
            		this.fileStreamInfoFileName = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public object FileStreamInfoThumbFile
        {
            get { return this.fileStreamInfoThumbFile; }
            set { 
				if(this.fileStreamInfoThumbFile != value) {
					DataStateChanged(ObjectState.Modified, "FileStreamInfoThumbFile");
            		this.fileStreamInfoThumbFile = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "FILESTREAMINFOXMLID":
							if (!reader.IsDBNull(i)) this.fileStreamInfoXmlId = reader.GetDecimal(i);
							break;
						case "FILESTREAMINFOBINID":
							if (!reader.IsDBNull(i)) this.fileStreamInfoBinId = reader.GetInt64(i);
							break;
						case "FILESTREAMINFOBINARYDATA":
							if (!reader.IsDBNull(i)) this.fileStreamInfoBinaryData = reader.GetValue(i);
							break;
						case "FILESTREAMINFOFILEID":
							if (!reader.IsDBNull(i)) this.fileStreamInfoFileId = Convert.ToString(reader.GetValue(i));
							break;
						case "FILESTREAMINFOFILENAME":
							if (!reader.IsDBNull(i)) this.fileStreamInfoFileName = Convert.ToString(reader.GetValue(i));
							break;
						case "FILESTREAMINFOTHUMBFILE":
							if (!reader.IsDBNull(i)) this.fileStreamInfoThumbFile = reader.GetValue(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			FileStreamInfo filestreaminfo = obj as FileStreamInfo;
			if (filestreaminfo == null)
				return false;
			return filestreaminfo.FileStreamInfoBinId == FileStreamInfoBinId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		internal static string BuildKey(string key)
		{
			return "FileStreamInfo_" + key;
		}
		
		#endregion
    }
}


