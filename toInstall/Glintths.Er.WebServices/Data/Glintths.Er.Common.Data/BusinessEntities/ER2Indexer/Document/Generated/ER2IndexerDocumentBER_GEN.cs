
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.ER2Indexer.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.ER2Indexer.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: segunda-feira, 10 de Novembro de 2008
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class ER2IndexerDocumentBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		#region Variables
		#endregion
	
		protected ER2IndexerDocumentBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("ER2Indexer");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}

        public virtual string CancelDocument(string companyDb, string instCode, string placeCode, string appCode, string docTypeCode, string docId)
        {
            string operationStatus = "0";
            Database dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDb);
            try
            {
                IDataReader reader = null;
                dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDb);
                string dbMethod = GetDBMethod(dal, "CancelDocument", "PCK_DOCUMENTS_DOCUMENT");
                reader = dal.ExecuteReader(dbMethod, instCode, placeCode, appCode, docTypeCode, docId, DBNull.Value);

                while (reader.Read())
                {
                    for (int i = 0; i < reader.FieldCount; i++)
                    {
                        switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                        {
                            case "OPSTATUS":
                                if (!reader.IsDBNull(i)) operationStatus = reader.GetString(i);
                                break;
                        }
                    }
                }
                reader.Close();

                //coisas
                return operationStatus;
            }
            catch
            {
                return "-1";
            }
        }
	
	
		#region Cache FILESTREAMINFO
		#endregion
	
	
		#region Insert FILESTREAMINFO Operations
		//
		//INSERT OPERATIONS FILESTREAMINFO
		//
		//
		//
		//
		public virtual FileStreamInfo InsertEmptyFileStreamInfo(string companyDB, FileStreamInfo obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					InsertEmptyFileStreamInfoDB(companyDB, null, obj);
				else
					InsertEmptyFileStreamInfoDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string InsertEmptyFileStreamInfoDBMethod(string companyDB)
		{
			string proc = InsertEmptyFileStreamInfoDBMethodName;
            string package = InsertEmptyFileStreamInfoDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if(dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;
			
			return proc;
		}

		protected abstract string InsertEmptyFileStreamInfoDBMethodName
		{
            		get;

        	}

        	protected abstract string InsertEmptyFileStreamInfoDBPackageName
		{
            		get;
        	}

		protected virtual object[] InsertEmptyFileStreamInfoDBParametersExtra(FileStreamInfo obj)
		{
            		return new object[] {};
        	}
		
		protected object[] InsertEmptyFileStreamInfoDBParameters(FileStreamInfo obj)
        	{
            		ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
				
				 obj.FileStreamInfoFileId
				 ,DBNull.Value
            		};

            		finalParameters.AddRange(standardParameters);

            		finalParameters.AddRange(InsertEmptyFileStreamInfoDBParametersExtra(obj));

            		return finalParameters.ToArray();
        	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void InsertEmptyFileStreamInfoDB(string companyDB, DbTransaction transaction, FileStreamInfo obj)
		{
			try
      		{
				string dbMethod = InsertEmptyFileStreamInfoDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					InsertEmptyFileStreamInfoDBParameters(obj)
				);

				InsertEmptyFileStreamInfoDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				InsertEmptyFileStreamInfoDBPosQuery(dbCommand, obj);

                obj.FileStreamInfoXmlId = (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase || dal is EntLibContrib.Data.OdpNet.OracleDatabase) ?
                        Convert.ToInt64(dbCommand.Parameters["p_sequence"].Value, CultureInfo.CurrentCulture) :
                        Convert.ToInt64(dbCommand.Parameters["@p_sequence"].Value, CultureInfo.CurrentCulture);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}

		protected virtual void InsertEmptyFileStreamInfoDBPosQuery(DbCommand dbCommand, FileStreamInfo obj)
		{
			
        	}

        	protected virtual void InsertEmptyFileStreamInfoDBPreQuery(DbCommand dbCommand, FileStreamInfo obj)
        	{        
			
        	}


		
		
		#endregion
		
		#region Update FILESTREAMINFO Operations
		//
		//UPDATE OPERATIONS FILESTREAMINFO
		//
		//
		//
		//
		public virtual FileStreamInfo UpdateFileStreamInfoThumb(string companyDB, FileStreamInfo obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateFileStreamInfoThumbDB(companyDB, null, obj);
				else	
					UpdateFileStreamInfoThumbDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual FileStreamInfo UpdateFileStreamInfo(string companyDB, FileStreamInfo obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateFileStreamInfoDB(companyDB, null, obj);
				else	
					UpdateFileStreamInfoDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string UpdateFileStreamInfoThumbDBMethod(string companyDB)
		{
			string proc = UpdateFileStreamInfoThumbDBMethodName;
            string package = UpdateFileStreamInfoThumbDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if(dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;				
			
			return proc;
		}
		
		protected abstract string UpdateFileStreamInfoThumbDBMethodName
		{
            		get;

        	}

        	protected abstract string UpdateFileStreamInfoThumbDBPackageName
		{
            		get;
        	}
		
		protected virtual object[] UpdateFileStreamInfoThumbDBParametersExtra(FileStreamInfo obj)
		{
            		return new object[] {};
        }
		
		private object[] UpdateFileStreamInfoThumbDBParameters(FileStreamInfo obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.FileStreamInfoThumbFile,obj.FileStreamInfoXmlId,obj.FileStreamInfoBinId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateFileStreamInfoThumbDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateFileStreamInfoThumbDB(string companyDB, DbTransaction transaction, FileStreamInfo obj)
		{
			try
      		{
				string dbMethod = UpdateFileStreamInfoThumbDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateFileStreamInfoThumbDBParameters(obj)
				);
				
				UpdateFileStreamInfoThumbDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateFileStreamInfoThumbDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}

		protected virtual void UpdateFileStreamInfoThumbDBPosQuery(DbCommand dbCommand, FileStreamInfo obj)
		{
			
        	}

        	protected virtual void UpdateFileStreamInfoThumbDBPreQuery(DbCommand dbCommand, FileStreamInfo obj)
        	{        
			
        	}
		
		//
		// DB
		//
		protected virtual string UpdateFileStreamInfoDBMethod(string companyDB)
		{
			string proc = UpdateFileStreamInfoDBMethodName;
            string package = UpdateFileStreamInfoDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if(dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;				
			
			return proc;
		}
		
		protected abstract string UpdateFileStreamInfoDBMethodName
		{
            		get;

        	}

        	protected abstract string UpdateFileStreamInfoDBPackageName
		{
            		get;
        	}
		
		protected virtual object[] UpdateFileStreamInfoDBParametersExtra(FileStreamInfo obj)
		{
            		return new object[] {};
        }
		
		private object[] UpdateFileStreamInfoDBParameters(FileStreamInfo obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.FileStreamInfoBinaryData,obj.FileStreamInfoFileId,obj.FileStreamInfoFileName,obj.FileStreamInfoXmlId,obj.FileStreamInfoBinId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateFileStreamInfoDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateFileStreamInfoDB(string companyDB, DbTransaction transaction, FileStreamInfo obj)
		{
			try
      		{
				string dbMethod = UpdateFileStreamInfoDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateFileStreamInfoDBParameters(obj)
				);
				
				UpdateFileStreamInfoDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateFileStreamInfoDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}

		protected virtual void UpdateFileStreamInfoDBPosQuery(DbCommand dbCommand, FileStreamInfo obj)
		{
			
        	}

        	protected virtual void UpdateFileStreamInfoDBPreQuery(DbCommand dbCommand, FileStreamInfo obj)
        	{        
			
        	}
		
		
		#endregion
		
		#region Cache DOCUMENTINFO
		#endregion
	
	
		#region Insert DOCUMENTINFO Operations
		//
		//INSERT OPERATIONS DOCUMENTINFO
		//
		//
		//
		//
		public virtual DocumentInfo InsertEmptyDocInfo(string companyDB, DocumentInfo obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					InsertEmptyDocInfoDB(companyDB, null, obj);
				else
					InsertEmptyDocInfoDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string InsertEmptyDocInfoDBMethod(string companyDB)
		{
			string proc = InsertEmptyDocInfoDBMethodName;
            string package = InsertEmptyDocInfoDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if(dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;
			
			return proc;
		}

		protected abstract string InsertEmptyDocInfoDBMethodName
		{
            		get;

        	}

        	protected abstract string InsertEmptyDocInfoDBPackageName
		{
            		get;
        	}

		protected virtual object[] InsertEmptyDocInfoDBParametersExtra(DocumentInfo obj)
		{
            		return new object[] {};
        	}
		
		protected object[] InsertEmptyDocInfoDBParameters(DocumentInfo obj)
        	{
            		ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
				
				 obj.DocumentInfoProcState
				 ,CallContext.GetData("UserName")
				 ,DBNull.Value
            		};

            		finalParameters.AddRange(standardParameters);

            		finalParameters.AddRange(InsertEmptyDocInfoDBParametersExtra(obj));

            		return finalParameters.ToArray();
        	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void InsertEmptyDocInfoDB(string companyDB, DbTransaction transaction, DocumentInfo obj)
		{
			try
      		{
				string dbMethod = InsertEmptyDocInfoDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					InsertEmptyDocInfoDBParameters(obj)
				);

				InsertEmptyDocInfoDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				InsertEmptyDocInfoDBPosQuery(dbCommand, obj);

                obj.DocumentInfoXmlId = (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase || dal is EntLibContrib.Data.OdpNet.OracleDatabase) ?
                        Convert.ToInt64(dbCommand.Parameters["p_sequence"].Value, CultureInfo.CurrentCulture) :
                        Convert.ToInt64(dbCommand.Parameters["@p_sequence"].Value, CultureInfo.CurrentCulture);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}

		protected virtual void InsertEmptyDocInfoDBPosQuery(DbCommand dbCommand, DocumentInfo obj)
		{
			
        	}

        	protected virtual void InsertEmptyDocInfoDBPreQuery(DbCommand dbCommand, DocumentInfo obj)
        	{        
			
        	}


		
		
		#endregion
		
		#region Update DOCUMENTINFO Operations
		//
		//UPDATE OPERATIONS DOCUMENTINFO
		//
		//
		//
		//
		public virtual DocumentInfo UpdateDocInfo(string companyDB, DocumentInfo obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateDocInfoDB(companyDB, null, obj);
				else	
					UpdateDocInfoDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual DocumentInfo FinalizeDocInfo(string companyDB, DocumentInfo obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					FinalizeDocInfoDB(companyDB, null, obj);
				else	
					FinalizeDocInfoDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string UpdateDocInfoDBMethod(string companyDB)
		{
			string proc = UpdateDocInfoDBMethodName;
            string package = UpdateDocInfoDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if(dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;					
			
			return proc;
		}
		
		protected abstract string UpdateDocInfoDBMethodName
		{
            		get;

        	}

        	protected abstract string UpdateDocInfoDBPackageName
		{
            		get;
        	}
		
		protected virtual object[] UpdateDocInfoDBParametersExtra(DocumentInfo obj)
		{
            		return new object[] {};
        }
		
		private object[] UpdateDocInfoDBParameters(DocumentInfo obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.DocumentInfoXml,obj.DocumentInfoXmlId
				 ,CallContext.GetData("UserName")
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateDocInfoDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateDocInfoDB(string companyDB, DbTransaction transaction, DocumentInfo obj)
		{
			try
      		{
				string dbMethod = UpdateDocInfoDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateDocInfoDBParameters(obj)
				);
				
				UpdateDocInfoDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateDocInfoDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}

		protected virtual void UpdateDocInfoDBPosQuery(DbCommand dbCommand, DocumentInfo obj)
		{
			
        	}

        	protected virtual void UpdateDocInfoDBPreQuery(DbCommand dbCommand, DocumentInfo obj)
        	{        
			
        	}
		
		//
		// DB
		//
		protected virtual string FinalizeDocInfoDBMethod(string companyDB)
		{
			string proc = FinalizeDocInfoDBMethodName;
            string package = FinalizeDocInfoDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ER2Indexer", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if(dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;	
			
			return proc;
		}
		
		protected abstract string FinalizeDocInfoDBMethodName
		{
            		get;

        	}

        	protected abstract string FinalizeDocInfoDBPackageName
		{
            		get;
        	}
		
		protected virtual object[] FinalizeDocInfoDBParametersExtra(DocumentInfo obj)
		{
            		return new object[] {};
        }
		
		private object[] FinalizeDocInfoDBParameters(DocumentInfo obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.DocumentInfoXmlId
				 ,CallContext.GetData("UserName")
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(FinalizeDocInfoDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void FinalizeDocInfoDB(string companyDB, DbTransaction transaction, DocumentInfo obj)
		{
			try
      		{
				string dbMethod = FinalizeDocInfoDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				FinalizeDocInfoDBParameters(obj)
				);
				
				FinalizeDocInfoDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				FinalizeDocInfoDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}

		protected virtual void FinalizeDocInfoDBPosQuery(DbCommand dbCommand, DocumentInfo obj)
		{
			
        	}

        	protected virtual void FinalizeDocInfoDBPreQuery(DbCommand dbCommand, DocumentInfo obj)
        	{        
			
        	}
		
		
		#endregion
		
    }
}


