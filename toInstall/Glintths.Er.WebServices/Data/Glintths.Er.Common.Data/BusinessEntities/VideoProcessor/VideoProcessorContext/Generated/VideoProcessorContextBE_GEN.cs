using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 27 de Outubro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class VideoProcessorContext_GEN : AbstractEntity
    {	
		#region Variables
		
		private long contextId = 0; ///
		private string contextName = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty VideoProcessorContext object.
        /// </summary>
        public VideoProcessorContext_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty VideoProcessorContext object.
        /// </summary>
        public VideoProcessorContext_GEN(long contextId) 
			: base(ObjectState.Added , null) 
        {
			this.contextId = contextId;
        }
		/// <summary>
        /// Initialize an new empty VideoProcessorContext object.
        /// </summary>
        public VideoProcessorContext_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  VideoProcessorContext object with the given parameters.
        /// </summary>
        public  VideoProcessorContext_GEN(string contextName) 
			: base(ObjectState.Added, null) 
        {	 
			this.contextName = contextName;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ContextId
        {
            get { return this.contextId; }
            set { 
				if(this.contextId != value) {
					this.contextId = value;
					DataStateChanged(ObjectState.Modified, "ContextId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ContextName
        {
            get { return this.contextName; }
            set { 
				if(this.contextName != value) {
					this.contextName = value;
					DataStateChanged(ObjectState.Modified, "ContextName");
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
		
		protected void LoadVideoProcessorContext_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "CONTEXTID":
							if (!reader.IsDBNull(i)) this.contextId = reader.GetInt64(i);
							break;
						case "CONTEXTNAME":
							if (!reader.IsDBNull(i)) this.contextName = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			VideoProcessorContext videoprocessorcontext = obj as VideoProcessorContext;
			if (videoprocessorcontext == null)
				return false;
			return videoprocessorcontext.ContextId == ContextId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


