using System;
using System.Data;
using System.Collections;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using System.Data.Common;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: sexta-feira, 17 de Setembro de 2010
    /// Created By: Generated by CodeSmith
    /// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public sealed class VideoProcessorBER : VideoProcessorBER_GEN
    {
        #region Singleton
        private static VideoProcessorBER instance = new VideoProcessorBER();

        public static VideoProcessorBER Instance
        {
            get { return instance; }
        }
        #endregion
        private VideoProcessorBER()
        {

        }

        protected override string JobRegisterDBPackageName
        {
            get
            {
                return "PCK_VIDEOPROCESSOR_JOB";
            }
        }

        protected override string GetWaitingJobsDBPackageName
        {
            get
            {
                return "PCK_VIDEOPROCESSOR_JOB";
            }
        }

        protected override string UpdateJobStatusDBPackageName
        {
            get
            {
                return "PCK_VIDEOPROCESSOR_JOB";
            }
        }

        protected override string GetJobsInfoDBPackageName
        {
            get
            {
                return "PCK_VIDEOPROCESSOR_JOB";
            }
        }

        protected IDataReader GetJobsInfoDB(string companyDB, string jobClient, long jobStatus, DateTime? jobRegisterTimestamp, DateTime? jobCompletedTimestamp, long jobContext, string jobClientFileDeleted)
        {
            object jobClientFinal = null, jobStatusFinal = null, jobRegisterTimestampFinal = null, jobCompletedTimestampFinal = null, jobContextFinal = null, jobClientFileDeletedFinal = null;

            IDataReader ret = null;
            try
            {
                string dbMethod = GetJobsInfoDBMethod(companyDB);
                DbCommand dbCommand;

                if (jobClient != string.Empty)
                    jobClientFinal = jobClient;

                if (jobContext != 0)
                    jobContextFinal = jobContext;

                if (jobStatus != 0)
                    jobStatusFinal = jobStatus;

                if (jobClientFileDeleted != "")
                    jobClientFileDeletedFinal = jobClientFileDeleted;

                if (jobRegisterTimestamp != Convert.ToDateTime("01-01-0001 00:00:00"))
                    jobRegisterTimestampFinal = jobRegisterTimestamp;

                if (jobCompletedTimestamp != Convert.ToDateTime("01-01-0001 00:00:00"))
                    jobCompletedTimestampFinal = jobCompletedTimestamp;

                dbCommand = GetStoredProcCommand(dal, dbMethod, jobClientFinal, jobStatusFinal, jobRegisterTimestampFinal, jobCompletedTimestampFinal, jobContextFinal, jobClientFileDeletedFinal, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        public List<VideoProcessorJobInfo> GetJobsInfoUpdated(string companyDB, string jobClient, long jobStatus, DateTime? jobRegisterTimestamp, DateTime? jobCompletedTimestamp, long jobContext, string jobClientFileDeleted)
        {
            IDataReader reader = VideoProcessorBER.Instance.GetJobsInfoDB(companyDB, jobClient, jobStatus, jobRegisterTimestamp, jobCompletedTimestamp, jobContext, jobClientFileDeleted);
            List<VideoProcessorJobInfo> list = new List<VideoProcessorJobInfo>();
            while (reader.Read())
            {
                try
                {
                    list.Add(new VideoProcessorJobInfo(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }
    }

    public class VideoProcessorJobInfo
    {
        #region Variables
        private long jobId = 0; ///
        private long jobClient = 0; ///
        private string computerName = string.Empty; ///
        private long jobStatus = 0; ///
        private DateTime? jobRegisterTimestamp = null; ///
        private DateTime? jobCompletedTimestamp = null; ///
        private long jobCompletedPercentage = 0; ///
        private long jobContext = 0; ///
        private string contextName = string.Empty; ///
        private string jobClientFileDeleted = string.Empty; ///
        private string jobURL = string.Empty; ///
        private string jobData = string.Empty;
        #endregion

        #region Properties

        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long JobId
        {
            get { return this.jobId; }
            set
            {
                if (this.jobId != value)
                {
                    this.jobId = value;
                }
            }
        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long JobClient
        {
            get { return this.jobClient; }
            set
            {
                if (this.jobClient != value)
                {
                    this.jobClient = value;
                }
            }
        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long JobStatus
        {
            get { return this.jobStatus; }
            set
            {
                if (this.jobStatus != value)
                {
                    this.jobStatus = value;
                }
            }
        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? JobRegisterTimestamp
        {
            get { return this.jobRegisterTimestamp; }
            set
            {
                if (!this.jobRegisterTimestamp.Equals(value))
                {
                    this.jobRegisterTimestamp = value;
                }
            }

        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? JobCompletedTimestamp
        {
            get { return this.jobCompletedTimestamp; }
            set
            {
                if (!this.jobCompletedTimestamp.Equals(value))
                {
                    this.jobCompletedTimestamp = value;
                }
            }

        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long JobCompletedPercentage
        {
            get { return this.jobCompletedPercentage; }
            set
            {
                if (this.jobCompletedPercentage != value)
                {
                    this.jobCompletedPercentage = value;
                }
            }
        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long JobContext
        {
            get { return this.jobContext; }
            set
            {
                if (this.jobContext != value)
                {
                    this.jobContext = value;
                }
            }
        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string JobClientFileDeleted
        {
            get { return this.jobClientFileDeleted; }
            set
            {
                if (this.jobClientFileDeleted != value)
                {
                    this.jobClientFileDeleted = value;
                }
            }
        }


        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string JobURL
        {
            get { return this.jobURL; }
            set
            {
                if (this.jobURL != value)
                {
                    this.jobURL = value;
                }
            }
        }

        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string JobData
        {
            get { return this.jobData; }
            set
            {
                if (this.jobData != value)
                {
                    this.jobData = value;
                }
            }
        }

        //[DataMember]
        //[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        //public object JobXMLData
        //{
        //    get { return this.jobXMLData; }
        //    set
        //    {
        //        if (this.jobXMLData != value)
        //        {
        //            this.jobXMLData = value;
        //        }
        //    }
        //}

        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ComputerName
        {
            get { return this.computerName; }
            set
            {
                if (this.computerName != value)
                {
                    this.computerName = value;
                }
            }
        }

        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ContextName
        {
            get { return this.contextName; }
            set
            {
                if (this.contextName != value)
                {
                    this.contextName = value;
                }
            }
        }

        #endregion

        public VideoProcessorJobInfo() { }

        public VideoProcessorJobInfo(IDataReader reader, string companyDB)
        {
            LoadFromReader(reader);
        }

        private void LoadFromReader(IDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                    {
                        case "JOBID":
                            if (!reader.IsDBNull(i)) this.jobId = reader.GetInt64(i);
                            break;
                        case "JOBCLIENT":
                            if (!reader.IsDBNull(i)) this.jobClient = reader.GetInt64(i);
                            break;
                        case "JOBSTATUS":
                            if (!reader.IsDBNull(i)) this.jobStatus = reader.GetInt64(i);
                            break;
                        case "COMPUTERNAME":
                            if (!reader.IsDBNull(i)) this.computerName = Convert.ToString(reader.GetValue(i));
                            break;
                        case "CONTEXTNAME":
                            if (!reader.IsDBNull(i)) this.contextName = Convert.ToString(reader.GetValue(i));
                            break;
                        case "JOBREGISTERTIMESTAMP":
                            if (!reader.IsDBNull(i)) this.jobRegisterTimestamp = reader.GetDateTime(i);
                            break;
                        case "JOBCOMPLETEDTIMESTAMP":
                            if (!reader.IsDBNull(i)) this.jobCompletedTimestamp = reader.GetDateTime(i);
                            break;
                        case "JOBCOMPLETEDPERCENTAGE":
                            if (!reader.IsDBNull(i)) this.jobCompletedPercentage = reader.GetInt64(i);
                            break;
                        case "JOBCONTEXT":
                            if (!reader.IsDBNull(i)) this.jobContext = reader.GetInt64(i);
                            break;
                        case "JOBCLIENTFILEDELETED":
                            if (!reader.IsDBNull(i)) this.jobClientFileDeleted = Convert.ToString(reader.GetValue(i));
                            break;
                        case "JOBURL":
                            if (!reader.IsDBNull(i)) this.jobURL = Convert.ToString(reader.GetValue(i));
                            break;
                        case "JOBDATA":
                            if (!reader.IsDBNull(i)) this.jobData = Convert.ToString(reader.GetValue(i));
                            break;
                        //case "JOBXMLDATA":
                        //    if (!reader.IsDBNull(i)) this.jobXMLData = reader.GetValue(i);
                        //    break;
                    }
                }
            }
        }
    }
}