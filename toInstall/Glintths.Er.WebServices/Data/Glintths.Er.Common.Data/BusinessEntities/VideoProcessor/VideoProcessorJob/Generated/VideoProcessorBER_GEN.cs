
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 27 de Outubro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class VideoProcessorBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		
		#region Variables
		#endregion
	
		protected VideoProcessorBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("VideoProcessorWCF");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}
	
    #region TABLES OPERATIONS
	
		#region Cache VIDEOPROCESSORJOBSTATE
		#endregion
	
	
		#region Select VIDEOPROCESSORJOBSTATE Operations
		//
		//SELECT OPERATIONS VIDEOPROCESSORJOBSTATE
		//
		//
		//
		//
		public virtual VideoProcessorJobStateList GetWaitingJobs(string companyDB, long jobStatus)
		{
			IDataReader reader = GetWaitingJobsDB(companyDB, jobStatus);
			VideoProcessorJobStateList list = new VideoProcessorJobStateList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new VideoProcessorJobState(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual VideoProcessorJobStateList GetJobsInfo(string companyDB, long jobClient, long jobStatus, Nullable<DateTime> jobRegisterTimestamp, Nullable<DateTime> jobCompletedTimestamp, long jobContext, string jobClientFileDeleted)
		{
			IDataReader reader = GetJobsInfoDB(companyDB, jobClient, jobStatus, jobRegisterTimestamp, jobCompletedTimestamp, jobContext, jobClientFileDeleted);
			VideoProcessorJobStateList list = new VideoProcessorJobStateList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new VideoProcessorJobState(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual object GetJobClob(string companyDB, long jobId)
		{
			IDataReader reader = GetJobClobDB(companyDB, jobId);
			object list = new object();
			while(reader.Read())
			{
				try
    			{
					list = (object)reader["jobXMLData"];
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetWaitingJobsDBMethod(string companyDB)
		{
			string proc = GetWaitingJobsDBMethodName;
            string package = GetWaitingJobsDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetWaitingJobsDBMethodName
		{
            get { return "GetWaitingJobs"; }
        }
		
        protected virtual string GetWaitingJobsDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetWaitingJobsDB(string companyDB, long jobStatus)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetWaitingJobsDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, jobStatus, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetJobsInfoDBMethod(string companyDB)
		{
			string proc = GetJobsInfoDBMethodName;
            string package = GetJobsInfoDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetJobsInfoDBMethodName
		{
            get { return "GetJobsInfo"; }
        }
		
        protected virtual string GetJobsInfoDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetJobsInfoDB(string companyDB, long jobClient, long jobStatus, Nullable<DateTime> jobRegisterTimestamp, Nullable<DateTime> jobCompletedTimestamp, long jobContext, string jobClientFileDeleted)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetJobsInfoDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, jobClient, jobStatus, jobRegisterTimestamp, jobCompletedTimestamp, jobContext, jobClientFileDeleted, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetJobClobDBMethod(string companyDB)
		{
			string proc = GetJobClobDBMethodName;
            string package = GetJobClobDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetJobClobDBMethodName
		{
            get { return "GetJobClob"; }
        }
		
        protected virtual string GetJobClobDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetJobClobDB(string companyDB, long jobId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetJobClobDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, jobId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Insert VIDEOPROCESSORJOBSTATE Operations
		//
		//INSERT OPERATIONS VIDEOPROCESSORJOBSTATE
		//
		//
		//
		//
		public virtual VideoProcessorJobState JobRegister(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					JobRegisterDB(companyDB, null, obj);
				else
					JobRegisterDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string JobRegisterDBMethod(string companyDB)
		{
			string proc = JobRegisterDBMethodName;
            string package = JobRegisterDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}

		protected virtual string JobRegisterDBMethodName
		{
           get { return "JobRegister"; }
        }
        
        protected virtual string JobRegisterDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		protected virtual object[] JobRegisterDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		protected object[] JobRegisterDBParameters(VideoProcessorJobState obj)
    	{
        	ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
					obj.JobClient
                  ,	obj.JobStatus
                  ,	obj.JobRegisterTimestamp
                  ,	obj.JobCompletedTimestamp
                  ,	obj.JobCompletedPercentage
                  ,	obj.JobContext
                  ,	obj.JobClientFileDeleted
                  ,	obj.JobURL
                  ,	obj.JobXMLData
                  ,	obj.JobData
				  , DBNull.Value 
					};

        	finalParameters.AddRange(standardParameters);
        	finalParameters.AddRange(JobRegisterDBParametersExtra(obj));

        	return finalParameters.ToArray();
    	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void JobRegisterDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = JobRegisterDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					JobRegisterDBParameters(obj)
				);

				JobRegisterDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				JobRegisterDBPosQuery(dbCommand, obj);

				obj.JobId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);
				
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void JobRegisterDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void JobRegisterDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}

		
		#endregion
		
		#region Update VIDEOPROCESSORJOBSTATE Operations
		//
		//UPDATE OPERATIONS VIDEOPROCESSORJOBSTATE
		//
		//
		//
		//
		public virtual VideoProcessorJobState UpdateJobStatus(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateJobStatusDB(companyDB, null, obj);
				else	
					UpdateJobStatusDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorJobState UpdateJobPercentage(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateJobPercentageDB(companyDB, null, obj);
				else	
					UpdateJobPercentageDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorJobState UpdateJob(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateJobDB(companyDB, null, obj);
				else	
					UpdateJobDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorJobState UpdateJobClob(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateJobClobDB(companyDB, null, obj);
				else	
					UpdateJobClobDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorJobState UpdateJobClientFile(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateJobClientFileDB(companyDB, null, obj);
				else	
					UpdateJobClientFileDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorJobState UpdateErrorLog(string companyDB, VideoProcessorJobState obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateErrorLogDB(companyDB, null, obj);
				else	
					UpdateErrorLogDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string UpdateJobStatusDBMethod(string companyDB)
		{
			string proc = UpdateJobStatusDBMethodName;
            string package = UpdateJobStatusDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateJobStatusDBMethodName
		{
            get { return "UpdateJobStatus"; }
        }
        
        protected virtual string UpdateJobStatusDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }
		
		protected virtual object[] UpdateJobStatusDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		private object[] UpdateJobStatusDBParameters(VideoProcessorJobState obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.JobStatus,obj.JobCompletedTimestamp,obj.JobId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateJobStatusDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateJobStatusDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = UpdateJobStatusDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateJobStatusDBParameters(obj)
				);
				
				UpdateJobStatusDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateJobStatusDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateJobStatusDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void UpdateJobStatusDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateJobPercentageDBMethod(string companyDB)
		{
			string proc = UpdateJobPercentageDBMethodName;
            string package = UpdateJobPercentageDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateJobPercentageDBMethodName
		{
            get { return "UpdateJobPercentage"; }
        }
        
        protected virtual string UpdateJobPercentageDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }
		
		protected virtual object[] UpdateJobPercentageDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		private object[] UpdateJobPercentageDBParameters(VideoProcessorJobState obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.JobCompletedPercentage,obj.JobId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateJobPercentageDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateJobPercentageDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = UpdateJobPercentageDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateJobPercentageDBParameters(obj)
				);
				
				UpdateJobPercentageDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateJobPercentageDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateJobPercentageDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void UpdateJobPercentageDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateJobDBMethod(string companyDB)
		{
			string proc = UpdateJobDBMethodName;
            string package = UpdateJobDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateJobDBMethodName
		{
            get { return "UpdateJob"; }
        }
        
        protected virtual string UpdateJobDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }
		
		protected virtual object[] UpdateJobDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		private object[] UpdateJobDBParameters(VideoProcessorJobState obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.JobClient,obj.JobStatus,obj.JobRegisterTimestamp,obj.JobCompletedTimestamp,obj.JobCompletedPercentage,obj.JobContext,obj.JobClientFileDeleted,obj.JobURL,obj.JobXMLData,obj.JobId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateJobDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateJobDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = UpdateJobDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateJobDBParameters(obj)
				);
				
				UpdateJobDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateJobDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateJobDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void UpdateJobDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateJobClobDBMethod(string companyDB)
		{
			string proc = UpdateJobClobDBMethodName;
            string package = UpdateJobClobDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateJobClobDBMethodName
		{
            get { return "UpdateJobClob"; }
        }
        
        protected virtual string UpdateJobClobDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }
		
		protected virtual object[] UpdateJobClobDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		private object[] UpdateJobClobDBParameters(VideoProcessorJobState obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.JobXMLData,obj.JobId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateJobClobDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateJobClobDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = UpdateJobClobDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateJobClobDBParameters(obj)
				);
				
				UpdateJobClobDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateJobClobDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateJobClobDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void UpdateJobClobDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateJobClientFileDBMethod(string companyDB)
		{
			string proc = UpdateJobClientFileDBMethodName;
            string package = UpdateJobClientFileDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateJobClientFileDBMethodName
		{
            get { return "UpdateJobClientFile"; }
        }
        
        protected virtual string UpdateJobClientFileDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }
		
		protected virtual object[] UpdateJobClientFileDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		private object[] UpdateJobClientFileDBParameters(VideoProcessorJobState obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.JobClientFileDeleted,obj.JobId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateJobClientFileDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateJobClientFileDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = UpdateJobClientFileDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateJobClientFileDBParameters(obj)
				);
				
				UpdateJobClientFileDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateJobClientFileDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateJobClientFileDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void UpdateJobClientFileDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateErrorLogDBMethod(string companyDB)
		{
			string proc = UpdateErrorLogDBMethodName;
            string package = UpdateErrorLogDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateErrorLogDBMethodName
		{
            get { return "UpdateErrorLog"; }
        }
        
        protected virtual string UpdateErrorLogDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }
		
		protected virtual object[] UpdateErrorLogDBParametersExtra(VideoProcessorJobState obj)
		{
            return new object[] {};
        }
		private object[] UpdateErrorLogDBParameters(VideoProcessorJobState obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.JobErrorLog,obj.JobId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateErrorLogDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateErrorLogDB(string companyDB, DbTransaction transaction, VideoProcessorJobState obj)
		{
			try
      		{
				string dbMethod = UpdateErrorLogDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateErrorLogDBParameters(obj)
				);
				
				UpdateErrorLogDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateErrorLogDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateErrorLogDBPosQuery(DbCommand dbCommand, VideoProcessorJobState obj)
		{
			
        }
    	protected virtual void UpdateErrorLogDBPreQuery(DbCommand dbCommand, VideoProcessorJobState obj)
    	{        
		
    	}
		
		
		#endregion
		
		#region Cache VIDEOPROCESSORCLIENT
		#endregion
	
	
		#region Select VIDEOPROCESSORCLIENT Operations
		//
		//SELECT OPERATIONS VIDEOPROCESSORCLIENT
		//
		//
		//
		//
		public virtual VideoProcessorClientList GetAllNames(string companyDB)
		{
			IDataReader reader = GetAllNamesDB(companyDB);
			VideoProcessorClientList list = new VideoProcessorClientList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new VideoProcessorClient(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual VideoProcessorClient GetNameByPrimaryKey(string companyDB, long computerId)
		{
			IDataReader reader = GetNameByPrimaryKeyDB(companyDB, computerId);
			VideoProcessorClient obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new VideoProcessorClient(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorClient GetIdByName(string companyDB, string computerName)
		{
			IDataReader reader = GetIdByNameDB(companyDB, computerName);
			VideoProcessorClient obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new VideoProcessorClient(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAllNamesDBMethod(string companyDB)
		{
			string proc = GetAllNamesDBMethodName;
            string package = GetAllNamesDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAllNamesDBMethodName
		{
            get { return "GetAllNames"; }
        }
		
        protected virtual string GetAllNamesDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetAllNamesDB(string companyDB)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAllNamesDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetNameByPrimaryKeyDBMethod(string companyDB)
		{
			string proc = GetNameByPrimaryKeyDBMethodName;
            string package = GetNameByPrimaryKeyDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetNameByPrimaryKeyDBMethodName
		{
            get { return "GetNameByPrimaryKey"; }
        }
		
        protected virtual string GetNameByPrimaryKeyDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetNameByPrimaryKeyDB(string companyDB, long computerId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetNameByPrimaryKeyDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, computerId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetIdByNameDBMethod(string companyDB)
		{
			string proc = GetIdByNameDBMethodName;
            string package = GetIdByNameDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetIdByNameDBMethodName
		{
            get { return "GetIdByName"; }
        }
		
        protected virtual string GetIdByNameDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetIdByNameDB(string companyDB, string computerName)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetIdByNameDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, computerName, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Insert VIDEOPROCESSORCLIENT Operations
		//
		//INSERT OPERATIONS VIDEOPROCESSORCLIENT
		//
		//
		//
		//
		public virtual VideoProcessorClient RegistarMaquina(string companyDB, VideoProcessorClient obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					RegistarMaquinaDB(companyDB, null, obj);
				else
					RegistarMaquinaDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string RegistarMaquinaDBMethod(string companyDB)
		{
			string proc = RegistarMaquinaDBMethodName;
            string package = RegistarMaquinaDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}

		protected virtual string RegistarMaquinaDBMethodName
		{
           get { return "RegistarMaquina"; }
        }
        
        protected virtual string RegistarMaquinaDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		protected virtual object[] RegistarMaquinaDBParametersExtra(VideoProcessorClient obj)
		{
            return new object[] {};
        }
		protected object[] RegistarMaquinaDBParameters(VideoProcessorClient obj)
    	{
        	ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
					obj.ComputerName
				  , DBNull.Value 
					};

        	finalParameters.AddRange(standardParameters);
        	finalParameters.AddRange(RegistarMaquinaDBParametersExtra(obj));

        	return finalParameters.ToArray();
    	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void RegistarMaquinaDB(string companyDB, DbTransaction transaction, VideoProcessorClient obj)
		{
			try
      		{
				string dbMethod = RegistarMaquinaDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					RegistarMaquinaDBParameters(obj)
				);

				RegistarMaquinaDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				RegistarMaquinaDBPosQuery(dbCommand, obj);

				obj.ComputerId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);
				
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void RegistarMaquinaDBPosQuery(DbCommand dbCommand, VideoProcessorClient obj)
		{
			
        }
    	protected virtual void RegistarMaquinaDBPreQuery(DbCommand dbCommand, VideoProcessorClient obj)
    	{        
		
    	}

		
		#endregion
		
		#region Cache VIDEOPROCESSORCONTEXT
		#endregion
	
	
		#region Select VIDEOPROCESSORCONTEXT Operations
		//
		//SELECT OPERATIONS VIDEOPROCESSORCONTEXT
		//
		//
		//
		//
		public virtual VideoProcessorContextList GetAllContext(string companyDB)
		{
			IDataReader reader = GetAllContextDB(companyDB);
			VideoProcessorContextList list = new VideoProcessorContextList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new VideoProcessorContext(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual VideoProcessorContext GetContextNameById(string companyDB, long contextId)
		{
			IDataReader reader = GetContextNameByIdDB(companyDB, contextId);
			VideoProcessorContext obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new VideoProcessorContext(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		//
		//
		//
		public virtual VideoProcessorContext GetContextIdByName(string companyDB, string contextName)
		{
			IDataReader reader = GetContextIdByNameDB(companyDB, contextName);
			VideoProcessorContext obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new VideoProcessorContext(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAllContextDBMethod(string companyDB)
		{
			string proc = GetAllContextDBMethodName;
            string package = GetAllContextDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAllContextDBMethodName
		{
            get { return "GetAllContext"; }
        }
		
        protected virtual string GetAllContextDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetAllContextDB(string companyDB)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAllContextDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetContextNameByIdDBMethod(string companyDB)
		{
			string proc = GetContextNameByIdDBMethodName;
            string package = GetContextNameByIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetContextNameByIdDBMethodName
		{
            get { return "GetContextNameById"; }
        }
		
        protected virtual string GetContextNameByIdDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetContextNameByIdDB(string companyDB, long contextId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetContextNameByIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, contextId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetContextIdByNameDBMethod(string companyDB)
		{
			string proc = GetContextIdByNameDBMethodName;
            string package = GetContextIdByNameDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetContextIdByNameDBMethodName
		{
            get { return "GetContextIdByName"; }
        }
		
        protected virtual string GetContextIdByNameDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetContextIdByNameDB(string companyDB, string contextName)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetContextIdByNameDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, contextName, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Insert VIDEOPROCESSORCONTEXT Operations
		//
		//INSERT OPERATIONS VIDEOPROCESSORCONTEXT
		//
		//
		//
		//
		public virtual VideoProcessorContext AdicionarContexto(string companyDB, VideoProcessorContext obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					AdicionarContextoDB(companyDB, null, obj);
				else
					AdicionarContextoDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string AdicionarContextoDBMethod(string companyDB)
		{
			string proc = AdicionarContextoDBMethodName;
            string package = AdicionarContextoDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
			
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}

		protected virtual string AdicionarContextoDBMethodName
		{
           get { return "AdicionarContexto"; }
        }
        
        protected virtual string AdicionarContextoDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		protected virtual object[] AdicionarContextoDBParametersExtra(VideoProcessorContext obj)
		{
            return new object[] {};
        }
		protected object[] AdicionarContextoDBParameters(VideoProcessorContext obj)
    	{
        	ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
					obj.ContextName
				  , DBNull.Value 
					};

        	finalParameters.AddRange(standardParameters);
        	finalParameters.AddRange(AdicionarContextoDBParametersExtra(obj));

        	return finalParameters.ToArray();
    	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void AdicionarContextoDB(string companyDB, DbTransaction transaction, VideoProcessorContext obj)
		{
			try
      		{
				string dbMethod = AdicionarContextoDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					AdicionarContextoDBParameters(obj)
				);

				AdicionarContextoDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				AdicionarContextoDBPosQuery(dbCommand, obj);

				obj.ContextId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);
				
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void AdicionarContextoDBPosQuery(DbCommand dbCommand, VideoProcessorContext obj)
		{
			
        }
    	protected virtual void AdicionarContextoDBPreQuery(DbCommand dbCommand, VideoProcessorContext obj)
    	{        
		
    	}

		
		#endregion
		
		#region Cache VIDEOPROCESSORSTATUS
		#endregion
	
	
		#region Select VIDEOPROCESSORSTATUS Operations
		//
		//SELECT OPERATIONS VIDEOPROCESSORSTATUS
		//
		//
		//
		//
		public virtual VideoProcessorStatusList GetAllStatus(string companyDB)
		{
			IDataReader reader = GetAllStatusDB(companyDB);
			VideoProcessorStatusList list = new VideoProcessorStatusList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new VideoProcessorStatus(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAllStatusDBMethod(string companyDB)
		{
			string proc = GetAllStatusDBMethodName;
            string package = GetAllStatusDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("VideoProcessorWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAllStatusDBMethodName
		{
            get { return "GetAllStatus"; }
        }
		
        protected virtual string GetAllStatusDBPackageName
		{
            get { return "PCK_VIDEOPROCESSOR_JOB_GEN"; }
        }

		
		protected virtual IDataReader GetAllStatusDB(string companyDB)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAllStatusDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
    
    #endregion
    
    #region OBJECTS OPERATIONS
    
    #endregion
	
    }
}


