using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 27 de Outubro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class VideoProcessorClient_GEN : AbstractEntity
    {	
		#region Variables
		
		private long computerId = 0; ///
		private string computerName = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty VideoProcessorClient object.
        /// </summary>
        public VideoProcessorClient_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty VideoProcessorClient object.
        /// </summary>
        public VideoProcessorClient_GEN(long computerId) 
			: base(ObjectState.Added , null) 
        {
			this.computerId = computerId;
        }
		/// <summary>
        /// Initialize an new empty VideoProcessorClient object.
        /// </summary>
        public VideoProcessorClient_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  VideoProcessorClient object with the given parameters.
        /// </summary>
        public  VideoProcessorClient_GEN(string computerName) 
			: base(ObjectState.Added, null) 
        {	 
			this.computerName = computerName;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ComputerId
        {
            get { return this.computerId; }
            set { 
				if(this.computerId != value) {
					this.computerId = value;
					DataStateChanged(ObjectState.Modified, "ComputerId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ComputerName
        {
            get { return this.computerName; }
            set { 
				if(this.computerName != value) {
					this.computerName = value;
					DataStateChanged(ObjectState.Modified, "ComputerName");
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
		
		protected void LoadVideoProcessorClient_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "COMPUTERID":
							if (!reader.IsDBNull(i)) this.computerId = reader.GetInt64(i);
							break;
						case "COMPUTERNAME":
							if (!reader.IsDBNull(i)) this.computerName = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			VideoProcessorClient videoprocessorclient = obj as VideoProcessorClient;
			if (videoprocessorclient == null)
				return false;
			return videoprocessorclient.ComputerId == ComputerId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


