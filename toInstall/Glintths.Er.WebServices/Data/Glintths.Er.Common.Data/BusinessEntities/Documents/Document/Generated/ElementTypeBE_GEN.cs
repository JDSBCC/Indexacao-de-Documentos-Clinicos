using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 18 de Maio de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class ElementType_GEN : AbstractEntity
    {	
		#region Variables
		
		private long elemTypeId = 0; ///
		private string elemTypeCode = string.Empty; ///
		private string elemTypeAcronym = string.Empty; ///
		private string elemTypeDescription = string.Empty; ///
		private long elemTypePresOrder = 0; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty ElementType object.
        /// </summary>
        public ElementType_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty ElementType object.
        /// </summary>
        public ElementType_GEN(long elemTypeId) 
			: base(ObjectState.Added , null) 
        {
			this.elemTypeId = elemTypeId;
        }
		/// <summary>
        /// Initialize an new empty ElementType object.
        /// </summary>
        public ElementType_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  ElementType object with the given parameters.
        /// </summary>
        public  ElementType_GEN(long elemTypeId, string elemTypeCode, string elemTypeAcronym, string elemTypeDescription, long elemTypePresOrder) 
			: base(ObjectState.Added, null) 
        {	 
			this.elemTypeId = elemTypeId;
			this.elemTypeCode = elemTypeCode;
			this.elemTypeAcronym = elemTypeAcronym;
			this.elemTypeDescription = elemTypeDescription;
			this.elemTypePresOrder = elemTypePresOrder;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ElemTypeId
        {
            get { return this.elemTypeId; }
            set { 
				if(this.elemTypeId != value) {
					DataStateChanged(ObjectState.Modified, "ElemTypeId");
            		this.elemTypeId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ElemTypeCode
        {
            get { return this.elemTypeCode; }
            set { 
				if(this.elemTypeCode != value) {
					DataStateChanged(ObjectState.Modified, "ElemTypeCode");
            		this.elemTypeCode = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ElemTypeAcronym
        {
            get { return this.elemTypeAcronym; }
            set { 
				if(this.elemTypeAcronym != value) {
					DataStateChanged(ObjectState.Modified, "ElemTypeAcronym");
            		this.elemTypeAcronym = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string ElemTypeDescription
        {
            get { return this.elemTypeDescription; }
            set { 
				if(this.elemTypeDescription != value) {
					DataStateChanged(ObjectState.Modified, "ElemTypeDescription");
            		this.elemTypeDescription = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long ElemTypePresOrder
        {
            get { return this.elemTypePresOrder; }
            set { 
				if(this.elemTypePresOrder != value) {
					DataStateChanged(ObjectState.Modified, "ElemTypePresOrder");
            		this.elemTypePresOrder = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "ELEMTYPEID":
							if (!reader.IsDBNull(i)) this.elemTypeId = reader.GetInt64(i);
							break;
						case "ELEMTYPECODE":
							if (!reader.IsDBNull(i)) this.elemTypeCode = Convert.ToString(reader.GetValue(i));
							break;
						case "ELEMTYPEACRONYM":
							if (!reader.IsDBNull(i)) this.elemTypeAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "ELEMTYPEDESCRIPTION":
							if (!reader.IsDBNull(i)) this.elemTypeDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "ELEMTYPEPRESORDER":
							if (!reader.IsDBNull(i)) this.elemTypePresOrder = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			ElementType elementtype = obj as ElementType;
			if (elementtype == null)
				return false;
			return elementtype.ElemTypeId == ElemTypeId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


