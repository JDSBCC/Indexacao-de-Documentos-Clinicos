using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: sexta-feira, 15 de Abril de 2011
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "Document_GEN", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Document_GEN : AbstractEntity
    {	
		#region Variables
		
		private long documentId = 0; ///
		private long documentParentId = 0; ///
		private string documentRef = string.Empty; ///
		private long documentInst = 0; ///
		private long documentLocal = 0; ///
		private long documentApp = 0; ///
		private long documentType = 0; ///
		private string documentTitle = string.Empty; ///
		private string documentDescription = string.Empty; ///
		private string documentExternalScope = string.Empty; ///
		private string documentExternalId = string.Empty; ///
		private DateTime? documentDate = null; ///
		private string documentPublic = string.Empty; ///
		private string documentStatus = string.Empty; ///
		private DateTime? documentMinValDate = null; ///
		private DateTime? documentMaxValDate = null; ///
		private long documentTipoElem = 0; ///
		private long documentStatusId = 0; ///
		private DateTime? documentExecutionDate = null; ///
		private DateTime? documentValidationDate = null; ///
		private DateTime? documentEmissionDate = null; ///
		
		private DocumentList documentChilds = new DocumentList();
        //private RequisitionDetails requisicaoDet = new RequisitionDetails();
        //private RequestDetails pedidoDet = new RequestDetails();
		private ElementList documentElements = new ElementList();
		private string institutionCode;
		private string placeCode;
		private string applicationCode;
		private string documentTypeCode;
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Document object.
        /// </summary>
        public Document_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Document object.
        /// </summary>
        public Document_GEN(long documentId) 
			: base(ObjectState.Added , null) 
        {
			this.documentId = documentId;
        }
		/// <summary>
        /// Initialize an new empty Document object.
        /// </summary>
        public Document_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, reader, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Document object with the given parameters.
        /// </summary>
        public  Document_GEN(long documentParentId, string documentRef, long documentInst, long documentLocal, long documentApp, long documentType, string documentTitle, string documentDescription, string documentExternalScope, string documentExternalId, DateTime? documentDate, string documentPublic, string documentStatus, DateTime? documentMinValDate, DateTime? documentMaxValDate, long documentTipoElem, long documentStatusId, DateTime? documentExecutionDate, DateTime? documentValidationDate, DateTime? documentEmissionDate) 
			: base(ObjectState.Added, null) 
        {	 
			this.documentParentId = documentParentId;
			this.documentRef = documentRef;
			this.documentInst = documentInst;
			this.documentLocal = documentLocal;
			this.documentApp = documentApp;
			this.documentType = documentType;
			this.documentTitle = documentTitle;
			this.documentDescription = documentDescription;
			this.documentExternalScope = documentExternalScope;
			this.documentExternalId = documentExternalId;
			this.documentDate = documentDate;
			this.documentPublic = documentPublic;
			this.documentStatus = documentStatus;
			this.documentMinValDate = documentMinValDate;
			this.documentMaxValDate = documentMaxValDate;
			this.documentTipoElem = documentTipoElem;
			this.documentStatusId = documentStatusId;
			this.documentExecutionDate = documentExecutionDate;
			this.documentValidationDate = documentValidationDate;
			this.documentEmissionDate = documentEmissionDate;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentId
        {
            get { return this.documentId; }
            set { 
				if(this.documentId != value) {
					this.documentId = value;
					DataStateChanged(ObjectState.Modified, "DocumentId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentParentId
        {
            get { return this.documentParentId; }
            set { 
				if(this.documentParentId != value) {
					this.documentParentId = value;
					DataStateChanged(ObjectState.Modified, "DocumentParentId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentRef
        {
            get { return this.documentRef; }
            set { 
				if(this.documentRef != value) {
					this.documentRef = value;
					DataStateChanged(ObjectState.Modified, "DocumentRef");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentInst
        {
            get { return this.documentInst; }
            set { 
				if(this.documentInst != value) {
					this.documentInst = value;
					DataStateChanged(ObjectState.Modified, "DocumentInst");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentLocal
        {
            get { return this.documentLocal; }
            set { 
				if(this.documentLocal != value) {
					this.documentLocal = value;
					DataStateChanged(ObjectState.Modified, "DocumentLocal");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentApp
        {
            get { return this.documentApp; }
            set { 
				if(this.documentApp != value) {
					this.documentApp = value;
					DataStateChanged(ObjectState.Modified, "DocumentApp");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentType
        {
            get { return this.documentType; }
            set { 
				if(this.documentType != value) {
					this.documentType = value;
					DataStateChanged(ObjectState.Modified, "DocumentType");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTitle
        {
            get { return this.documentTitle; }
            set { 
				if(this.documentTitle != value) {
					this.documentTitle = value;
					DataStateChanged(ObjectState.Modified, "DocumentTitle");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentDescription
        {
            get { return this.documentDescription; }
            set { 
				if(this.documentDescription != value) {
					this.documentDescription = value;
					DataStateChanged(ObjectState.Modified, "DocumentDescription");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentExternalScope
        {
            get { return this.documentExternalScope; }
            set { 
				if(this.documentExternalScope != value) {
					this.documentExternalScope = value;
					DataStateChanged(ObjectState.Modified, "DocumentExternalScope");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentExternalId
        {
            get { return this.documentExternalId; }
            set { 
				if(this.documentExternalId != value) {
					this.documentExternalId = value;
					DataStateChanged(ObjectState.Modified, "DocumentExternalId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? DocumentDate
        {
            get { return this.documentDate; }
            set { 
				if(!this.documentDate.Equals(value)) {
					this.documentDate = value;
					DataStateChanged(ObjectState.Modified, "DocumentDate");
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentPublic
        {
            get { return this.documentPublic; }
            set { 
				if(this.documentPublic != value) {
					this.documentPublic = value;
					DataStateChanged(ObjectState.Modified, "DocumentPublic");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentStatus
        {
            get { return this.documentStatus; }
            set { 
				if(this.documentStatus != value) {
					this.documentStatus = value;
					DataStateChanged(ObjectState.Modified, "DocumentStatus");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? DocumentMinValDate
        {
            get { return this.documentMinValDate; }
            set { 
				if(!this.documentMinValDate.Equals(value)) {
					this.documentMinValDate = value;
					DataStateChanged(ObjectState.Modified, "DocumentMinValDate");
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? DocumentMaxValDate
        {
            get { return this.documentMaxValDate; }
            set { 
				if(!this.documentMaxValDate.Equals(value)) {
					this.documentMaxValDate = value;
					DataStateChanged(ObjectState.Modified, "DocumentMaxValDate");
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentTipoElem
        {
            get { return this.documentTipoElem; }
            set { 
				if(this.documentTipoElem != value) {
					this.documentTipoElem = value;
					DataStateChanged(ObjectState.Modified, "DocumentTipoElem");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentStatusId
        {
            get { return this.documentStatusId; }
            set { 
				if(this.documentStatusId != value) {
					this.documentStatusId = value;
					DataStateChanged(ObjectState.Modified, "DocumentStatusId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? DocumentExecutionDate
        {
            get { return this.documentExecutionDate; }
            set { 
				if(!this.documentExecutionDate.Equals(value)) {
					this.documentExecutionDate = value;
					DataStateChanged(ObjectState.Modified, "DocumentExecutionDate");
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? DocumentValidationDate
        {
            get { return this.documentValidationDate; }
            set { 
				if(!this.documentValidationDate.Equals(value)) {
					this.documentValidationDate = value;
					DataStateChanged(ObjectState.Modified, "DocumentValidationDate");
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? DocumentEmissionDate
        {
            get { return this.documentEmissionDate; }
            set { 
				if(!this.documentEmissionDate.Equals(value)) {
					this.documentEmissionDate = value;
					DataStateChanged(ObjectState.Modified, "DocumentEmissionDate");
				}
		}

		}
		
		
		
		[DataMember]
		public DocumentList DocumentChilds
		{
			get { return this.documentChilds; }
			set { 
				if(this.documentChilds != value) {
					DataStateChanged(ObjectState.Modified, "DocumentChilds");
            				this.documentChilds = value;
				}
			}
		}
		
		
        //[DataMember]
        //public RequisitionDetails RequisicaoDet
        //{
        //    get { return this.requisicaoDet; }
        //    set { 
        //        if(this.requisicaoDet != value) {
        //            DataStateChanged(ObjectState.Modified, "RequisicaoDet");
        //                    this.requisicaoDet = value;
        //        }
        //    }
        //}
		
		
        //[DataMember]
        //public RequestDetails PedidoDet
        //{
        //    get { return this.pedidoDet; }
        //    set { 
        //        if(this.pedidoDet != value) {
        //            DataStateChanged(ObjectState.Modified, "PedidoDet");
        //                    this.pedidoDet = value;
        //        }
        //    }
        //}
		
		
		[DataMember]
		public ElementList DocumentElements
		{
			get { return this.documentElements; }
			set { 
				if(this.documentElements != value) {
					DataStateChanged(ObjectState.Modified, "DocumentElements");
            				this.documentElements = value;
				}
			}
		}
		
		
		[DataMember]
		public string InstitutionCode
		{
			get { return this.institutionCode; }
			set { 
				if(this.institutionCode != value) {
					DataStateChanged(ObjectState.Modified, "InstitutionCode");
            				this.institutionCode = value;
				}
			}
		}
		
		
		[DataMember]
		public string PlaceCode
		{
			get { return this.placeCode; }
			set { 
				if(this.placeCode != value) {
					DataStateChanged(ObjectState.Modified, "PlaceCode");
            				this.placeCode = value;
				}
			}
		}
		
		
		[DataMember]
		public string ApplicationCode
		{
			get { return this.applicationCode; }
			set { 
				if(this.applicationCode != value) {
					DataStateChanged(ObjectState.Modified, "ApplicationCode");
            				this.applicationCode = value;
				}
			}
		}
		
		
		[DataMember]
		public string DocumentTypeCode
		{
			get { return this.documentTypeCode; }
			set { 
				if(this.documentTypeCode != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeCode");
            				this.documentTypeCode = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
		
		protected void LoadDocument_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "DOCUMENTID":
							if (!reader.IsDBNull(i)) this.documentId = reader.GetInt64(i);
							break;
						case "DOCUMENTPARENTID":
							if (!reader.IsDBNull(i)) this.documentParentId = reader.GetInt64(i);
							break;
						case "DOCUMENTREF":
							if (!reader.IsDBNull(i)) this.documentRef = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTINST":
							if (!reader.IsDBNull(i)) this.documentInst = reader.GetInt64(i);
							break;
						case "DOCUMENTLOCAL":
							if (!reader.IsDBNull(i)) this.documentLocal = reader.GetInt64(i);
							break;
						case "DOCUMENTAPP":
							if (!reader.IsDBNull(i)) this.documentApp = reader.GetInt64(i);
							break;
						case "DOCUMENTTYPE":
							if (!reader.IsDBNull(i)) this.documentType = reader.GetInt64(i);
							break;
						case "DOCUMENTTITLE":
							if (!reader.IsDBNull(i)) this.documentTitle = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTDESCRIPTION":
							if (!reader.IsDBNull(i)) this.documentDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTEXTERNALSCOPE":
							if (!reader.IsDBNull(i)) this.documentExternalScope = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTEXTERNALID":
							if (!reader.IsDBNull(i)) this.documentExternalId = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTDATE":
							if (!reader.IsDBNull(i)) this.documentDate = reader.GetDateTime(i);
							break;
						case "DOCUMENTPUBLIC":
							if (!reader.IsDBNull(i)) this.documentPublic = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTSTATUS":
							if (!reader.IsDBNull(i)) this.documentStatus = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTMINVALDATE":
							if (!reader.IsDBNull(i)) this.documentMinValDate = reader.GetDateTime(i);
							break;
						case "DOCUMENTMAXVALDATE":
							if (!reader.IsDBNull(i)) this.documentMaxValDate = reader.GetDateTime(i);
							break;
						case "DOCUMENTTIPOELEM":
							if (!reader.IsDBNull(i)) this.documentTipoElem = reader.GetInt64(i);
							break;
						case "DOCUMENTSTATUSID":
							if (!reader.IsDBNull(i)) this.documentStatusId = reader.GetInt64(i);
							break;
						case "DOCUMENTEXECUTIONDATE":
							if (!reader.IsDBNull(i)) this.documentExecutionDate = reader.GetDateTime(i);
							break;
						case "DOCUMENTVALIDATIONDATE":
							if (!reader.IsDBNull(i)) this.documentValidationDate = reader.GetDateTime(i);
							break;
						case "DOCUMENTEMISSIONDATE":
							if (!reader.IsDBNull(i)) this.documentEmissionDate = reader.GetDateTime(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Document document = obj as Document;
			if (document == null)
				return false;
			return document.DocumentId == DocumentId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


