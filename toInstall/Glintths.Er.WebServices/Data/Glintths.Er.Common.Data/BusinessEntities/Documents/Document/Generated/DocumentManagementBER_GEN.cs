
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 25 de Janeiro de 2012
    /// Created By: Generated by CodeSmith
    /// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class DocumentManagementBER_GEN : CommonBER
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;

        #region Variables
        #endregion

        protected DocumentManagementBER_GEN()
        {
            /*try
            {
                dal=DatabaseFactory.CreateDatabase("DocumentsWCF");
            }
            catch 
            {	
                dal = DatabaseFactory.CreateDatabase();
            }*/

        }

        #region TABLES OPERATIONS

        #region Cache DOCUMENT
        #endregion


        #region Select DOCUMENT Operations
        //
        //SELECT OPERATIONS DOCUMENT
        //
        //
        //
        //
        public virtual DocumentList GetPatientDocuments(string companyDB, string documentRef, string documentExternalId, long? patEntId, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, long? reqService, string globalFilters, string docsSession, string servsSession, string userName, string userAnaRes)
        {
            IDataReader reader = GetPatientDocumentsDB(companyDB, documentRef, documentExternalId, patEntId, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, reqService, globalFilters, docsSession, servsSession, userName, userAnaRes);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetDocumentsByDocRef(string companyDB, string documentRef, long appId, long localId, long instId, string childType, string fileType)
        {
            IDataReader reader = GetDocumentsByDocRefDB(companyDB, documentRef, appId, localId, instId, childType, fileType);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetDocumentsByDocRefV2(string companyDB, string documentRef, long documentInst, long documentLocal, long documentApp, long documentType, string childType, string fileType)
        {
            IDataReader reader = GetDocumentsByDocRefV2DB(companyDB, documentRef, documentInst, documentLocal, documentApp, documentType, childType, fileType);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetPatientRequisitions(string companyDB, string documentRef, string documentExternalId, long patEntId, long? reqService, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, string myGlobalFilters, string myDocsSessionFilters, string myServsSessionFilters, string userName, long? execService, long? stateID, string withResults, long? doctorId)
        {
            IDataReader reader = GetPatientRequisitionsDB(companyDB, documentRef, documentExternalId, patEntId, reqService, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, myGlobalFilters, myDocsSessionFilters, myServsSessionFilters, userName, execService, stateID, withResults, doctorId);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual Document GetRequisitionInfoById(string companyDB, long documentId)
        {
            IDataReader reader = GetRequisitionInfoByIdDB(companyDB, documentId);
            Document obj = null;
            if (reader.Read())
            {
                try
                {
                    obj = new Document(reader, companyDB);
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();

            return obj;
        }

        //
        //
        //
        public virtual DocumentList GetPatientRequisitionsMulti(string companyDB, string documentRef, string documentExternalId, string patEntId, long? reqService, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, string myGlobalFilters, string myDocsSessionFilters, string myServsSessionFilters, string userName, long? execService, long? stateID, string withResults, long? doctorId)
        {
            IDataReader reader = GetPatientRequisitionsMultiDB(companyDB, documentRef, documentExternalId, patEntId, reqService, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, myGlobalFilters, myDocsSessionFilters, myServsSessionFilters, userName, execService, stateID, withResults, doctorId);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetPatientDocumentsMulti(string companyDB, string documentRef, string documentExternalId, string patEntId, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, long? reqService, string globalFilters, string docsSession, string servsSession, string userName, string userAnaRes, long? execService)
        {
            IDataReader reader = GetPatientDocumentsMultiDB(companyDB, documentRef, documentExternalId, patEntId, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, reqService, globalFilters, docsSession, servsSession, userName, userAnaRes, execService);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetDocumentsForRequest(string companyDB, long? requisitionId, long? elemId)
        {
            IDataReader reader = GetDocumentsForRequestDB(companyDB, requisitionId, elemId);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetPatReqForServices(string companyDB, long execService, long reqService, string entid, long? institution, long? place, long? application)
        {
            IDataReader reader = GetPatReqForServicesDB(companyDB, execService, reqService, entid, institution, place, application);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetPatReqForServicesMulti(string companyDB, long execService, long reqService, string entid, long? institution, long? place, long? application)
        {
            IDataReader reader = GetPatReqForServicesMultiDB(companyDB, execService, reqService, entid, institution, place, application);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetDocumentsByMultiCriteria(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic)
        {
            IDataReader reader = GetDocumentsByMultiCriteriaDB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetDocumentsByMultiCriteriaV2(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, ref long? resultsCount)
        {
            IDataReader reader = GetDocumentsByMultiCriteriaV2DB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, ref resultsCount);
            
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentList GetPatientDocumentsV2(string companyDB, string patientType, string patientId, string episodeType, string episodeId, string institution, string place, string application, string documentType, string username)
        {
            IDataReader reader = GetPatientDocumentsV2DB(companyDB, patientType, patientId, episodeType, episodeId, institution, place, application, documentType, username);
            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }


        //
        // DB
        //
        protected virtual string GetPatientDocumentsDBMethod(string companyDB)
        {
            string proc = GetPatientDocumentsDBMethodName;
            string package = GetPatientDocumentsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatientDocumentsDBMethodName
        {
            get { return "GetPatientDocuments"; }
        }

        protected virtual string GetPatientDocumentsDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatientDocumentsDB(string companyDB, string documentRef, string documentExternalId, long? patEntId, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, long? reqService, string globalFilters, string docsSession, string servsSession, string userName, string userAnaRes)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientDocumentsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patEntId, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, reqService, globalFilters, docsSession, servsSession, userName, userAnaRes, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocumentsByDocRefDBMethod(string companyDB)
        {
            string proc = GetDocumentsByDocRefDBMethodName;
            string package = GetDocumentsByDocRefDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocumentsByDocRefDBMethodName
        {
            get { return "GetDocumentsByDocRef"; }
        }

        protected virtual string GetDocumentsByDocRefDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocumentsByDocRefDB(string companyDB, string documentRef, long appId, long localId, long instId, string childType, string fileType)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsByDocRefDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, appId, localId, instId, childType, fileType, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocumentsByDocRefV2DBMethod(string companyDB)
        {
            string proc = GetDocumentsByDocRefV2DBMethodName;
            string package = GetDocumentsByDocRefV2DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocumentsByDocRefV2DBMethodName
        {
            get { return "GetDocumentsByDocRefV2"; }
        }

        protected virtual string GetDocumentsByDocRefV2DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocumentsByDocRefV2DB(string companyDB, string documentRef, long documentInst, long documentLocal, long documentApp, long documentType, string childType, string fileType)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsByDocRefV2DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentInst, documentLocal, documentApp, documentType, childType, fileType, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetPatientRequisitionsDBMethod(string companyDB)
        {
            string proc = GetPatientRequisitionsDBMethodName;
            string package = GetPatientRequisitionsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatientRequisitionsDBMethodName
        {
            get { return "GetPatientRequisitions"; }
        }

        protected virtual string GetPatientRequisitionsDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatientRequisitionsDB(string companyDB, string documentRef, string documentExternalId, long patEntId, long? reqService, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, string myGlobalFilters, string myDocsSessionFilters, string myServsSessionFilters, string userName, long? execService, long? stateID, string withResults, long? doctorId)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientRequisitionsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patEntId, reqService, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, myGlobalFilters, myDocsSessionFilters, myServsSessionFilters, userName, execService, stateID, withResults, doctorId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetRequisitionInfoByIdDBMethod(string companyDB)
        {
            string proc = GetRequisitionInfoByIdDBMethodName;
            string package = GetRequisitionInfoByIdDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetRequisitionInfoByIdDBMethodName
        {
            get { return "GetRequisitionInfoById"; }
        }

        protected virtual string GetRequisitionInfoByIdDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetRequisitionInfoByIdDB(string companyDB, long documentId)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetRequisitionInfoByIdDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetPatientRequisitionsMultiDBMethod(string companyDB)
        {
            string proc = GetPatientRequisitionsMultiDBMethodName;
            string package = GetPatientRequisitionsMultiDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatientRequisitionsMultiDBMethodName
        {
            get { return "GetPatientRequisitionsMulti"; }
        }

        protected virtual string GetPatientRequisitionsMultiDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatientRequisitionsMultiDB(string companyDB, string documentRef, string documentExternalId, string patEntId, long? reqService, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, string myGlobalFilters, string myDocsSessionFilters, string myServsSessionFilters, string userName, long? execService, long? stateID, string withResults, long? doctorId)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientRequisitionsMultiDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patEntId, reqService, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, myGlobalFilters, myDocsSessionFilters, myServsSessionFilters, userName, execService, stateID, withResults, doctorId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetPatientDocumentsMultiDBMethod(string companyDB)
        {
            string proc = GetPatientDocumentsMultiDBMethodName;
            string package = GetPatientDocumentsMultiDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatientDocumentsMultiDBMethodName
        {
            get { return "GetPatientDocumentsMulti"; }
        }

        protected virtual string GetPatientDocumentsMultiDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatientDocumentsMultiDB(string companyDB, string documentRef, string documentExternalId, string patEntId, long? episodeTypeId, string episodeId, Nullable<DateTime> epiDateBegin, Nullable<DateTime> epiDateEnd, long? docTypeId, long? appId, long? localId, long? instId, Nullable<DateTime> docDateBegin, Nullable<DateTime> docDateEnd, Nullable<DateTime> valDateBegin, Nullable<DateTime> valDateEnd, long? reqService, string globalFilters, string docsSession, string servsSession, string userName, string userAnaRes, long? execService)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientDocumentsMultiDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patEntId, episodeTypeId, episodeId, epiDateBegin, epiDateEnd, docTypeId, appId, localId, instId, docDateBegin, docDateEnd, valDateBegin, valDateEnd, reqService, globalFilters, docsSession, servsSession, userName, userAnaRes, execService, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocumentsForRequestDBMethod(string companyDB)
        {
            string proc = GetDocumentsForRequestDBMethodName;
            string package = GetDocumentsForRequestDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocumentsForRequestDBMethodName
        {
            get { return "GetDocumentsForRequest"; }
        }

        protected virtual string GetDocumentsForRequestDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocumentsForRequestDB(string companyDB, long? requisitionId, long? elemId)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsForRequestDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, requisitionId, elemId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetPatReqForServicesDBMethod(string companyDB)
        {
            string proc = GetPatReqForServicesDBMethodName;
            string package = GetPatReqForServicesDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatReqForServicesDBMethodName
        {
            get { return "GetPatReqForServices"; }
        }

        protected virtual string GetPatReqForServicesDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatReqForServicesDB(string companyDB, long execService, long reqService, string entid, long? institution, long? place, long? application)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatReqForServicesDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, execService, reqService, entid, institution, place, application, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetPatReqForServicesMultiDBMethod(string companyDB)
        {
            string proc = GetPatReqForServicesMultiDBMethodName;
            string package = GetPatReqForServicesMultiDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatReqForServicesMultiDBMethodName
        {
            get { return "GetPatReqForServicesMulti"; }
        }

        protected virtual string GetPatReqForServicesMultiDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatReqForServicesMultiDB(string companyDB, long execService, long reqService, string entid, long? institution, long? place, long? application)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatReqForServicesMultiDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, execService, reqService, entid, institution, place, application, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocumentsByMultiCriteriaDBMethod(string companyDB)
        {
            string proc = GetDocumentsByMultiCriteriaDBMethodName;
            string package = GetDocumentsByMultiCriteriaDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocumentsByMultiCriteriaDBMethodName
        {
            get { return "GetDocumentsByMultiCriteria"; }
        }

        protected virtual string GetDocumentsByMultiCriteriaDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocumentsByMultiCriteriaDB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsByMultiCriteriaDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocumentsByMultiCriteriaV2DBMethod(string companyDB)
        {
            string proc = GetDocumentsByMultiCriteriaV2DBMethodName;
            string package = GetDocumentsByMultiCriteriaV2DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocumentsByMultiCriteriaV2DBMethodName
        {
            get { return "GetDocumentsByMultiCriteriaV2"; }
        }

        protected virtual string GetDocumentsByMultiCriteriaV2DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocumentsByMultiCriteriaV2DB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsByMultiCriteriaV2DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetPatientDocumentsV2DBMethod(string companyDB)
        {
            string proc = GetPatientDocumentsV2DBMethodName;
            string package = GetPatientDocumentsV2DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetPatientDocumentsV2DBMethodName
        {
            get { return "GetPatientDocumentsV2"; }
        }

        protected virtual string GetPatientDocumentsV2DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetPatientDocumentsV2DB(string companyDB, string patientType, string patientId, string episodeType, string episodeId, string institution, string place, string application, string documentType, string username)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientDocumentsV2DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, patientType, patientId, episodeType, episodeId, institution, place, application, documentType, username, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }


        #endregion

        #region Insert DOCUMENT Operations
        //
        //INSERT OPERATIONS DOCUMENT
        //
        //
        //
        //
        public virtual Document InsertNewDocumentRequest(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            try
            {
                if (transaction.Length == 0)
                    InsertNewDocumentRequestDB(companyDB, null, obj);
                else
                    InsertNewDocumentRequestDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }

            return obj;
        }

        //
        //
        //
        public virtual Document InsertNewDocumentRequisition(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            try
            {
                if (transaction.Length == 0)
                    InsertNewDocumentRequisitionDB(companyDB, null, obj);
                else
                    InsertNewDocumentRequisitionDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }

            return obj;
        }


        //
        // DB
        //
        protected virtual string InsertNewDocumentRequestDBMethod(string companyDB)
        {
            string proc = InsertNewDocumentRequestDBMethodName;
            string package = InsertNewDocumentRequestDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string InsertNewDocumentRequestDBMethodName
        {
            get { return "InsertNewDocumentRequest"; }
        }

        protected virtual string InsertNewDocumentRequestDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] InsertNewDocumentRequestDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        protected object[] InsertNewDocumentRequestDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();

            object[] standardParameters = new object[]{
					obj.DocumentInst
                  ,	obj.DocumentLocal
                  ,	obj.DocumentApp
                  ,	obj.DocumentDate
				  , DBNull.Value 
					};

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(InsertNewDocumentRequestDBParametersExtra(obj));

            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void InsertNewDocumentRequestDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = InsertNewDocumentRequestDBMethod(companyDB);

                DbCommand dbCommand = dal.GetStoredProcCommand(
                            dbMethod,
                    InsertNewDocumentRequestDBParameters(obj)
                );

                InsertNewDocumentRequestDBPreQuery(dbCommand, obj);

                if (transaction != null)
                {
                    dal.ExecuteNonQuery(dbCommand, transaction);
                }
                else
                {
                    dal.ExecuteNonQuery(dbCommand);
                }

                InsertNewDocumentRequestDBPosQuery(dbCommand, obj);

                obj.DocumentId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void InsertNewDocumentRequestDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void InsertNewDocumentRequestDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }

        //
        // DB
        //
        protected virtual string InsertNewDocumentRequisitionDBMethod(string companyDB)
        {
            string proc = InsertNewDocumentRequisitionDBMethodName;
            string package = InsertNewDocumentRequisitionDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string InsertNewDocumentRequisitionDBMethodName
        {
            get { return "InsertNewDocumentRequisition"; }
        }

        protected virtual string InsertNewDocumentRequisitionDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] InsertNewDocumentRequisitionDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        protected object[] InsertNewDocumentRequisitionDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();

            object[] standardParameters = new object[]{
					obj.DocumentInst
                  ,	obj.DocumentLocal
                  ,	obj.DocumentApp
                  ,	obj.DocumentDate
				  , DBNull.Value 
					};

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(InsertNewDocumentRequisitionDBParametersExtra(obj));

            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void InsertNewDocumentRequisitionDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = InsertNewDocumentRequisitionDBMethod(companyDB);

                DbCommand dbCommand = dal.GetStoredProcCommand(
                            dbMethod,
                    InsertNewDocumentRequisitionDBParameters(obj)
                );

                InsertNewDocumentRequisitionDBPreQuery(dbCommand, obj);

                if (transaction != null)
                {
                    dal.ExecuteNonQuery(dbCommand, transaction);
                }
                else
                {
                    dal.ExecuteNonQuery(dbCommand);
                }

                InsertNewDocumentRequisitionDBPosQuery(dbCommand, obj);

                obj.DocumentId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void InsertNewDocumentRequisitionDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void InsertNewDocumentRequisitionDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }


        #endregion

        #region Update DOCUMENT Operations
        //
        //UPDATE OPERATIONS DOCUMENT
        //
        //
        //
        //
        public virtual Document UpdateRequisition(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    UpdateRequisitionDB(companyDB, null, obj);
                else
                    UpdateRequisitionDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }

        //
        //
        //
        public virtual Document UpdateDocumentStatus(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    UpdateDocumentStatusDB(companyDB, null, obj);
                else
                    UpdateDocumentStatusDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }

        //
        //
        //
        public virtual Document CancelDocumentByUniqueId(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    CancelDocumentByUniqueIdDB(companyDB, null, obj);
                else
                    CancelDocumentByUniqueIdDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }

        //
        //
        //
        public virtual Document PromoteDocumentToPublic(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    PromoteDocumentToPublicDB(companyDB, null, obj);
                else
                    PromoteDocumentToPublicDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }

        //
        //
        //
        public virtual Document CancelDocument(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    CancelDocumentDB(companyDB, null, obj);
                else
                    CancelDocumentDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }

        //
        //
        //
        public virtual Document CancelDocumentVersion(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    CancelDocumentVersionDB(companyDB, null, obj);
                else
                    CancelDocumentVersionDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }


        //
        // DB
        //
        protected virtual string UpdateRequisitionDBMethod(string companyDB)
        {
            string proc = UpdateRequisitionDBMethodName;
            string package = UpdateRequisitionDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string UpdateRequisitionDBMethodName
        {
            get { return "UpdateRequisition"; }
        }

        protected virtual string UpdateRequisitionDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] UpdateRequisitionDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        private object[] UpdateRequisitionDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateRequisitionDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void UpdateRequisitionDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = UpdateRequisitionDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                UpdateRequisitionDBParameters(obj)
                );

                UpdateRequisitionDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                UpdateRequisitionDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void UpdateRequisitionDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void UpdateRequisitionDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }

        //
        // DB
        //
        protected virtual string UpdateDocumentStatusDBMethod(string companyDB)
        {
            string proc = UpdateDocumentStatusDBMethodName;
            string package = UpdateDocumentStatusDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string UpdateDocumentStatusDBMethodName
        {
            get { return "UpdateDocumentStatus"; }
        }

        protected virtual string UpdateDocumentStatusDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] UpdateDocumentStatusDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        private object[] UpdateDocumentStatusDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			obj.DocumentRef,
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateDocumentStatusDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void UpdateDocumentStatusDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = UpdateDocumentStatusDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                UpdateDocumentStatusDBParameters(obj)
                );

                UpdateDocumentStatusDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                UpdateDocumentStatusDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void UpdateDocumentStatusDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void UpdateDocumentStatusDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }

        //
        // DB
        //
        protected virtual string CancelDocumentByUniqueIdDBMethod(string companyDB)
        {
            string proc = CancelDocumentByUniqueIdDBMethodName;
            string package = CancelDocumentByUniqueIdDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string CancelDocumentByUniqueIdDBMethodName
        {
            get { return "CancelDocumentByUniqueId"; }
        }

        protected virtual string CancelDocumentByUniqueIdDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] CancelDocumentByUniqueIdDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        private object[] CancelDocumentByUniqueIdDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			obj.DocumentId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(CancelDocumentByUniqueIdDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void CancelDocumentByUniqueIdDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = CancelDocumentByUniqueIdDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                CancelDocumentByUniqueIdDBParameters(obj)
                );

                CancelDocumentByUniqueIdDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                CancelDocumentByUniqueIdDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void CancelDocumentByUniqueIdDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void CancelDocumentByUniqueIdDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }

        //
        // DB
        //
        protected virtual string PromoteDocumentToPublicDBMethod(string companyDB)
        {
            string proc = PromoteDocumentToPublicDBMethodName;
            string package = PromoteDocumentToPublicDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string PromoteDocumentToPublicDBMethodName
        {
            get { return "PromoteDocumentToPublic"; }
        }

        protected virtual string PromoteDocumentToPublicDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] PromoteDocumentToPublicDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        private object[] PromoteDocumentToPublicDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			obj.DocumentPublic,obj.DocumentId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(PromoteDocumentToPublicDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void PromoteDocumentToPublicDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = PromoteDocumentToPublicDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                PromoteDocumentToPublicDBParameters(obj)
                );

                PromoteDocumentToPublicDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                PromoteDocumentToPublicDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void PromoteDocumentToPublicDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void PromoteDocumentToPublicDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }

        //
        // DB
        //
        protected virtual string CancelDocumentDBMethod(string companyDB)
        {
            string proc = CancelDocumentDBMethodName;
            string package = CancelDocumentDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string CancelDocumentDBMethodName
        {
            get { return "CancelDocument"; }
        }

        protected virtual string CancelDocumentDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] CancelDocumentDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        private object[] CancelDocumentDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(CancelDocumentDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void CancelDocumentDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = CancelDocumentDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                CancelDocumentDBParameters(obj)
                );

                CancelDocumentDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                CancelDocumentDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void CancelDocumentDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void CancelDocumentDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }

        //
        // DB
        //
        protected virtual string CancelDocumentVersionDBMethod(string companyDB)
        {
            string proc = CancelDocumentVersionDBMethodName;
            string package = CancelDocumentVersionDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string CancelDocumentVersionDBMethodName
        {
            get { return "CancelDocumentVersion"; }
        }

        protected virtual string CancelDocumentVersionDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] CancelDocumentVersionDBParametersExtra(Document obj)
        {
            return new object[] { };
        }
        private object[] CancelDocumentVersionDBParameters(Document obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(CancelDocumentVersionDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void CancelDocumentVersionDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = CancelDocumentVersionDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                CancelDocumentVersionDBParameters(obj)
                );

                CancelDocumentVersionDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                CancelDocumentVersionDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void CancelDocumentVersionDBPosQuery(DbCommand dbCommand, Document obj)
        {

        }
        protected virtual void CancelDocumentVersionDBPreQuery(DbCommand dbCommand, Document obj)
        {

        }


        #endregion

        #region Delete DOCUMENT Operations
        //
        //DELETE OPERATIONS DOCUMENT
        //
        //
        //
        //
        public virtual void RemoveRequisition(string companyDB, Document obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState == ObjectState.Added)
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    RemoveRequisitionDB(companyDB, null, obj);
                else
                    RemoveRequisitionDB(companyDB, transaction[0], obj);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }


        //
        // DB
        //
        protected virtual string RemoveRequisitionDBMethod(string companyDB)
        {
            string proc = RemoveRequisitionDBMethodName;
            string package = RemoveRequisitionDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string RemoveRequisitionDBMethodName
        {
            get { return "RemoveRequisition"; }
        }
        protected virtual string RemoveRequisitionDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void RemoveRequisitionDB(string companyDB, DbTransaction transaction, Document obj)
        {
            try
            {
                string dbMethod = RemoveRequisitionDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                dbMethod
                , obj.DocumentId
                );

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                if (rowsAffected <= 0)
                    throw new DBConcurrencyException();

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }


        #endregion

        #region Cache DOCUMENTTYPE
        #endregion


        #region Select DOCUMENTTYPE Operations
        //
        //SELECT OPERATIONS DOCUMENTTYPE
        //
        //
        //
        //
        public virtual DocumentTypeList GetAllDocTypes(string companyDB, string globalFilters, string docsSession, string userName, string showArch, string showAnaRes, string showLinks)
        {
            IDataReader reader = GetAllDocTypesDB(companyDB, globalFilters, docsSession, userName, showArch, showAnaRes, showLinks);
            DocumentTypeList list = new DocumentTypeList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new DocumentType(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentTypeList GetDocTypesForExternalAccess(string companyDB, string entIds, long? epiTypeId, string epiId, long? instId, long? placeId, long? appId, long? docTypeId, string docRef, string elemType)
        {
            IDataReader reader = GetDocTypesForExternalAccessDB(companyDB, entIds, epiTypeId, epiId, instId, placeId, appId, docTypeId, docRef, elemType);
            DocumentTypeList list = new DocumentTypeList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new DocumentType(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentTypeList GetDocTypeDesc(string companyDB, string instCode, string placeCode, string appCode, string docTypeCode)
        {
            IDataReader reader = GetDocTypeDescDB(companyDB, instCode, placeCode, appCode, docTypeCode);
            DocumentTypeList list = new DocumentTypeList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new DocumentType(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocumentType GetDocTypeByCode(string companyDB, long documentTypeApplicationId, string documentTypeCode)
        {
            IDataReader reader = GetDocTypeByCodeDB(companyDB, documentTypeApplicationId, documentTypeCode);
            DocumentType obj = null;
            if (reader.Read())
            {
                try
                {
                    obj = new DocumentType(reader, companyDB);
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();

            return obj;
        }


        //
        // DB
        //
        protected virtual string GetAllDocTypesDBMethod(string companyDB)
        {
            string proc = GetAllDocTypesDBMethodName;
            string package = GetAllDocTypesDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetAllDocTypesDBMethodName
        {
            get { return "GetAllDocTypes"; }
        }

        protected virtual string GetAllDocTypesDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetAllDocTypesDB(string companyDB, string globalFilters, string docsSession, string userName, string showArch, string showAnaRes, string showLinks)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetAllDocTypesDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, globalFilters, docsSession, userName, showArch, showAnaRes, showLinks, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocTypesForExternalAccessDBMethod(string companyDB)
        {
            string proc = GetDocTypesForExternalAccessDBMethodName;
            string package = GetDocTypesForExternalAccessDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocTypesForExternalAccessDBMethodName
        {
            get { return "GetDocTypesForExternalAccess"; }
        }

        protected virtual string GetDocTypesForExternalAccessDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocTypesForExternalAccessDB(string companyDB, string entIds, long? epiTypeId, string epiId, long? instId, long? placeId, long? appId, long? docTypeId, string docRef, string elemType)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocTypesForExternalAccessDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds, epiTypeId, epiId, instId, placeId, appId, docTypeId, docRef, elemType, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocTypeDescDBMethod(string companyDB)
        {
            string proc = GetDocTypeDescDBMethodName;
            string package = GetDocTypeDescDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocTypeDescDBMethodName
        {
            get { return "GetDocTypeDesc"; }
        }

        protected virtual string GetDocTypeDescDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocTypeDescDB(string companyDB, string instCode, string placeCode, string appCode, string docTypeCode)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocTypeDescDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, instCode, placeCode, appCode, docTypeCode, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetDocTypeByCodeDBMethod(string companyDB)
        {
            string proc = GetDocTypeByCodeDBMethodName;
            string package = GetDocTypeByCodeDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetDocTypeByCodeDBMethodName
        {
            get { return "GetDocTypeByCode"; }
        }

        protected virtual string GetDocTypeByCodeDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetDocTypeByCodeDB(string companyDB, long documentTypeApplicationId, string documentTypeCode)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocTypeByCodeDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentTypeApplicationId, documentTypeCode, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }


        #endregion

        #region Cache DOCHIERARCHY
        #endregion


        #region Select DOCHIERARCHY Operations
        //
        //SELECT OPERATIONS DOCHIERARCHY
        //
        //
        //
        //
        public virtual DocHierarchyList GetAllHierarchyForDocument(string companyDB)
        {
            IDataReader reader = GetAllHierarchyForDocumentDB(companyDB);
            DocHierarchyList list = new DocHierarchyList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new DocHierarchy(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual DocHierarchyList GetHierarchyForExternalAccess(string companyDB, string entIds, long? epiTypeId, string epiId, long? instId, long? placeId, long? appId, long? docTypeId, string docRef, string elemType)
        {
            IDataReader reader = GetHierarchyForExternalAccessDB(companyDB, entIds, epiTypeId, epiId, instId, placeId, appId, docTypeId, docRef, elemType);
            DocHierarchyList list = new DocHierarchyList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new DocHierarchy(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }


        //
        // DB
        //
        protected virtual string GetAllHierarchyForDocumentDBMethod(string companyDB)
        {
            string proc = GetAllHierarchyForDocumentDBMethodName;
            string package = GetAllHierarchyForDocumentDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetAllHierarchyForDocumentDBMethodName
        {
            get { return "GetAllHierarchyForDocument"; }
        }

        protected virtual string GetAllHierarchyForDocumentDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetAllHierarchyForDocumentDB(string companyDB)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetAllHierarchyForDocumentDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetHierarchyForExternalAccessDBMethod(string companyDB)
        {
            string proc = GetHierarchyForExternalAccessDBMethodName;
            string package = GetHierarchyForExternalAccessDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetHierarchyForExternalAccessDBMethodName
        {
            get { return "GetHierarchyForExternalAccess"; }
        }

        protected virtual string GetHierarchyForExternalAccessDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }


        protected virtual IDataReader GetHierarchyForExternalAccessDB(string companyDB, string entIds, long? epiTypeId, string epiId, long? instId, long? placeId, long? appId, long? docTypeId, string docRef, string elemType)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetHierarchyForExternalAccessDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds, epiTypeId, epiId, instId, placeId, appId, docTypeId, docRef, elemType, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }


        #endregion

        #region Cache ELEMENT
        #endregion


        #region Update ELEMENT Operations
        //
        //UPDATE OPERATIONS ELEMENT
        //
        //
        //
        //
        public virtual Element CancelElement(string companyDB, Element obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    CancelElementDB(companyDB, null, obj);
                else
                    CancelElementDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }

        //
        //
        //
        public virtual Element UpdateElementReportInfo(string companyDB, Element obj, params DbTransaction[] transaction)
        {
            //if(obj.ObjectState != ObjectState.Modified) 
            //	throw new InvalidOperationException();

            try
            {
                if (transaction.Length == 0)
                    UpdateElementReportInfoDB(companyDB, null, obj);
                else
                    UpdateElementReportInfoDB(companyDB, transaction[0], obj);

                obj.ObjectState = ObjectState.Unchanged;
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return obj;
        }


        //
        // DB
        //
        protected virtual string CancelElementDBMethod(string companyDB)
        {
            string proc = CancelElementDBMethodName;
            string package = CancelElementDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string CancelElementDBMethodName
        {
            get { return "CancelElement"; }
        }

        protected virtual string CancelElementDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] CancelElementDBParametersExtra(Element obj)
        {
            return new object[] { };
        }
        private object[] CancelElementDBParameters(Element obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			obj.ElementId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(CancelElementDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void CancelElementDB(string companyDB, DbTransaction transaction, Element obj)
        {
            try
            {
                string dbMethod = CancelElementDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                CancelElementDBParameters(obj)
                );

                CancelElementDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                CancelElementDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void CancelElementDBPosQuery(DbCommand dbCommand, Element obj)
        {

        }
        protected virtual void CancelElementDBPreQuery(DbCommand dbCommand, Element obj)
        {

        }

        //
        // DB
        //
        protected virtual string UpdateElementReportInfoDBMethod(string companyDB)
        {
            string proc = UpdateElementReportInfoDBMethodName;
            string package = UpdateElementReportInfoDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string UpdateElementReportInfoDBMethodName
        {
            get { return "UpdateElementReportInfo"; }
        }

        protected virtual string UpdateElementReportInfoDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT_GEN"; }
        }

        protected virtual object[] UpdateElementReportInfoDBParametersExtra(Element obj)
        {
            return new object[] { };
        }
        private object[] UpdateElementReportInfoDBParameters(Element obj)
        {
            ArrayList finalParameters = new ArrayList();
            object[] standardParameters = new object[]
			{
			obj.ElementDescription,obj.ElementReport,obj.ElementReportPresOrder,obj.ElementId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateElementReportInfoDBParametersExtra(obj));
            return finalParameters.ToArray();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        protected virtual void UpdateElementReportInfoDB(string companyDB, DbTransaction transaction, Element obj)
        {
            try
            {
                string dbMethod = UpdateElementReportInfoDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(
                        dbMethod,
                UpdateElementReportInfoDBParameters(obj)
                );

                UpdateElementReportInfoDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                UpdateElementReportInfoDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }
        protected virtual void UpdateElementReportInfoDBPosQuery(DbCommand dbCommand, Element obj)
        {

        }
        protected virtual void UpdateElementReportInfoDBPreQuery(DbCommand dbCommand, Element obj)
        {

        }


        #endregion

        #region Cache ELEMENT
        #endregion



        #endregion

        #region OBJECTS OPERATIONS

        #endregion

    }
}


