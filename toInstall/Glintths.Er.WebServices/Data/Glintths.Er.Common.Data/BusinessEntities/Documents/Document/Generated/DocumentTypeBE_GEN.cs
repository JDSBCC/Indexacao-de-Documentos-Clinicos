using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 7 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class DocumentType_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long documentTypeApplicationId; ///
		private long documentTypeId; ///
		private string documentTypeCode; ///
		private string documentTypeAcronym; ///
		private string documentTypeDescription; ///
		private object documentTypeLogo; ///
		private string documentTypeScope; ///
		private long documentTypeEqGroup; ///
		private string documentTypeXmlIdx; ///
		private string documentTypeFileIdx; ///
		private string documentTypeErrorIdx; ///
		private string documentTypeArch; ///
		private string documentTypeOrigin; ///
		private string documentTypeLinks; ///
		
		private DocumentTypeList documentTypeChilds = new DocumentTypeList();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty DocumentType object.
        /// </summary>
        public DocumentType_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty DocumentType object.
        /// </summary>
        public DocumentType_GEN(long documentTypeApplicationId, long documentTypeId) : base(ObjectState.Added, null) 
        {
			this.documentTypeApplicationId = documentTypeApplicationId;
			this.documentTypeId = documentTypeId;
        }
		/// <summary>
        /// Initialize an new empty DocumentType object.
        /// </summary>
        public DocumentType_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  DocumentType object with the given parameters.
        /// </summary>
        public  DocumentType_GEN(long documentTypeApplicationId, long documentTypeId, string documentTypeCode, string documentTypeAcronym, string documentTypeDescription, object documentTypeLogo, string documentTypeScope, long documentTypeEqGroup, string documentTypeXmlIdx, string documentTypeFileIdx, string documentTypeErrorIdx, string documentTypeArch, string documentTypeOrigin, string documentTypeLinks) : base(ObjectState.Added, null) 
        {	 
			this.documentTypeApplicationId = documentTypeApplicationId;
			this.documentTypeId = documentTypeId;
			this.documentTypeCode = documentTypeCode;
			this.documentTypeAcronym = documentTypeAcronym;
			this.documentTypeDescription = documentTypeDescription;
			this.documentTypeLogo = documentTypeLogo;
			this.documentTypeScope = documentTypeScope;
			this.documentTypeEqGroup = documentTypeEqGroup;
			this.documentTypeXmlIdx = documentTypeXmlIdx;
			this.documentTypeFileIdx = documentTypeFileIdx;
			this.documentTypeErrorIdx = documentTypeErrorIdx;
			this.documentTypeArch = documentTypeArch;
			this.documentTypeOrigin = documentTypeOrigin;
			this.documentTypeLinks = documentTypeLinks;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentTypeApplicationId
        {
            get { return this.documentTypeApplicationId; }
            set { 
				if(this.documentTypeApplicationId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeApplicationId");
            		this.documentTypeApplicationId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentTypeId
        {
            get { return this.documentTypeId; }
            set { 
				if(this.documentTypeId != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeId");
            		this.documentTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeCode
        {
            get { return this.documentTypeCode; }
            set { 
				if(this.documentTypeCode != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeCode");
            		this.documentTypeCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeAcronym
        {
            get { return this.documentTypeAcronym; }
            set { 
				if(this.documentTypeAcronym != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeAcronym");
            		this.documentTypeAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeDescription
        {
            get { return this.documentTypeDescription; }
            set { 
				if(this.documentTypeDescription != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeDescription");
            		this.documentTypeDescription = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public object DocumentTypeLogo
        {
            get { return this.documentTypeLogo; }
            set { 
				if(this.documentTypeLogo != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeLogo");
            		this.documentTypeLogo = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeScope
        {
            get { return this.documentTypeScope; }
            set { 
				if(this.documentTypeScope != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeScope");
            		this.documentTypeScope = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocumentTypeEqGroup
        {
            get { return this.documentTypeEqGroup; }
            set { 
				if(this.documentTypeEqGroup != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeEqGroup");
            		this.documentTypeEqGroup = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeXmlIdx
        {
            get { return this.documentTypeXmlIdx; }
            set { 
				if(this.documentTypeXmlIdx != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeXmlIdx");
            		this.documentTypeXmlIdx = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeFileIdx
        {
            get { return this.documentTypeFileIdx; }
            set { 
				if(this.documentTypeFileIdx != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeFileIdx");
            		this.documentTypeFileIdx = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeErrorIdx
        {
            get { return this.documentTypeErrorIdx; }
            set { 
				if(this.documentTypeErrorIdx != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeErrorIdx");
            		this.documentTypeErrorIdx = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeArch
        {
            get { return this.documentTypeArch; }
            set { 
				if(this.documentTypeArch != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeArch");
            		this.documentTypeArch = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeOrigin
        {
            get { return this.documentTypeOrigin; }
            set { 
				if(this.documentTypeOrigin != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeOrigin");
            		this.documentTypeOrigin = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocumentTypeLinks
        {
            get { return this.documentTypeLinks; }
            set { 
				if(this.documentTypeLinks != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeLinks");
            		this.documentTypeLinks = value;
				}
			}
		}
		
		
		
		public DocumentTypeList DocumentTypeChilds
		{
			get { return this.documentTypeChilds; }
			set { 
				if(this.documentTypeChilds != value) {
					DataStateChanged(ObjectState.Modified, "DocumentTypeChilds");
            				this.documentTypeChilds = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		public virtual void AddDocumentTypeChilds(DocumentType obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.documentTypeChilds.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemoveDocumentTypeChilds(DocumentType obj)
		{
			this.documentTypeChilds.RemoveItem(obj);
			/*obj = this.documentTypeChilds[this.documentTypeChilds.IndexOf(obj)];
			this.documentTypeChilds.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.documentTypeChildsToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "DOCUMENTTYPEAPPLICATIONID":
							if (!reader.IsDBNull(i)) this.documentTypeApplicationId = reader.GetInt64(i);
							break;
						case "DOCUMENTTYPEID":
							if (!reader.IsDBNull(i)) this.documentTypeId = reader.GetInt64(i);
							break;
						case "DOCUMENTTYPECODE":
							if (!reader.IsDBNull(i)) this.documentTypeCode = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEACRONYM":
							if (!reader.IsDBNull(i)) this.documentTypeAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEDESCRIPTION":
							if (!reader.IsDBNull(i)) this.documentTypeDescription = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPELOGO":
							if (!reader.IsDBNull(i)) this.documentTypeLogo = reader.GetValue(i);
							break;
						case "DOCUMENTTYPESCOPE":
							if (!reader.IsDBNull(i)) this.documentTypeScope = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEEQGROUP":
							if (!reader.IsDBNull(i)) this.documentTypeEqGroup = reader.GetInt64(i);
							break;
						case "DOCUMENTTYPEXMLIDX":
							if (!reader.IsDBNull(i)) this.documentTypeXmlIdx = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEFILEIDX":
							if (!reader.IsDBNull(i)) this.documentTypeFileIdx = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEERRORIDX":
							if (!reader.IsDBNull(i)) this.documentTypeErrorIdx = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEARCH":
							if (!reader.IsDBNull(i)) this.documentTypeArch = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPEORIGIN":
							if (!reader.IsDBNull(i)) this.documentTypeOrigin = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCUMENTTYPELINKS":
							if (!reader.IsDBNull(i)) this.documentTypeLinks = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			DocumentType documenttype = obj as DocumentType;
			if (documenttype == null)
				return false;
			return documenttype.DocumentTypeId == DocumentTypeId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


