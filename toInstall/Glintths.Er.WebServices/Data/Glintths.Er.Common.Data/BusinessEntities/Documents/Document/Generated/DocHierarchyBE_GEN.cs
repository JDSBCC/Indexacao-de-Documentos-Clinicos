using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: segunda-feira, 6 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class DocHierarchy_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long docHierarchyDocTypeId; ///
		private long docHierarchyParentId; ///
		private long docHierarchyAppId; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty DocHierarchy object.
        /// </summary>
        public DocHierarchy_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty DocHierarchy object.
        /// </summary>
        public DocHierarchy_GEN(long docHierarchyDocTypeId, long docHierarchyParentId, long docHierarchyAppId) : base(ObjectState.Added, null) 
        {
			this.docHierarchyDocTypeId = docHierarchyDocTypeId;
			this.docHierarchyParentId = docHierarchyParentId;
			this.docHierarchyAppId = docHierarchyAppId;
        }
		/// <summary>
        /// Initialize an new empty DocHierarchy object.
        /// </summary>
        public DocHierarchy_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocHierarchyDocTypeId
        {
            get { return this.docHierarchyDocTypeId; }
            set { 
				if(this.docHierarchyDocTypeId != value) {
					DataStateChanged(ObjectState.Modified, "DocHierarchyDocTypeId");
            		this.docHierarchyDocTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocHierarchyParentId
        {
            get { return this.docHierarchyParentId; }
            set { 
				if(this.docHierarchyParentId != value) {
					DataStateChanged(ObjectState.Modified, "DocHierarchyParentId");
            		this.docHierarchyParentId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocHierarchyAppId
        {
            get { return this.docHierarchyAppId; }
            set { 
				if(this.docHierarchyAppId != value) {
					DataStateChanged(ObjectState.Modified, "DocHierarchyAppId");
            		this.docHierarchyAppId = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "DOCHIERARCHYDOCTYPEID":
							if (!reader.IsDBNull(i)) this.docHierarchyDocTypeId = reader.GetInt64(i);
							break;
						case "DOCHIERARCHYPARENTID":
							if (!reader.IsDBNull(i)) this.docHierarchyParentId = reader.GetInt64(i);
							break;
						case "DOCHIERARCHYAPPID":
							if (!reader.IsDBNull(i)) this.docHierarchyAppId = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			DocHierarchy dochierarchy = obj as DocHierarchy;
			if (dochierarchy == null)
				return false;
			return dochierarchy.DocHierarchyAppId == DocHierarchyAppId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


