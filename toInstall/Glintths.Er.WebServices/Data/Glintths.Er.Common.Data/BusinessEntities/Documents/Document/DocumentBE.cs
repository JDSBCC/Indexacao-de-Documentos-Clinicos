using System;
using System.Data;
using System.Runtime.Serialization;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
	
namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: sexta-feira, 25 de Junho de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class Document : Document_GEN
	{
        public string EpisodeType { get; set; }
        public string EpisodeTypeCode { get; set; }
        public long EpisodeTypeId { get; set; }
        public string EpisodeId { get; set; }
        public DateTime EpisodeDate { get; set; }
        public string ServiceReq { get; set; }
        public string ServiceExec { get; set; }
        public string ChildElemType { get; set; }
        public string AppName { get; set; }
        public string InstName { get; set; }
        public string DocTypeName { get; set; }
        public string ThumbUrlQuery { get; set; }
        public string ThumbClass { get; set; }
        public byte[] Thumb { get; set; }
        
        //public long InstId { get; set; }
        //public long PlaceId { get; set; }
        //public long AppId { get; set; }
        public long DocTypeId { get; set; }
        public long ReqServId { get; set; }
        public long ExeServId { get; set; }

        public bool Processed { get; set; }

        // pedidos
        public Nullable<DateTime> NextConsDate { get; set; }

        //requisições 
        public String PatEntId { get; set; }
        //public PersHosp Doctor { get; set; }
        public Nullable<DateTime> DesiredDate { get; set; }
        public Nullable<DateTime> AssignedDate { get; set; }
        private bool hasExtraDocuments = false;
        public bool HasExtraDocuments { get { return hasExtraDocuments; } set { hasExtraDocuments = value; } }
        public string Terapeutics { get; set; } 

        public string DocumentHasResults { get; set; }
        public bool DocumentHasForm { get; set; }
        public bool DocumentMandatoryForm { get; set; }
        public string DocumentFormDescription { get; set; }

        public string PatientId { get; set; }
        public string PatientType { get; set; }
        public string PatientName { get; set; }

        public string Viewed { get; set; }

        public string ObsCancel { get; set; }
        public Nullable<DateTime> DateCancel { get; set; }
        public string JustifCancel { get; set; }
        public string JustifIdCancel { get; set; }
        public string JustifCancelValor { get; set; }
        public string UserCancel { get; set; }
        
        //Used to check if documents are cancelled
        public string DocumentStatus { get; set; }

        [DataMember]
        public string DocumentURL { 
            get; 
            set; 
        }

        [DataMember]
        public string DocumentURLType
        {
            get;
            set;
        }

        /// <summary>
        /// Initialize an new empty Document object.
        /// </summary>
        public Document() : base()
        {
        }
		
		/// <summary>
        /// Initialize an new empty Document object.
        /// </summary>
        public Document(IDataReader reader, string companyDB) : base(reader, companyDB)
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                {
                    case "PATIENTTYPE":
                        if (!reader.IsDBNull(i)) this.PatientType = reader.GetString(i);
                        break;
                    case "PATIENTID":
                        if (!reader.IsDBNull(i)) this.PatientId = reader.GetString(i);
                        break;
                    case "EPISODETYPE":
                        if (!reader.IsDBNull(i)) this.EpisodeType = reader.GetString(i);
                        break;
                    case "EPISODETYPECODE":
                        if (!reader.IsDBNull(i)) this.EpisodeTypeCode = reader.GetString(i);
                        break;
                    case "EPISODETYPEID":
                        if (!reader.IsDBNull(i)) this.EpisodeTypeId = reader.GetInt64(i);
                        break;
                    case "EPISODEID":
                        if (!reader.IsDBNull(i)) this.EpisodeId = reader.GetString(i);
                        break;
                    case "EPISODEDATE":
                        if (!reader.IsDBNull(i)) this.EpisodeDate = reader.GetDateTime(i);
                        break;
                    case "SERVICEREQ":
                        if (!reader.IsDBNull(i)) this.ServiceReq = reader.GetString(i);
                        break;
                    case "SERVICEEXEC":
                        if (!reader.IsDBNull(i)) this.ServiceExec = reader.GetString(i);
                        break;
                    case "CHILDELEMTYPE":
                        if (!reader.IsDBNull(i)) this.ChildElemType = reader.GetString(i);
                        break;
                    case "DOCUMENTAPPNAME":
                        if (!reader.IsDBNull(i)) this.AppName = reader.GetString(i);
                        break;
                    case "DOCUMENTINSTNAME":
                        if (!reader.IsDBNull(i)) this.InstName = reader.GetString(i);
                        break;
                    case "DOCUMENTTYPENAME":
                        if (!reader.IsDBNull(i)) this.DocTypeName = reader.GetString(i);
                        break;
                    case "DOCUMENTTHUMBQUERY":
                        if (!reader.IsDBNull(i)) this.ThumbUrlQuery = reader.GetString(i);
                        break;
                    case "DOCUMENTTHUMBCLASS":
                        if (!reader.IsDBNull(i)) this.ThumbClass = reader.GetString(i);
                        break;
                    case "DOCUMENTTHUMB":
                        if (!reader.IsDBNull(i)) this.Thumb = (byte[])reader.GetValue(i);
                        break;
                    //case "INSTID":
                    //    if (!reader.IsDBNull(i)) this.InstId = reader.GetInt64(i);
                    //    break;
                    //case "PLACEID":
                    //    if (!reader.IsDBNull(i)) this.PlaceId = reader.GetInt64(i);
                    //    break;
                    //case "APPID":
                    //    if (!reader.IsDBNull(i)) this.AppId = reader.GetInt64(i);
                    //    break;
                    case "DOCTYPEID":
                        if (!reader.IsDBNull(i)) this.DocTypeId = reader.GetInt64(i);
                        break;
                    case "REQSERVID":
                        if (!reader.IsDBNull(i)) this.ReqServId = reader.GetInt64(i);
                        break;
                    case "EXESERVID":
                        if (!reader.IsDBNull(i)) this.ExeServId = reader.GetInt64(i);
                        break;
                    case "DESIREDDATE":
                        if (!reader.IsDBNull(i)) this.DesiredDate = reader.GetDateTime(i);
                        break;
                    case "ASSIGNEDDATE":
                        if (!reader.IsDBNull(i)) this.AssignedDate = reader.GetDateTime(i);
                        break;
                    case "DTPROXCONS":
                        if (!reader.IsDBNull(i)) this.NextConsDate = reader.GetDateTime(i);
                        break;
                    case "ENTITYID":
                        if (!reader.IsDBNull(i)) this.PatEntId = Convert.ToString(reader.GetValue(i));
                        break;
                    case "HASEXTRADOCUMENTS":
                        if (!reader.IsDBNull(i)) this.HasExtraDocuments = Convert.ToString(reader.GetValue(i)).CompareTo("S") == 0 ? true : false;
                        break;
                    case "TERAPEUTICS":
                        if (!reader.IsDBNull(i)) this.Terapeutics = Convert.ToString(reader.GetValue(i));
                        break;

                    case "INSTITUTIONCODE":
                        if (!reader.IsDBNull(i)) this.InstitutionCode = Convert.ToString(reader.GetValue(i));
                        break;
                    case "PLACECODE":
                        if (!reader.IsDBNull(i)) this.PlaceCode = Convert.ToString(reader.GetValue(i));
                        break;
                    case "APPCODE":
                        if (!reader.IsDBNull(i)) this.ApplicationCode = Convert.ToString(reader.GetValue(i));
                        break;
                    case "DOCTYPECODE":
                        if (!reader.IsDBNull(i)) this.DocumentTypeCode = Convert.ToString(reader.GetValue(i));
                        break;

                    case "DOCUMENTURL":
                        if (!reader.IsDBNull(i)) this.DocumentURL = reader.GetString(i); 
                        break;

                    case "DOCUMENTURLTYPE":
                        if (!reader.IsDBNull(i)) this.DocumentURLType = reader.GetString(i);
                        break;
                    case "DOCUMENTTYPEHASFORM":
                        if (!reader.IsDBNull(i)) this.DocumentHasForm = reader.GetString(i) == "S";
                        break;
                    case "DOCUMENTTYPEMANDATORY":
                        if (!reader.IsDBNull(i)) this.DocumentMandatoryForm = reader.GetString(i) == "S";
                        break;
                    case "DOCUMENTFORMDESCRIPTION":
                        if (!reader.IsDBNull(i)) this.DocumentFormDescription = reader.GetString(i);
                        break;
                    case "PATIENTNAME":
                        if (!reader.IsDBNull(i)) this.PatientName = reader.GetString(i);
                        break;
                    case "VIEWED":
                        if (!reader.IsDBNull(i)) this.Viewed = reader.GetString(i);
                        break;
                    case "OBSCANCEL":
                        if (!reader.IsDBNull(i)) this.ObsCancel = reader.GetString(i);
                        break;
                    case "DATACANCEL":
                        if (!reader.IsDBNull(i)) this.DateCancel = reader.GetDateTime(i);
                        break;
                    case "USERCANCEL":
                        if (!reader.IsDBNull(i)) this.UserCancel = reader.GetString(i);
                        break;
                    case "JUSTIFIDCANCEL":
                        if (!reader.IsDBNull(i)) this.JustifIdCancel = reader.GetString(i);
                        break;
                    case "JUSTIFCANCEL":
                        if (!reader.IsDBNull(i)) this.JustifCancel = reader.GetString(i);
                        break;
                    case "JUSTIFCANCELVALOR":
                        if (!reader.IsDBNull(i)) this.JustifCancelValor = reader.GetString(i);
                        break;
                    case "DOCUMENTSTATUSCODE":
                        if (!reader.IsDBNull(i)) this.DocumentStatus = reader.GetString(i);
                        break;
                }
            }

            Cpchs.Eresults.Common.WCF.BusinessEntities.Element elem = new Element(reader, companyDB);
            this.DocumentElements = new ElementList();
            this.DocumentElements.Items.Add(elem);

            //Cpchs.Eresults.Common.WCF.BusinessEntities.RequisitionDetails re = new RequisitionDetails(reader, companyDB);
            //this.RequisicaoDet = re;

            //Cpchs.Eresults.Common.WCF.BusinessEntities.RequestDetails req = new RequestDetails(reader, companyDB);
            //this.PedidoDet = req;

            //Cpchs.Eresults.Common.WCF.BusinessEntities.PersHosp pers = new PersHosp(reader, CompanyDB);
            //this.Doctor = pers;
        }
		
        /// <summary>
        /// Initialize a new  Document object with the given parameters.
        /// </summary>
        public  Document(long documentParentId, string documentRef, long documentInst, long documentLocal, long documentApp, long documentType, string documentTitle, string documentDescription, string documentExternalScope, string documentExternalId, DateTime? documentDate, string documentPublic, string documentStatus, DateTime? documentMinValDate, DateTime? documentMaxValDate, long documentTipoElem, long documentStatusId, DateTime? documentExecutionDate, DateTime? documentValidationDate, DateTime? documentEmissionDate) : base(documentParentId, documentRef, documentInst, documentLocal, documentApp, documentType, documentTitle, documentDescription, documentExternalScope, documentExternalId, documentDate, documentPublic, documentStatus, documentMinValDate, documentMaxValDate, documentTipoElem, documentStatusId, documentExecutionDate, documentValidationDate, documentEmissionDate)
        {
        }
		
        public Document(long documentId) : base(documentId)
        {
			
        }
	}


    public class DocumentThumb
    {
        public byte[] Thumb { get; set; }
        public long DocumentId
        {
            get;
            set;
        }

        public DocumentThumb(IDataReader reader, string companyDB) 
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                {
                    case "DOCUMENTTHUMB":
                        if (!reader.IsDBNull(i)) this.Thumb = (byte[])reader.GetValue(i);
                        break;
                    case "DOCUMENTID":
                        if (!reader.IsDBNull(i)) this.DocumentId = reader.GetInt64(i);
                        break;
                }
            }
        }
    }
}


