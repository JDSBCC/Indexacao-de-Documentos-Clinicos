
using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using System.Data.OracleClient;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Cpchs.Eresults.Common.WCF.Exceptions;
using System.Collections.Generic;
using System.Globalization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: sexta-feira, 26 de Dezembro de 2008
    /// Created By: Generated by CodeSmith
		/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public sealed class DocumentManagementBER : DocumentManagementBER_GEN
    {
		#region Singleton
		private static DocumentManagementBER instance = new DocumentManagementBER();
		
		public static DocumentManagementBER Instance
		{
			get { return instance; }
		}
		#endregion
		
        private DocumentManagementBER()
		{
		}

        protected override string UpdateElementReportInfoDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string CancelDocumentByUniqueIdDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string CancelElementDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocTypeDescDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetAllDocTypesDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetAllHierarchyForDocumentDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocTypesForExternalAccessDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetHierarchyForExternalAccessDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetPatientDocumentsDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetPatientDocumentsV2DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocumentsByMultiCriteriaDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocumentsByMultiCriteriaV2DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocumentsByMultiCriteriaV2DBMethodName
        {
            get { return "GetDocumentsByMultiCriteriaV3"; }
        }

        protected override string GetPatientDocumentsMultiDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocumentsByDocRefDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string GetDocumentsByDocRefV2DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected override string InsertNewDocumentRequestDBPackageName
        {
            get
            {
                return "PCK_DOCUMENTS_REQUISITION";
            }
        }

        protected override string  InsertNewDocumentRequisitionDBPackageName
        {
            get
            {
                return "PCK_DOCUMENTS_REQUISITION";
            }
        }

        protected override string GetPatReqForServicesDBPackageName
        {
            get
            {
                return "PCK_DOCUMENTS_REQUISITION";
            }
        }

        protected override string GetPatReqForServicesMultiDBPackageName
        {
            get
            {
                return "PCK_DOCUMENTS_REQUISITION";
            }
        }

        protected override string PromoteDocumentToPublicDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }


        #region GetDocumentsByMultiCriteriaV3
        protected string GetDocumentsByMultiCriteriaV3DBMethod(string companyDB)
        {
            string proc = GetDocumentsByMultiCriteriaV3DBMethodName;
            string package = GetDocumentsByMultiCriteriaV3DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetDocumentsByMultiCriteriaV3DBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }

        protected string GetDocumentsByMultiCriteriaV3DBMethodName
        {
            get { return "GetDocumentsByMultiCriteriaV4"; }
        }


        protected IDataReader GetDocumentsByMultiCriteriaV3DB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsByMultiCriteriaV3DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }


        public  DocumentList GetDocumentsByMultiCriteriaV3(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, ref long? resultsCount)
        {
            IDataReader reader = GetDocumentsByMultiCriteriaV3DB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, ref resultsCount);

            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        #endregion GetDocumentsByMultiCriteriaV3
        

        #region RegisterDocumentAccess

        public void RegisterDocumentAccess(string companyDb, string sessionId, long? userId, string userName, long docId, string docRef, long artifactId, long versionId, long appOrigin, long docType)
        {
            try
            {
                RegisterDocumentAccessDB(companyDb, sessionId, userId, userName, docId, docRef, artifactId, versionId, appOrigin, docType);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow) throw;
            }
        }

        private void RegisterDocumentAccessDB(string companyDb, string sessionId, long? userId, string userName, long docId, string docRef, long artifactId, long versionId, long appOrigin, long docType)
        {
            try
            {
                string dbMethod = RegisterDocumentAccessDBMethod(companyDb);
                dal.ExecuteNonQuery(dbMethod, sessionId, userId, userName, docId, docRef, artifactId, versionId, appOrigin, docType);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow) { throw; }
            }
        }

        private string RegisterDocumentAccessDBMethod(string companyDB)
        {
            string proc = "RegisterDocumentAccessAction";
            string package = "PCK_DOCUMENTS_DOCUMENT";
            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);
            /*if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
                proc = package + "." + proc;
            else
                proc = package + "_" + proc;*/

            return proc;
        }
        
        #endregion

        #region CancelDocument

        public void CancelDocument(string companyDb, string institution, string place, string application, string documentType, string documentExtId)
        {
            try
            {
                CancelDocumentDB(companyDb, institution, place, application, documentType, documentExtId);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow) throw;
            }
        }

        private void CancelDocumentDB(string companyDb, string institution, string place, string application, string documentType, string documentExtId)
        {
            try
            {
                string dbMethod = CancelDocumentDBMethod(companyDb);
                dal.ExecuteNonQuery(dbMethod, institution, place, application, documentType, documentExtId);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow) { throw; }
            }
        }

        private string CancelDocumentDBMethod(string companyDB)
        {
            string proc = "CancelDocument";
            string package = "PCK_DOCUMENTS_DOCUMENT";
            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;

            return proc;
        }


        public void CancelDocumentV2(string companyDb, string institution, string place, string application, string documentType, string documentExtId, string observations, string justificationId, string username)
        {
            try
            {
                CancelDocumentV2DB(companyDb, institution, place, application, documentType, documentExtId, observations, justificationId, username);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow) throw;
            }
        }

        private void CancelDocumentV2DB(string companyDb, string institution, string place, string application, string documentType, string documentExtId, string observations, string justificationId, string username)
        {
            try
            {
                string dbMethod = CancelDocumentV2DBMethod(companyDb);
                dal.ExecuteNonQuery(dbMethod, institution, place, application, documentType, documentExtId, observations, justificationId, username);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow) { throw; }
            }
        }

        private string CancelDocumentV2DBMethod(string companyDB)
        {
            string proc = "CancelDocumentV2";
            string package = "PCK_DOCUMENTS_DOCUMENT";
            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;

            return proc;
        }
        #endregion CancelDocument

        #region CancelDocumentVersion

        public void CancelDocumentVersion(string companyDb, string institution, string place, string application, string documentType, string documentExtId)
        {
            try
            {
                CancelDocumentVersionDB(companyDb, institution, place, application, documentType, documentExtId);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow) throw;
            }
        }

        private void CancelDocumentVersionDB(string companyDb, string institution, string place, string application, string documentType, string documentExtId)
        {
            try
            {
                string dbMethod = CancelDocumentVersionDBMethod(companyDb);
                dal.ExecuteNonQuery(dbMethod, institution, place, application, documentType, documentExtId);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow) { throw; }
            }
        }

        private string CancelDocumentVersionDBMethod(string companyDB)
        {
            string proc = "CancelDocumentVersion";
            string package = "PCK_DOCUMENTS_DOCUMENT";
            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;

            return proc;
        }

        public void CancelDocumentVersionV2(string companyDb, string institution, string place, string application, string documentType, string documentExtId, string observations, string justificationId, string username)
        {
            try
            {
                CancelDocumentVersionV2DB(companyDb, institution, place, application, documentType, documentExtId, observations, justificationId, username);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                if (rethrow) throw;
            }
        }

        private void CancelDocumentVersionV2DB(string companyDb, string institution, string place, string application, string documentType, string documentExtId, string observations, string justificationId, string username)
        {
            try
            {
                string dbMethod = CancelDocumentVersionV2DBMethod(companyDb);
                dal.ExecuteNonQuery(dbMethod, institution, place, application, documentType, documentExtId, observations, justificationId, username);
            }
            catch (Exception ex)
            {
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow) { throw; }
            }
        }

        private string CancelDocumentVersionV2DBMethod(string companyDB)
        {
            string proc = "CancelDocumentVersionV2";
            string package = "PCK_DOCUMENTS_DOCUMENT";
            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;

            return proc;
        }

        #endregion CancelDocument

        #region GetDocumentsThumbs

        public List<DocumentThumb> GetDocumentsThumbs(string companyDB, List<long> documentids)
        {
            List<DocumentThumb> list = new List<DocumentThumb>();
            if (documentids == null || documentids.Count == 0)
                return list;

            string ids = string.Empty;
            foreach (var item in documentids)
            {
                ids += item + ",";
            }
            ids = ids.Substring(0, ids.Length - 1);


            IDataReader reader = GetDocumentsThumbsDB(companyDB, ids);
            while (reader.Read())
            {
                try
                {
                    list.Add(new DocumentThumb(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected string GetDocumentsThumbsDBMethod(string companyDB)
        {
            string proc = GetDocumentsThumbsDBMethodName;
            string package = GetDocumentsThumbsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetDocumentsThumbsDBMethodName
        {
            get { return "GetDocumentsThumbs"; }
        }

        protected string GetDocumentsThumbsDBPackageName
        {
            get { return "PCK_DOCUMENTS_DOCUMENT"; }
        }


        protected IDataReader GetDocumentsThumbsDB(string companyDB, string documentids)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsThumbsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentids, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }


        #endregion

        #region GetDocs
        public DocumentList GetDocs(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultsCount)
        {
            IDataReader reader = GetDocsDB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, patientId, patientType, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, ref resultsCount);

            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected string GetDocsDBMethod(string companyDB)
        {
            string proc = GetDocsDBMethodName;
            string package = GetDocsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetDocsDBMethodName
        {
            get { return "GetDocumentsByMultiCriteria"; }
        }

        protected string GetDocsDBPackageName
        {
            get { return "PCK_ER_DOCS"; }
        }


        protected IDataReader GetDocsDB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patientId, patientType, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }
        #endregion

        protected string GetDocumentsToCancelDBMethodDBMethodName
        {
            get { return "GetDocumentsToCancel"; }
        }

        protected string GetDocumentsToCancelDBMethodDBPackageName
        {
            get { return "PCK_ER_DOCS"; }
        }

        protected string GetDocumentsToCancelDBMethod(string companyDB)
        {
            string proc = GetDocumentsToCancelDBMethodDBMethodName;
            string package = GetDocumentsToCancelDBMethodDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected IDataReader GetDocumentsToCancelDB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocumentsToCancelDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patientId, patientType, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        public DocumentList GetDocumentsToCancel(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultsCount)
        {
            IDataReader reader = GetDocumentsToCancelDB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, patientId, patientType, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, ref resultsCount);

            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        public DocumentList GetGeneralDocuments(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultsCount)
        {
            IDataReader reader = GetGeneralDocumentsDB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, patientId, patientType, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, ref resultsCount);

            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected string GetGeneralDocumentsDBMethod(string companyDB)
        {
            string proc = GetGeneralDocumentsDBMethodName;
            string package = GetGeneralDocumentsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetGeneralDocumentsDBMethodName
        {
            get { return "GetGeneralDocuments"; }
        }

        protected string GetGeneralDocumentsDBPackageName
        {
            get { return "PCK_ER_DOCS"; }
        }

        protected IDataReader GetGeneralDocumentsDB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetGeneralDocumentsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patientId, patientType, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;

        }

        public DocumentList GetCancelledDocuments(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, Nullable<DateTime> cancelDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultsCount)
        {
            IDataReader reader = GetCancelledDocumentsDB(companyDB, documentRef, documentExternalId, entitiesIds, episodeType, episodeId, patientId, patientType, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, cancelDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, ref resultsCount);

            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected string GetCancelledDocumentsDBMethod(string companyDB)
        {
            string proc = GetCancelledDocumentsDBMethodName;
            string package = GetCancelledDocumentsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetCancelledDocumentsDBMethodName
        {
            get { return "GetCancelledDocuments"; }
        }

        protected string GetCancelledDocumentsDBPackageName
        {
            get { return "PCK_ER_DOCS"; }
        }

        protected IDataReader GetCancelledDocumentsDB(string companyDB, string documentRef, string documentExternalId, string entitiesIds, string episodeType, string episodeId, string patientId, string patientType, Nullable<DateTime> episodeStartDate, Nullable<DateTime> episodeEndDate, string institution, string place, string application, string documentType, Nullable<DateTime> executionStartDate, Nullable<DateTime> executionEndDate, Nullable<DateTime> validationStartDate, Nullable<DateTime> validationEndDate, Nullable<DateTime> emissionStartDate, Nullable<DateTime> emissionEndDate, Nullable<DateTime> cancelDate, string reqService, string execService, string globalFilters, string docsSession, string servsSession, string username, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string report, string isPublic, long? workspaceId, string filterString, string period, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetCancelledDocumentsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, documentRef, documentExternalId, patientId, patientType, entitiesIds, episodeType, episodeId, episodeStartDate, episodeEndDate, institution, place, application, documentType, executionStartDate, executionEndDate, validationStartDate, validationEndDate, emissionStartDate, emissionEndDate, cancelDate, reqService, execService, globalFilters, docsSession, servsSession, username, pageNumber, itemsPerPage, orderField, orderType, report, isPublic, workspaceId, filterString, period, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;

        }

        #region GetDynamicForm
        public string GetDynamicForm(string companyDB, string application, string doctype, string filter, string user)
        {
            string url = string.Empty;
            IDataReader reader = GetDynamicFormDB(companyDB, application, doctype, filter, user, ref url);

            return url;
        }

        protected string GetDynamicFormDBMethod(string companyDB)
        {
            string proc = GetDynamicFormDBMethodName;
            string package = GetDynamicFormDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetDynamicFormDBMethodName
        {
            get { return "GetDynamicForm"; }
        }

        protected string GetDynamicFormDBPackageName
        {
            get { return "PCK_ER_DOCS"; }
        }


        protected IDataReader GetDynamicFormDB(string companyDB, string application, string doctype, string filter, string user, ref string url)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDynamicFormDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, application, doctype, filter, user, DBNull.Value);
                dal.ExecuteNonQuery(dbCommand);

                url = Convert.ToString(GetParameterValue(dal, dbCommand, "p_url"));
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                url = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }
        #endregion


        #region UpdateElement
        protected string UpdateElementDescriptionDBMethodName
        {
            get { return "UpdateElementDescription"; }
        }

        protected string UpdateElementDescriptionDBPackageName
        {
            get { return "PCK_Er_Docs"; }
        }

       

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
        public void UpdateElementDescription(string companyDB, DbTransaction transaction, long elementId, string title, string description)
        {
            try
            {
                string dbMethod = UpdateElementDescriptionDBMethod(companyDB);
                int rowsAffected = 0;
                DbCommand dbCommand = dal.GetStoredProcCommand(dbMethod, UpdateElementDescriptionDBParameters(elementId, title, description));

                //UpdateDocInfoDBPreQuery(dbCommand, obj);

                rowsAffected = (transaction != null) ?
                    dal.ExecuteNonQuery(dbCommand, transaction) :
                    dal.ExecuteNonQuery(dbCommand);

                //UpdateDocInfoDBPosQuery(dbCommand, obj);

            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
        }

        //
        protected string UpdateElementDescriptionDBMethod(string companyDB)
        {
            string proc = UpdateElementDescriptionDBMethodName;
            string package = UpdateElementDescriptionDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);
            //if (dal is Microsoft.Practices.EnterpriseLibrary.Data.Oracle.OracleDatabase)
            //    proc = package + "." + proc;
            //else
            //    proc = package + "_" + proc;

            return proc;
        }

        //Parametros 
        private object[] UpdateElementDescriptionDBParameters(long elementId, string title, string description)
        {
            ArrayList finalParameters = new ArrayList();

            object[] standardParameters = new object[]{
                elementId,
                title,
                description
            };

            finalParameters.AddRange(standardParameters);

            return finalParameters.ToArray();
        }


        #endregion
    }
}


