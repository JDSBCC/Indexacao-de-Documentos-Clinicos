
using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using System.Data.OracleClient;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Cpchs.Eresults.Common.WCF.Exceptions;
using System.Collections.Generic;
using System.Globalization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: sexta-feira, 26 de Dezembro de 2008
    /// Created By: Generated by CodeSmith
		/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public sealed class DocumentManagementEPRBER : DocumentManagementBER_GEN
    {
		#region Singleton
		private static DocumentManagementEPRBER instance = new DocumentManagementEPRBER();
		
		public static DocumentManagementEPRBER Instance
		{
			get { return instance; }
		}
		#endregion

        private DocumentManagementEPRBER()
		{
		}
        
        #region GetDocs
        public DocumentList GetDocs(string companyDB, string episodeType, string episodeId, string patientId, string patientType, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string period, string eResultsVersion, ref long? resultsCount)
        {
            IDataReader reader = GetDocsDB(companyDB, episodeType, episodeId, patientId, patientType, pageNumber, itemsPerPage, orderField, orderType, period, eResultsVersion, ref resultsCount);

            DocumentList list = new DocumentList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Document(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected string GetDocsDBMethod(string companyDB)
        {
            string proc = GetDocsDBMethodName;
            string package = GetDocsDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }


        //USADO PELO EPRMOBILE
        protected string GetDocsDBMethodName
        {
            get { return "GetDocumentsForEPR"; }
        }

        protected string GetDocsDBPackageName
        {
            get { return "PCK_EPRMOBILE_ERESULTS_DOCS"; }
        }


        protected IDataReader GetDocsDB(string companyDB, string episodeType, string episodeId, string patientId, string patientType, long? pageNumber, long? itemsPerPage, string orderField, string orderType, string period, string eResultsVersion, ref long? resultCount)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetDocsDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, patientId, patientType, episodeType, episodeId, pageNumber, itemsPerPage, orderField, orderType, period, DBNull.Value, resultCount);
                ret = dal.ExecuteReader(dbCommand);

                resultCount = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_resultCount"), CultureInfo.CurrentCulture);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                resultCount = null;
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }
        #endregion

    }
}


