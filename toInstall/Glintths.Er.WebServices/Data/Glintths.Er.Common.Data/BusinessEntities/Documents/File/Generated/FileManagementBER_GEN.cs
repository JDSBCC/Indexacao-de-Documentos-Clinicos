
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: sexta-feira, 21 de Maio de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class FileManagementBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		
		#region Variables
		#endregion
	
		protected FileManagementBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("DocumentsWCF");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}
	
    #region TABLES OPERATIONS
	
		#region Cache FILE
		#endregion
	
	
		#region Select FILE Operations
		//
		//SELECT OPERATIONS FILE
		//
		//
		//
		//
		public virtual FileList GetDocumentFiles(string companyDB, long docId )
		{
			IDataReader reader = GetDocumentFilesDB(companyDB, docId );
			FileList list = new FileList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new File(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual File GetFileByElementId(string companyDB, long fileElemId)
		{
			IDataReader reader = GetFileByElementIdDB(companyDB, fileElemId);
			File obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new File(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string GetDocumentFilesDBMethod(string companyDB)
		{
			string proc = GetDocumentFilesDBMethodName;
            string package = GetDocumentFilesDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetDocumentFilesDBMethodName
		{
            get { return "GetDocumentFiles"; }
        }
		
        protected virtual string GetDocumentFilesDBPackageName
		{
            get { return "PCK_DOCUMENTS_FILE_GEN"; }
        }

		
		protected virtual IDataReader GetDocumentFilesDB(string companyDB, long docId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetDocumentFilesDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, docId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetFileByElementIdDBMethod(string companyDB)
		{
			string proc = GetFileByElementIdDBMethodName;
            string package = GetFileByElementIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetFileByElementIdDBMethodName
		{
            get { return "GetFileByElementId"; }
        }
		
        protected virtual string GetFileByElementIdDBPackageName
		{
            get { return "PCK_DOCUMENTS_FILE_GEN"; }
        }

		
		protected virtual IDataReader GetFileByElementIdDB(string companyDB, long fileElemId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetFileByElementIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, fileElemId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
    
    #endregion
    
    #region OBJECTS OPERATIONS
    
    #endregion
	
    }
}


