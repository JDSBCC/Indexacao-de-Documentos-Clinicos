using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;


namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 29 de Outubro de 2008
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class File_GEN : AbstractEntity
    {	
		#region Variables
	
		private string key;
		
		private long fileElemId; ///
		private long fileVersionCode; ///
		private string filePath; ///
		private string fileThumbPath; ///
		private string fileOriginalName; ///
		private string fileEncrypted; ///
		private string fileXmlInfo; ///
		private object fileStream; ///
		private object fileThumbStream; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty File object.
        /// </summary>
        public File_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty File object.
        /// </summary>
        public File_GEN(long fileElemId, long fileVersionCode) : base(ObjectState.Added, null) 
        {
			this.fileElemId = fileElemId;
			this.fileVersionCode = fileVersionCode;
			this.key = BuildKey(fileElemId.ToString(CultureInfo.CurrentCulture) + "_" +fileVersionCode.ToString(CultureInfo.CurrentCulture));
        }
		/// <summary>
        /// Initialize an new empty File object.
        /// </summary>
        public File_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
			this.key = BuildKey(fileElemId.ToString(CultureInfo.CurrentCulture) + "_" +fileVersionCode.ToString(CultureInfo.CurrentCulture));
        }
		
        /// <summary>
        /// Initialize a new  File object with the given parameters.
        /// </summary>
        public  File_GEN(long fileElemId, long fileVersionCode, string filePath, string fileThumbPath, string fileOriginalName, string fileEncrypted, string fileXmlInfo, object fileStream, object fileThumbStream) : base(ObjectState.Added, null) 
        {	 
			this.fileElemId = fileElemId;
			this.fileVersionCode = fileVersionCode;
			this.filePath = filePath;
			this.fileThumbPath = fileThumbPath;
			this.fileOriginalName = fileOriginalName;
			this.fileEncrypted = fileEncrypted;
			this.fileXmlInfo = fileXmlInfo;
			this.fileStream = fileStream;
			this.fileThumbStream = fileThumbStream;
			this.key = BuildKey(fileElemId.ToString(CultureInfo.CurrentCulture) + "_" +fileVersionCode.ToString(CultureInfo.CurrentCulture));
        }
		#endregion
		
		#region Properties
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
		public string FileKey
		{
			get { return this.key; }
		}
	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long FileElemId
        {
            get { return this.fileElemId; }
            set { 
				if(this.fileElemId != value) {
					DataStateChanged(ObjectState.Modified, "FileElemId");
            		this.fileElemId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long FileVersionCode
        {
            get { return this.fileVersionCode; }
            set { 
				if(this.fileVersionCode != value) {
					DataStateChanged(ObjectState.Modified, "FileVersionCode");
            		this.fileVersionCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FilePath
        {
            get { return this.filePath; }
            set { 
				if(this.filePath != value) {
					DataStateChanged(ObjectState.Modified, "FilePath");
            		this.filePath = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FileThumbPath
        {
            get { return this.fileThumbPath; }
            set { 
				if(this.fileThumbPath != value) {
					DataStateChanged(ObjectState.Modified, "FileThumbPath");
            		this.fileThumbPath = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FileOriginalName
        {
            get { return this.fileOriginalName; }
            set { 
				if(this.fileOriginalName != value) {
					DataStateChanged(ObjectState.Modified, "FileOriginalName");
            		this.fileOriginalName = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FileEncrypted
        {
            get { return this.fileEncrypted; }
            set { 
				if(this.fileEncrypted != value) {
					DataStateChanged(ObjectState.Modified, "FileEncrypted");
            		this.fileEncrypted = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string FileXmlInfo
        {
            get { return this.fileXmlInfo; }
            set { 
				if(this.fileXmlInfo != value) {
					DataStateChanged(ObjectState.Modified, "FileXmlInfo");
            		this.fileXmlInfo = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public object FileStream
        {
            get { return this.fileStream; }
            set { 
				if(this.fileStream != value) {
					DataStateChanged(ObjectState.Modified, "FileStream");
            		this.fileStream = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public object FileThumbStream
        {
            get { return this.fileThumbStream; }
            set { 
				if(this.fileThumbStream != value) {
					DataStateChanged(ObjectState.Modified, "FileThumbStream");
            		this.fileThumbStream = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "FILEELEMID":
							if (!reader.IsDBNull(i)) this.fileElemId = reader.GetInt64(i);
							break;
						case "FILEVERSIONCODE":
							if (!reader.IsDBNull(i)) this.fileVersionCode = reader.GetInt64(i);
							break;
						case "FILEPATH":
							if (!reader.IsDBNull(i)) this.filePath = Convert.ToString(reader.GetValue(i));
							break;
						case "FILETHUMBPATH":
							if (!reader.IsDBNull(i)) this.fileThumbPath = Convert.ToString(reader.GetValue(i));
							break;
						case "FILEORIGINALNAME":
							if (!reader.IsDBNull(i)) this.fileOriginalName = Convert.ToString(reader.GetValue(i));
							break;
						case "FILEENCRYPTED":
							if (!reader.IsDBNull(i)) this.fileEncrypted = Convert.ToString(reader.GetValue(i));
							break;
						case "FILEXMLINFO":
							if (!reader.IsDBNull(i)) this.fileXmlInfo = Convert.ToString(reader.GetValue(i));
							break;
						case "FILESTREAM":
							if (!reader.IsDBNull(i)) this.fileStream = reader.GetValue(i);
							break;
						case "FILETHUMBSTREAM":
							if (!reader.IsDBNull(i)) this.fileThumbStream = reader.GetValue(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			File file = obj as File;
			if (file == null)
				return false;
			return file.FileVersionCode == FileVersionCode;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		internal static string BuildKey(string key)
		{
			return "File_" + key;
		}
		
		#endregion
    }
}


