using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 4 de Janeiro de 2011
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class LinkType_GEN : AbstractEntity
    {	
		#region Variables
		
		private long linkTypeId = 0; ///
		private string linkTypeCode = string.Empty; ///
		private string linkTypeAcronym = string.Empty; ///
		private string linkTypeDesc = string.Empty; ///
		private string linkTypeLink = string.Empty; ///
		private string linkTypeEncrypt = string.Empty; ///
		private string linkTypeSeparator = string.Empty; ///
		private string linkTypeOpenExternally = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty LinkType object.
        /// </summary>
        public LinkType_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty LinkType object.
        /// </summary>
        public LinkType_GEN(long linkTypeId) 
			: base(ObjectState.Added , null) 
        {
			this.linkTypeId = linkTypeId;
        }
		/// <summary>
        /// Initialize an new empty LinkType object.
        /// </summary>
        public LinkType_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  LinkType object with the given parameters.
        /// </summary>
        public  LinkType_GEN(long linkTypeId, string linkTypeCode, string linkTypeAcronym, string linkTypeDesc, string linkTypeLink, string linkTypeEncrypt, string linkTypeSeparator, string linkTypeOpenExternally) 
			: base(ObjectState.Added, null) 
        {	 
			this.linkTypeId = linkTypeId;
			this.linkTypeCode = linkTypeCode;
			this.linkTypeAcronym = linkTypeAcronym;
			this.linkTypeDesc = linkTypeDesc;
			this.linkTypeLink = linkTypeLink;
			this.linkTypeEncrypt = linkTypeEncrypt;
			this.linkTypeSeparator = linkTypeSeparator;
			this.linkTypeOpenExternally = linkTypeOpenExternally;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LinkTypeId
        {
            get { return this.linkTypeId; }
            set { 
				if(this.linkTypeId != value) {
					this.linkTypeId = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeCode
        {
            get { return this.linkTypeCode; }
            set { 
				if(this.linkTypeCode != value) {
					this.linkTypeCode = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeCode");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeAcronym
        {
            get { return this.linkTypeAcronym; }
            set { 
				if(this.linkTypeAcronym != value) {
					this.linkTypeAcronym = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeAcronym");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeDesc
        {
            get { return this.linkTypeDesc; }
            set { 
				if(this.linkTypeDesc != value) {
					this.linkTypeDesc = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeDesc");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeLink
        {
            get { return this.linkTypeLink; }
            set { 
				if(this.linkTypeLink != value) {
					this.linkTypeLink = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeLink");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeEncrypt
        {
            get { return this.linkTypeEncrypt; }
            set { 
				if(this.linkTypeEncrypt != value) {
					this.linkTypeEncrypt = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeEncrypt");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeSeparator
        {
            get { return this.linkTypeSeparator; }
            set { 
				if(this.linkTypeSeparator != value) {
					this.linkTypeSeparator = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeSeparator");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeOpenExternally
        {
            get { return this.linkTypeOpenExternally; }
            set { 
				if(this.linkTypeOpenExternally != value) {
					this.linkTypeOpenExternally = value;
					DataStateChanged(ObjectState.Modified, "LinkTypeOpenExternally");
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
		
		protected void LoadLinkType_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "LINKTYPEID":
							if (!reader.IsDBNull(i)) this.linkTypeId = reader.GetInt64(i);
							break;
						case "LINKTYPECODE":
							if (!reader.IsDBNull(i)) this.linkTypeCode = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEACRONYM":
							if (!reader.IsDBNull(i)) this.linkTypeAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEDESC":
							if (!reader.IsDBNull(i)) this.linkTypeDesc = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPELINK":
							if (!reader.IsDBNull(i)) this.linkTypeLink = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEENCRYPT":
							if (!reader.IsDBNull(i)) this.linkTypeEncrypt = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPESEPARATOR":
							if (!reader.IsDBNull(i)) this.linkTypeSeparator = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEOPENEXTERNALLY":
							if (!reader.IsDBNull(i)) this.linkTypeOpenExternally = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			LinkType linktype = obj as LinkType;
			if (linktype == null)
				return false;
			return linktype.LinkTypeId == LinkTypeId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


