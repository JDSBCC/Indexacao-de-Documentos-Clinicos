using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: s?bado, 28 de Novembro de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class LinkTypeArg_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long linkTypeArgLinkTypeId; ///
		private long linkTypeArgId; ///
		private string linkTypeArgArg; ///
		private string linkTypeArgMask; ///
		private string linkTypeArgStatic; ///
		private string linkTypeArgExternal; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty LinkTypeArg object.
        /// </summary>
        public LinkTypeArg_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty LinkTypeArg object.
        /// </summary>
        public LinkTypeArg_GEN(long linkTypeArgLinkTypeId, long linkTypeArgId) : base(ObjectState.Added, null) 
        {
			this.linkTypeArgLinkTypeId = linkTypeArgLinkTypeId;
			this.linkTypeArgId = linkTypeArgId;
        }
		/// <summary>
        /// Initialize an new empty LinkTypeArg object.
        /// </summary>
        public LinkTypeArg_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  LinkTypeArg object with the given parameters.
        /// </summary>
        public  LinkTypeArg_GEN(long linkTypeArgLinkTypeId, long linkTypeArgId, string linkTypeArgArg, string linkTypeArgMask, string linkTypeArgStatic, string linkTypeArgExternal) : base(ObjectState.Added, null) 
        {	 
			this.linkTypeArgLinkTypeId = linkTypeArgLinkTypeId;
			this.linkTypeArgId = linkTypeArgId;
			this.linkTypeArgArg = linkTypeArgArg;
			this.linkTypeArgMask = linkTypeArgMask;
			this.linkTypeArgStatic = linkTypeArgStatic;
			this.linkTypeArgExternal = linkTypeArgExternal;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LinkTypeArgLinkTypeId
        {
            get { return this.linkTypeArgLinkTypeId; }
            set { 
				if(this.linkTypeArgLinkTypeId != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeArgLinkTypeId");
            		this.linkTypeArgLinkTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LinkTypeArgId
        {
            get { return this.linkTypeArgId; }
            set { 
				if(this.linkTypeArgId != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeArgId");
            		this.linkTypeArgId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeArgArg
        {
            get { return this.linkTypeArgArg; }
            set { 
				if(this.linkTypeArgArg != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeArgArg");
            		this.linkTypeArgArg = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeArgMask
        {
            get { return this.linkTypeArgMask; }
            set { 
				if(this.linkTypeArgMask != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeArgMask");
            		this.linkTypeArgMask = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeArgStatic
        {
            get { return this.linkTypeArgStatic; }
            set { 
				if(this.linkTypeArgStatic != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeArgStatic");
            		this.linkTypeArgStatic = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkTypeArgExternal
        {
            get { return this.linkTypeArgExternal; }
            set { 
				if(this.linkTypeArgExternal != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeArgExternal");
            		this.linkTypeArgExternal = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "LINKTYPEARGLINKTYPEID":
							if (!reader.IsDBNull(i)) this.linkTypeArgLinkTypeId = reader.GetInt64(i);
							break;
						case "LINKTYPEARGID":
							if (!reader.IsDBNull(i)) this.linkTypeArgId = reader.GetInt64(i);
							break;
						case "LINKTYPEARGARG":
							if (!reader.IsDBNull(i)) this.linkTypeArgArg = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEARGMASK":
							if (!reader.IsDBNull(i)) this.linkTypeArgMask = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEARGSTATIC":
							if (!reader.IsDBNull(i)) this.linkTypeArgStatic = Convert.ToString(reader.GetValue(i));
							break;
						case "LINKTYPEARGEXTERNAL":
							if (!reader.IsDBNull(i)) this.linkTypeArgExternal = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			LinkTypeArg linktypearg = obj as LinkTypeArg;
			if (linktypearg == null)
				return false;
			return linktypearg.LinkTypeArgId == LinkTypeArgId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


