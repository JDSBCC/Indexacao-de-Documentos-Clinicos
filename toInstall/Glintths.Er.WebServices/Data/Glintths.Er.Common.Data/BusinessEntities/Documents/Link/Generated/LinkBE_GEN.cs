using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 14 de Outubro de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Link_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long linkElemId; ///
		private long linkVersionCode; ///
		private long linkTypeId; ///
		private string linkDesc; ///
		
		private LinkType linkTypeBE = new LinkType();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Link object.
        /// </summary>
        public Link_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Link object.
        /// </summary>
        public Link_GEN(long linkElemId, long linkVersionCode) : base(ObjectState.Added, null) 
        {
			this.linkElemId = linkElemId;
			this.linkVersionCode = linkVersionCode;
        }
		/// <summary>
        /// Initialize an new empty Link object.
        /// </summary>
        public Link_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Link object with the given parameters.
        /// </summary>
        public  Link_GEN(long linkElemId, long linkVersionCode, long linkTypeId, string linkDesc) : base(ObjectState.Added, null) 
        {	 
			this.linkElemId = linkElemId;
			this.linkVersionCode = linkVersionCode;
			this.linkTypeId = linkTypeId;
			this.linkDesc = linkDesc;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LinkElemId
        {
            get { return this.linkElemId; }
            set { 
				if(this.linkElemId != value) {
					DataStateChanged(ObjectState.Modified, "LinkElemId");
            		this.linkElemId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LinkVersionCode
        {
            get { return this.linkVersionCode; }
            set { 
				if(this.linkVersionCode != value) {
					DataStateChanged(ObjectState.Modified, "LinkVersionCode");
            		this.linkVersionCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long LinkTypeId
        {
            get { return this.linkTypeId; }
            set { 
				if(this.linkTypeId != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeId");
            		this.linkTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string LinkDesc
        {
            get { return this.linkDesc; }
            set { 
				if(this.linkDesc != value) {
					DataStateChanged(ObjectState.Modified, "LinkDesc");
            		this.linkDesc = value;
				}
			}
		}
		
		
		
		public LinkType LinkTypeBE
		{
			get { return this.linkTypeBE; }
			set { 
				if(this.linkTypeBE != value) {
					DataStateChanged(ObjectState.Modified, "LinkTypeBE");
            				this.linkTypeBE = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "LINKELEMID":
							if (!reader.IsDBNull(i)) this.linkElemId = reader.GetInt64(i);
							break;
						case "LINKVERSIONCODE":
							if (!reader.IsDBNull(i)) this.linkVersionCode = reader.GetInt64(i);
							break;
						case "LINKTYPEID":
							if (!reader.IsDBNull(i)) this.linkTypeId = reader.GetInt64(i);
							break;
						case "LINKDESC":
							if (!reader.IsDBNull(i)) this.linkDesc = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Link link = obj as Link;
			if (link == null)
				return false;
			return link.LinkVersionCode == LinkVersionCode;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


