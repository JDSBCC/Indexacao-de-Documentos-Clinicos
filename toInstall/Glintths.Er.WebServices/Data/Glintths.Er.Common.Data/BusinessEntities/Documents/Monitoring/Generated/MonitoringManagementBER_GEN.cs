
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 30 de Dezembro de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class MonitoringManagementBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		#region Variables
		#endregion
	
		protected MonitoringManagementBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("DocumentsWCF");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}
	
	
		#region Cache DOCUMENTLOG
		#endregion
	
	
		#region Select DOCUMENTLOG Operations
		//
		//SELECT OPERATIONS DOCUMENTLOG
		//
		//
		//
		//
		public virtual DocumentLogList GetDocLogsByMultiCriteria(string companyDB, long? patTypeId,string patId,long? epiTypeId,string epiId,long? instId,long? placeId,long? appId,long? docTypeId,string doc,Nullable<DateTime> docDateBegin,Nullable<DateTime> docDateEnd,Nullable<DateTime> arrivDateBegin,Nullable<DateTime> arrivDateEnd,Nullable<DateTime> procDateBegin,Nullable<DateTime> procDateEnd,long? statusId,long? alertId,string showHistory,long? pageNumber,long? itemsPerPage,string orderField,string orderType)
		{
			IDataReader reader = GetDocLogsByMultiCriteriaDB(companyDB, patTypeId, patId, epiTypeId, epiId, instId, placeId, appId, docTypeId, doc, docDateBegin, docDateEnd, arrivDateBegin, arrivDateEnd, procDateBegin, procDateEnd, statusId, alertId, showHistory, pageNumber, itemsPerPage, orderField, orderType);
			DocumentLogList list = new DocumentLogList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new DocumentLog(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetDocLogsByMultiCriteriaDBMethod(string companyDB)
		{
			string proc = GetDocLogsByMultiCriteriaDBMethodName;
            string package = GetDocLogsByMultiCriteriaDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetDocLogsByMultiCriteriaDBMethodName
		{
            		get { return "GetDocLogsByMultiCriteria"; }

        	}
        	protected virtual string GetDocLogsByMultiCriteriaDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		
		protected virtual IDataReader GetDocLogsByMultiCriteriaDB(string companyDB, long? patTypeId,string patId,long? epiTypeId,string epiId,long? instId,long? placeId,long? appId,long? docTypeId,string doc,Nullable<DateTime> docDateBegin,Nullable<DateTime> docDateEnd,Nullable<DateTime> arrivDateBegin,Nullable<DateTime> arrivDateEnd,Nullable<DateTime> procDateBegin,Nullable<DateTime> procDateEnd,long? statusId,long? alertId,string showHistory,long? pageNumber,long? itemsPerPage,string orderField,string orderType)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetDocLogsByMultiCriteriaDBMethod(companyDB);
				ret = dal.ExecuteReader(dbMethod, patTypeId, patId, epiTypeId, epiId, instId, placeId, appId, docTypeId, doc, docDateBegin, docDateEnd, arrivDateBegin, arrivDateEnd, procDateBegin, procDateEnd, statusId, alertId, showHistory, pageNumber, itemsPerPage, orderField, orderType, DBNull.Value);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Update DOCUMENTLOG Operations
		//
		//UPDATE OPERATIONS DOCUMENTLOG
		//
		//
		//
		//
		public virtual DocumentLog ProcessIndexDocument(string companyDB, DocumentLog obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					ProcessIndexDocumentDB(companyDB, null, obj);
				else	
					ProcessIndexDocumentDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string ProcessIndexDocumentDBMethod(string companyDB)
		{
			string proc = ProcessIndexDocumentDBMethodName;
            string package = ProcessIndexDocumentDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string ProcessIndexDocumentDBMethodName
		{
            		get { return "ProcessIndexDocument"; }

        	}
        	protected virtual string ProcessIndexDocumentDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}
		
		protected virtual object[] ProcessIndexDocumentDBParametersExtra(DocumentLog obj)
		{
            		return new object[] {};
        }
		private object[] ProcessIndexDocumentDBParameters(DocumentLog obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.DocLogXmlId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(ProcessIndexDocumentDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void ProcessIndexDocumentDB(string companyDB, DbTransaction transaction, DocumentLog obj)
		{
			try
      		{
				string dbMethod = ProcessIndexDocumentDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				ProcessIndexDocumentDBParameters(obj)
				);
				
				ProcessIndexDocumentDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				ProcessIndexDocumentDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void ProcessIndexDocumentDBPosQuery(DbCommand dbCommand, DocumentLog obj)
		{
			
        	}
        	protected virtual void ProcessIndexDocumentDBPreQuery(DbCommand dbCommand, DocumentLog obj)
        	{        
			
        	}
		
		
		#endregion
		
		#region Cache DOCUMENTEPISODELOG
		#endregion
	
	
		#region Select DOCUMENTEPISODELOG Operations
		//
		//SELECT OPERATIONS DOCUMENTEPISODELOG
		//
		//
		//
		//
		public virtual DocumentEpisodeLogList GetDocEpiLogsByMultiCriteria(string companyDB, long? patTypeId,string patId,long? epiTypeId,string epiId,long? instId,long? placeId,long? appId,long? docTypeId,string doc,Nullable<DateTime> docDateBegin,Nullable<DateTime> docDateEnd,Nullable<DateTime> arrivDateBegin,Nullable<DateTime> arrivDateEnd,Nullable<DateTime> procDateBegin,Nullable<DateTime> procDateEnd,long? statusId,long pageNumber,long itemsPerPage,string orderField,string orderType)
		{
			IDataReader reader = GetDocEpiLogsByMultiCriteriaDB(companyDB, patTypeId, patId, epiTypeId, epiId, instId, placeId, appId, docTypeId, doc, docDateBegin, docDateEnd, arrivDateBegin, arrivDateEnd, procDateBegin, procDateEnd, statusId, pageNumber, itemsPerPage, orderField, orderType);
			DocumentEpisodeLogList list = new DocumentEpisodeLogList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new DocumentEpisodeLog(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetDocEpiLogsByMultiCriteriaDBMethod(string companyDB)
		{
			string proc = GetDocEpiLogsByMultiCriteriaDBMethodName;
            string package = GetDocEpiLogsByMultiCriteriaDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetDocEpiLogsByMultiCriteriaDBMethodName
		{
            		get { return "GetDocEpiLogsByMultiCriteria"; }

        	}
        	protected virtual string GetDocEpiLogsByMultiCriteriaDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		
		protected virtual IDataReader GetDocEpiLogsByMultiCriteriaDB(string companyDB, long? patTypeId,string patId,long? epiTypeId,string epiId,long? instId,long? placeId,long? appId,long? docTypeId,string doc,Nullable<DateTime> docDateBegin,Nullable<DateTime> docDateEnd,Nullable<DateTime> arrivDateBegin,Nullable<DateTime> arrivDateEnd,Nullable<DateTime> procDateBegin,Nullable<DateTime> procDateEnd,long? statusId,long pageNumber,long itemsPerPage,string orderField,string orderType)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetDocEpiLogsByMultiCriteriaDBMethod(companyDB);
				ret = dal.ExecuteReader(dbMethod, patTypeId, patId, epiTypeId, epiId, instId, placeId, appId, docTypeId, doc, docDateBegin, docDateEnd, arrivDateBegin, arrivDateEnd, procDateBegin, procDateEnd, statusId, pageNumber, itemsPerPage, orderField, orderType, DBNull.Value);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache DOCUMENTINDEXLOG
		#endregion
	
	
		#region Select DOCUMENTINDEXLOG Operations
		//
		//SELECT OPERATIONS DOCUMENTINDEXLOG
		//
		//
		//
		//
		public virtual DocumentIndexLogList GetDocIdxLogsByMultiCriteria(string companyDB, long? patTypeId,string patId,long? epiTypeId,string epiId,long? instId,long? placeId,long? appId,long? docTypeId,string doc,Nullable<DateTime> docDateBegin,Nullable<DateTime> docDateEnd,Nullable<DateTime> arrivDateBegin,Nullable<DateTime> arrivDateEnd,Nullable<DateTime> procDateBegin,Nullable<DateTime> procDateEnd,long? statusId,long pageNumber,long itemsPerPage,string orderField,string orderType)
		{
			IDataReader reader = GetDocIdxLogsByMultiCriteriaDB(companyDB, patTypeId, patId, epiTypeId, epiId, instId, placeId, appId, docTypeId, doc, docDateBegin, docDateEnd, arrivDateBegin, arrivDateEnd, procDateBegin, procDateEnd, statusId, pageNumber, itemsPerPage, orderField, orderType);
			DocumentIndexLogList list = new DocumentIndexLogList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new DocumentIndexLog(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual DocumentIndexLogList GetDocIdxLogsByLogIdMulti(string companyDB, string logIds)
		{
			IDataReader reader = GetDocIdxLogsByLogIdMultiDB(companyDB, logIds);
			DocumentIndexLogList list = new DocumentIndexLogList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new DocumentIndexLog(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetDocIdxLogsByMultiCriteriaDBMethod(string companyDB)
		{
			string proc = GetDocIdxLogsByMultiCriteriaDBMethodName;
            string package = GetDocIdxLogsByMultiCriteriaDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetDocIdxLogsByMultiCriteriaDBMethodName
		{
            		get { return "GetDocIdxLogsByMultiCriteria"; }

        	}
        	protected virtual string GetDocIdxLogsByMultiCriteriaDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		
		protected virtual IDataReader GetDocIdxLogsByMultiCriteriaDB(string companyDB, long? patTypeId,string patId,long? epiTypeId,string epiId,long? instId,long? placeId,long? appId,long? docTypeId,string doc,Nullable<DateTime> docDateBegin,Nullable<DateTime> docDateEnd,Nullable<DateTime> arrivDateBegin,Nullable<DateTime> arrivDateEnd,Nullable<DateTime> procDateBegin,Nullable<DateTime> procDateEnd,long? statusId,long pageNumber,long itemsPerPage,string orderField,string orderType)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetDocIdxLogsByMultiCriteriaDBMethod(companyDB);
				ret = dal.ExecuteReader(dbMethod, patTypeId, patId, epiTypeId, epiId, instId, placeId, appId, docTypeId, doc, docDateBegin, docDateEnd, arrivDateBegin, arrivDateEnd, procDateBegin, procDateEnd, statusId, pageNumber, itemsPerPage, orderField, orderType, DBNull.Value);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetDocIdxLogsByLogIdMultiDBMethod(string companyDB)
		{
			string proc = GetDocIdxLogsByLogIdMultiDBMethodName;
            string package = GetDocIdxLogsByLogIdMultiDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetDocIdxLogsByLogIdMultiDBMethodName
		{
            		get { return "GetDocIdxLogsByLogIdMulti"; }

        	}
        	protected virtual string GetDocIdxLogsByLogIdMultiDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		
		protected virtual IDataReader GetDocIdxLogsByLogIdMultiDB(string companyDB, string logIds)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetDocIdxLogsByLogIdMultiDBMethod(companyDB);
				ret = dal.ExecuteReader(dbMethod, logIds, DBNull.Value);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache ALERT
		#endregion
	
	
		#region Select ALERT Operations
		//
		//SELECT OPERATIONS ALERT
		//
		//
		//
		//
		public virtual AlertList GetAlertsByMultiCriteria(string companyDB, long? instId,long? placeId,long? appId,long? docTypeId,Nullable<DateTime> dateBegin,Nullable<DateTime> dateEnd,long? statusId,long? alertTypeId,string showHistory,long? pageNumber,long? itemsPerPage,string orderField,string orderType)
		{
			IDataReader reader = GetAlertsByMultiCriteriaDB(companyDB, instId, placeId, appId, docTypeId, dateBegin, dateEnd, statusId, alertTypeId, showHistory, pageNumber, itemsPerPage, orderField, orderType);
			AlertList list = new AlertList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Alert(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAlertsByMultiCriteriaDBMethod(string companyDB)
		{
			string proc = GetAlertsByMultiCriteriaDBMethodName;
            string package = GetAlertsByMultiCriteriaDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAlertsByMultiCriteriaDBMethodName
		{
            		get { return "GetAlertsByMultiCriteria"; }

        	}
        	protected virtual string GetAlertsByMultiCriteriaDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		
		protected virtual IDataReader GetAlertsByMultiCriteriaDB(string companyDB, long? instId,long? placeId,long? appId,long? docTypeId,Nullable<DateTime> dateBegin,Nullable<DateTime> dateEnd,long? statusId,long? alertTypeId,string showHistory,long? pageNumber,long? itemsPerPage,string orderField,string orderType)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAlertsByMultiCriteriaDBMethod(companyDB);
				ret = dal.ExecuteReader(dbMethod, instId, placeId, appId, docTypeId, dateBegin, dateEnd, statusId, alertTypeId, showHistory, pageNumber, itemsPerPage, orderField, orderType, DBNull.Value);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Update ALERT Operations
		//
		//UPDATE OPERATIONS ALERT
		//
		//
		//
		//
		public virtual Alert IgnoredAlert(string companyDB, Alert obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					IgnoredAlertDB(companyDB, null, obj);
				else	
					IgnoredAlertDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual Alert CorrectedAlert(string companyDB, Alert obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					CorrectedAlertDB(companyDB, null, obj);
				else	
					CorrectedAlertDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string IgnoredAlertDBMethod(string companyDB)
		{
			string proc = IgnoredAlertDBMethodName;
            string package = IgnoredAlertDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string IgnoredAlertDBMethodName
		{
            		get { return "IgnoredAlert"; }

        	}
        	protected virtual string IgnoredAlertDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}
		
		protected virtual object[] IgnoredAlertDBParametersExtra(Alert obj)
		{
            		return new object[] {};
        }
		private object[] IgnoredAlertDBParameters(Alert obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.AlertId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(IgnoredAlertDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void IgnoredAlertDB(string companyDB, DbTransaction transaction, Alert obj)
		{
			try
      		{
				string dbMethod = IgnoredAlertDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				IgnoredAlertDBParameters(obj)
				);
				
				IgnoredAlertDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				IgnoredAlertDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void IgnoredAlertDBPosQuery(DbCommand dbCommand, Alert obj)
		{
			
        	}
        	protected virtual void IgnoredAlertDBPreQuery(DbCommand dbCommand, Alert obj)
        	{        
			
        	}
		
		//
		// DB
		//
		protected virtual string CorrectedAlertDBMethod(string companyDB)
		{
			string proc = CorrectedAlertDBMethodName;
            string package = CorrectedAlertDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string CorrectedAlertDBMethodName
		{
            		get { return "CorrectedAlert"; }

        	}
        	protected virtual string CorrectedAlertDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}
		
		protected virtual object[] CorrectedAlertDBParametersExtra(Alert obj)
		{
            		return new object[] {};
        }
		private object[] CorrectedAlertDBParameters(Alert obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.AlertId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(CorrectedAlertDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void CorrectedAlertDB(string companyDB, DbTransaction transaction, Alert obj)
		{
			try
      		{
				string dbMethod = CorrectedAlertDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				CorrectedAlertDBParameters(obj)
				);
				
				CorrectedAlertDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				CorrectedAlertDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void CorrectedAlertDBPosQuery(DbCommand dbCommand, Alert obj)
		{
			
        	}
        	protected virtual void CorrectedAlertDBPreQuery(DbCommand dbCommand, Alert obj)
        	{        
			
        	}
		
		
		#endregion
		
		#region Cache ALERTSUBSCRIPTION
		#endregion
	
	
		#region Select ALERTSUBSCRIPTION Operations
		//
		//SELECT OPERATIONS ALERTSUBSCRIPTION
		//
		//
		//
		//
		public virtual AlertSubscriptionList GetAlertsSubscription(string companyDB, string userName)
		{
			IDataReader reader = GetAlertsSubscriptionDB(companyDB, userName);
			AlertSubscriptionList list = new AlertSubscriptionList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AlertSubscription(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAlertsSubscriptionDBMethod(string companyDB)
		{
			string proc = GetAlertsSubscriptionDBMethodName;
            string package = GetAlertsSubscriptionDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAlertsSubscriptionDBMethodName
		{
            		get { return "GetAlertsSubscription"; }

        	}
        	protected virtual string GetAlertsSubscriptionDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		
		protected virtual IDataReader GetAlertsSubscriptionDB(string companyDB, string userName)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAlertsSubscriptionDBMethod(companyDB);
				ret = dal.ExecuteReader(dbMethod, userName, DBNull.Value);
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Insert ALERTSUBSCRIPTION Operations
		//
		//INSERT OPERATIONS ALERTSUBSCRIPTION
		//
		//
		//
		//
		public virtual AlertSubscription InsertAlertSubscription(string companyDB, AlertSubscription obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					InsertAlertSubscriptionDB(companyDB, null, obj);
				else
					InsertAlertSubscriptionDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string InsertAlertSubscriptionDBMethod(string companyDB)
		{
			string proc = InsertAlertSubscriptionDBMethodName;
            string package = InsertAlertSubscriptionDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
			
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}

		protected virtual string InsertAlertSubscriptionDBMethodName
		{
            		get { return "InsertAlertSubscription"; }

        	}
        	protected virtual string InsertAlertSubscriptionDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}

		protected virtual object[] InsertAlertSubscriptionDBParametersExtra(AlertSubscription obj)
		{
            		return new object[] {};
        	}
		protected object[] InsertAlertSubscriptionDBParameters(AlertSubscription obj)
        	{
            		ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
				
				 obj.AlertSubsInstId
,
				 obj.AlertSubsPalceId
,
				 obj.AlertSubsAppId
,
				 obj.AlertSubsDocTypeId
,
				 obj.AlertSubsAlertTypeId
,
				 obj.AlertSubsParam
,
				 obj.AlertSubsActive
,
				 obj.AlertSubsNotify
				 ,DBNull.Value
            		};

            		finalParameters.AddRange(standardParameters);

            		finalParameters.AddRange(InsertAlertSubscriptionDBParametersExtra(obj));

            		return finalParameters.ToArray();
        	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void InsertAlertSubscriptionDB(string companyDB, DbTransaction transaction, AlertSubscription obj)
		{
			try
      		{
				string dbMethod = InsertAlertSubscriptionDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					InsertAlertSubscriptionDBParameters(obj)
				);

				InsertAlertSubscriptionDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				InsertAlertSubscriptionDBPosQuery(dbCommand, obj);

				obj.AlertSubsId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);
				
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void InsertAlertSubscriptionDBPosQuery(DbCommand dbCommand, AlertSubscription obj)
		{
			
        	}
        	protected virtual void InsertAlertSubscriptionDBPreQuery(DbCommand dbCommand, AlertSubscription obj)
        	{        
			
        	}


		
		
		#endregion
		
		#region Update ALERTSUBSCRIPTION Operations
		//
		//UPDATE OPERATIONS ALERTSUBSCRIPTION
		//
		//
		//
		//
		public virtual AlertSubscription UpdateAlertSubscription(string companyDB, AlertSubscription obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateAlertSubscriptionDB(companyDB, null, obj);
				else	
					UpdateAlertSubscriptionDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string UpdateAlertSubscriptionDBMethod(string companyDB)
		{
			string proc = UpdateAlertSubscriptionDBMethodName;
            string package = UpdateAlertSubscriptionDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateAlertSubscriptionDBMethodName
		{
            		get { return "UpdateAlertSubscription"; }

        	}
        	protected virtual string UpdateAlertSubscriptionDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}
		
		protected virtual object[] UpdateAlertSubscriptionDBParametersExtra(AlertSubscription obj)
		{
            		return new object[] {};
        }
		private object[] UpdateAlertSubscriptionDBParameters(AlertSubscription obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.AlertSubsInstId,obj.AlertSubsPalceId,obj.AlertSubsAppId,obj.AlertSubsDocTypeId,obj.AlertSubsAlertTypeId,obj.AlertSubsParam,obj.AlertSubsActive,obj.AlertSubsNotify,obj.AlertSubsId
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateAlertSubscriptionDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateAlertSubscriptionDB(string companyDB, DbTransaction transaction, AlertSubscription obj)
		{
			try
      		{
				string dbMethod = UpdateAlertSubscriptionDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateAlertSubscriptionDBParameters(obj)
				);
				
				UpdateAlertSubscriptionDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateAlertSubscriptionDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateAlertSubscriptionDBPosQuery(DbCommand dbCommand, AlertSubscription obj)
		{
			
        	}
        	protected virtual void UpdateAlertSubscriptionDBPreQuery(DbCommand dbCommand, AlertSubscription obj)
        	{        
			
        	}
		
		
		#endregion
		
		#region Delete ALERTSUBSCRIPTION Operations
		//
		//DELETE OPERATIONS ALERTSUBSCRIPTION
		//
		//
		//
		//
		public virtual void DeleteAlertSubscription(string companyDB, AlertSubscription obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState == ObjectState.Added)
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					DeleteAlertSubscriptionDB(companyDB, null, obj);
				else
					DeleteAlertSubscriptionDB(companyDB, transaction[0], obj);
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
		}
		
		
		//
		// DB
		//
		protected virtual string DeleteAlertSubscriptionDBMethod(string companyDB)
		{
			string proc = DeleteAlertSubscriptionDBMethodName;
            string package = DeleteAlertSubscriptionDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("DocumentsWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);
				
			return proc;
		}

		protected virtual string DeleteAlertSubscriptionDBMethodName
		{
            		get { return "DeleteAlertSubscription"; }

        	}
        	protected virtual string DeleteAlertSubscriptionDBPackageName
		{
            		get { return "PCK_DOCUMENTS_MONITORING_GEN"; }
        	}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void DeleteAlertSubscriptionDB(string companyDB, DbTransaction transaction, AlertSubscription obj)
		{
			try
      		{
				string dbMethod = DeleteAlertSubscriptionDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                dbMethod
				, obj.AlertSubsId
				);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

                //if (rowsAffected <= 0)
                //    throw new DBConcurrencyException();
	
			}
			catch(Exception ex)
			{
				  // Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		
		
		#endregion
		
    }
}


