using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 30 de Dezembro de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class DocumentIndexLog_GEN : AbstractEntity
    {	
		#region Variables
		
		private long docIdxLogId; ///
		private long docIdxLogDocLogId; ///
		private string docIdxLogLevel = string.Empty; ///
		private string docIdxLogMessage = string.Empty; ///
		private string docIdxLogProcedure = string.Empty; ///
		private string docIdxLogException = string.Empty; ///
		private Nullable<DateTime> docIdxLogRegDate = new Nullable<DateTime>(); ///
		private string docIdxLogDetail = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty DocumentIndexLog object.
        /// </summary>
        public DocumentIndexLog_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty DocumentIndexLog object.
        /// </summary>
        public DocumentIndexLog_GEN(long docIdxLogId) 
			: base(ObjectState.Added, null) 
        {
			this.docIdxLogId = docIdxLogId;
        }
		/// <summary>
        /// Initialize an new empty DocumentIndexLog object.
        /// </summary>
        public DocumentIndexLog_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  DocumentIndexLog object with the given parameters.
        /// </summary>
        public  DocumentIndexLog_GEN(long docIdxLogDocLogId, string docIdxLogLevel, string docIdxLogMessage, string docIdxLogProcedure, string docIdxLogException, Nullable<DateTime> docIdxLogRegDate, string docIdxLogDetail) 
			: base(ObjectState.Added, null) 
        {	 
			this.docIdxLogDocLogId = docIdxLogDocLogId;
			this.docIdxLogLevel = docIdxLogLevel;
			this.docIdxLogMessage = docIdxLogMessage;
			this.docIdxLogProcedure = docIdxLogProcedure;
			this.docIdxLogException = docIdxLogException;
			this.docIdxLogRegDate = docIdxLogRegDate;
			this.docIdxLogDetail = docIdxLogDetail;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocIdxLogId
        {
            get { return this.docIdxLogId; }
            set { 
				if(this.docIdxLogId != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogId");
            		this.docIdxLogId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long DocIdxLogDocLogId
        {
            get { return this.docIdxLogDocLogId; }
            set { 
				if(this.docIdxLogDocLogId != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogDocLogId");
            		this.docIdxLogDocLogId = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocIdxLogLevel
        {
            get { return this.docIdxLogLevel; }
            set { 
				if(this.docIdxLogLevel != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogLevel");
            		this.docIdxLogLevel = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocIdxLogMessage
        {
            get { return this.docIdxLogMessage; }
            set { 
				if(this.docIdxLogMessage != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogMessage");
            		this.docIdxLogMessage = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocIdxLogProcedure
        {
            get { return this.docIdxLogProcedure; }
            set { 
				if(this.docIdxLogProcedure != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogProcedure");
            		this.docIdxLogProcedure = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocIdxLogException
        {
            get { return this.docIdxLogException; }
            set { 
				if(this.docIdxLogException != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogException");
            		this.docIdxLogException = value;
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public Nullable<DateTime> DocIdxLogRegDate
        {
            get { return this.docIdxLogRegDate; }
            set { 
				if(!this.docIdxLogRegDate.Equals(value)) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogRegDate");
					this.docIdxLogRegDate = value;
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DocIdxLogDetail
        {
            get { return this.docIdxLogDetail; }
            set { 
				if(this.docIdxLogDetail != value) {
					DataStateChanged(ObjectState.Modified, "DocIdxLogDetail");
            		this.docIdxLogDetail = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "DOCIDXLOGID":
							if (!reader.IsDBNull(i)) this.docIdxLogId = reader.GetInt64(i);
							break;
						case "DOCIDXLOGDOCLOGID":
							if (!reader.IsDBNull(i)) this.docIdxLogDocLogId = reader.GetInt64(i);
							break;
						case "DOCIDXLOGLEVEL":
							if (!reader.IsDBNull(i)) this.docIdxLogLevel = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCIDXLOGMESSAGE":
							if (!reader.IsDBNull(i)) this.docIdxLogMessage = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCIDXLOGPROCEDURE":
							if (!reader.IsDBNull(i)) this.docIdxLogProcedure = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCIDXLOGEXCEPTION":
							if (!reader.IsDBNull(i)) this.docIdxLogException = Convert.ToString(reader.GetValue(i));
							break;
						case "DOCIDXLOGREGDATE":
							if (!reader.IsDBNull(i)) this.docIdxLogRegDate = reader.GetDateTime(i);
							break;
						case "DOCIDXLOGDETAIL":
							if (!reader.IsDBNull(i)) this.docIdxLogDetail = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			DocumentIndexLog documentindexlog = obj as DocumentIndexLog;
			if (documentindexlog == null)
				return false;
			return documentindexlog.DocIdxLogId == DocIdxLogId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


