using System;
using System.Data;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Logging;

using CPCHS.Common.BusinessEntities;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
	
namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: ter?a-feira, 20 de Outubro de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class DocumentLog : DocumentLog_GEN
	{
        public string docLogPatTypeDesc;
        public string docLogInstDesc;
        public string docLogPlaceDesc;
        public string docLogAppDesc;
        public string docLogDocTypeDesc;
        public string docLogStatusDesc;
        public string docLogIsProcessable;
        public string docLogIsIgnorable;
        public long totalNumber;
		
        /// <summary>
        /// Initialize an new empty DocumentLog object.
        /// </summary>
        public DocumentLog() : base()
        {
        }
		
		/// <summary>
        /// Initialize an new empty DocumentLog object.
        /// </summary>
        public DocumentLog(IDataReader reader, string companyDB) : base(reader, companyDB)
        {
            if (reader != null && !reader.IsClosed)
            {
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                    {
                        case "DOCLOGPATTYPEDESC":
                            if (!reader.IsDBNull(i)) this.docLogPatTypeDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGINSTDESC":
                            if (!reader.IsDBNull(i)) this.docLogInstDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGPLACEDESC":
                            if (!reader.IsDBNull(i)) this.docLogPlaceDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGAPPDESC":
                            if (!reader.IsDBNull(i)) this.docLogAppDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGDOCTYPEDESC":
                            if (!reader.IsDBNull(i)) this.docLogDocTypeDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGSTATUSDESC":
                            if (!reader.IsDBNull(i)) this.docLogStatusDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGISPROCESSABLE":
                            if (!reader.IsDBNull(i)) this.docLogIsProcessable = Convert.ToString(reader.GetValue(i));
                            break;
                        case "DOCLOGISIGNORABLE":
                            if (!reader.IsDBNull(i)) this.docLogIsIgnorable = Convert.ToString(reader.GetValue(i));
                            break;
                        case "TOTALNUMBER":
                            if (!reader.IsDBNull(i)) this.totalNumber = Convert.ToInt16(reader.GetValue(i));
                            break;
                    }
                }
            }
        }
		
        /// <summary>
        /// Initialize a new  DocumentLog object with the given parameters.
        /// </summary>
        public  DocumentLog(long docLogPatTypeId, string docLogPatId, long docLogInstId, long docLogPlaceId, long docLogAppId, long docLogDocTypeId, string docLogDoc, Nullable<DateTime> docLogDataDoc, Nullable<DateTime> docLogArrivDate, Nullable<DateTime> docLogProcDate, long docLogStatusId, long docLogDocId, long docLogXmlId) : base(docLogPatTypeId, docLogPatId, docLogInstId, docLogPlaceId, docLogAppId, docLogDocTypeId, docLogDoc, docLogDataDoc, docLogArrivDate, docLogProcDate, docLogStatusId, docLogDocId, docLogXmlId)
        {
        }
		
        public DocumentLog(long docLogId) : base(docLogId)
        {
			
        }
	}
}


