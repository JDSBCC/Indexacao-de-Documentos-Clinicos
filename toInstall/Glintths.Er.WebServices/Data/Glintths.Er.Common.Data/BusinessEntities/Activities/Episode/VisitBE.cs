using System;
using System.Data;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Logging;

using CPCHS.Common.BusinessEntities;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
	
namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: ter?a-feira, 21 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class Visit : Visit_GEN
	{
        public string EpiTypeExt { get; set; }

        public string Episode { get; set; }
        public string EpisodeType { get; set; }
        public string EpisodeParent { get; set; }
        public string EpisodeParentType { get; set; }
        public string ServiceReq { get; set; }
        public string ServiceReqDesc { get; set; }

        public string Patient { get; set; }
        public string PatientType { get; set; }
        /// <summary>
        /// Initialize an new empty Visit object.
        /// </summary>
        public Visit() : base()
        {
        }
		
		/// <summary>
        /// Initialize an new empty Visit object.
        /// </summary>
        public Visit(IDataReader reader, string companyDB) : base(reader, companyDB)
        {
            VisitEpisodeType = new EpisodeType(reader, companyDB);
            LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Visit object with the given parameters.
        /// </summary>
        public  Visit(long visitId, long visitParentId, long visitEpiTypeId, string visitEpisode, Nullable<DateTime> visitDtIni, Nullable<DateTime> visitDtEnd, long visitEntId, long visitInstId, long visitLocalId) : base(visitId, visitParentId, visitEpiTypeId, visitEpisode, visitDtIni, visitDtEnd, visitEntId, visitInstId, visitLocalId)
        {
        }
		
        public Visit(long visitId) : base(visitId)
        {
			
        }

        private void LoadFromReader(IDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                    {
                        case "EPITYPEEXT":
                            if (!reader.IsDBNull(i)) this.EpiTypeExt = Convert.ToString(reader.GetValue(i));
                            break;
                        case "T_EPISODIO":
                            if (!reader.IsDBNull(i)) this.EpisodeType = Convert.ToString(reader.GetValue(i));
                            break;
                        case "EPISODIO":
                            if (!reader.IsDBNull(i)) this.Episode = Convert.ToString(reader.GetValue(i));
                            break;
                        case "T_EPISODIO_PAI":
                            if (!reader.IsDBNull(i)) this.EpisodeParentType = Convert.ToString(reader.GetValue(i));
                            break;
                        case "EPISODIO_PAI":
                            if (!reader.IsDBNull(i)) this.EpisodeParent = Convert.ToString(reader.GetValue(i));
                            break;
                        case "REQSERV":
                            if (!reader.IsDBNull(i)) this.ServiceReq = Convert.ToString(reader.GetValue(i));
                            break;
                        case "REQSERVDESC":
                            if (!reader.IsDBNull(i)) this.ServiceReqDesc = Convert.ToString(reader.GetValue(i));
                            break;
                        case "PATIENTTYPE":
                            if (!reader.IsDBNull(i)) this.PatientType = Convert.ToString(reader.GetValue(i));
                            break;
                        case "PATIENT":
                            if (!reader.IsDBNull(i)) this.Patient = Convert.ToString(reader.GetValue(i));
                            break;
                    }
                }
            }
        }
	}
}


