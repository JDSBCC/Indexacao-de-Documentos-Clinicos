using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	
using Cpchs.Eresults.Common.WCF.BusinessEntities;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 21 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Visit_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long visitId; ///
		private long visitParentId; ///
		private long visitEpiTypeId; ///
		private string visitEpisode; ///
		private Nullable<DateTime> visitDtIni = new Nullable<DateTime>(); ///
		private Nullable<DateTime> visitDtEnd = new Nullable<DateTime>(); ///
		private long visitEntId; ///
		private long visitInstId; ///
		private long visitLocalId; ///
		
		private EpisodeType visitEpisodeType = new EpisodeType();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Visit object.
        /// </summary>
        public Visit_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Visit object.
        /// </summary>
        public Visit_GEN(long visitId) : base(ObjectState.Added, null) 
        {
			this.visitId = visitId;
        }
		/// <summary>
        /// Initialize an new empty Visit object.
        /// </summary>
        public Visit_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Visit object with the given parameters.
        /// </summary>
        public  Visit_GEN(long visitId, long visitParentId, long visitEpiTypeId, string visitEpisode, Nullable<DateTime> visitDtIni, Nullable<DateTime> visitDtEnd, long visitEntId, long visitInstId, long visitLocalId) : base(ObjectState.Added, null) 
        {	 
			this.visitId = visitId;
			this.visitParentId = visitParentId;
			this.visitEpiTypeId = visitEpiTypeId;
			this.visitEpisode = visitEpisode;
			this.visitDtIni = visitDtIni;
			this.visitDtEnd = visitDtEnd;
			this.visitEntId = visitEntId;
			this.visitInstId = visitInstId;
			this.visitLocalId = visitLocalId;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long VisitId
        {
            get { return this.visitId; }
            set { 
				if(this.visitId != value) {
					DataStateChanged(ObjectState.Modified, "VisitId");
            		this.visitId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long VisitParentId
        {
            get { return this.visitParentId; }
            set { 
				if(this.visitParentId != value) {
					DataStateChanged(ObjectState.Modified, "VisitParentId");
            		this.visitParentId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long VisitEpiTypeId
        {
            get { return this.visitEpiTypeId; }
            set { 
				if(this.visitEpiTypeId != value) {
					DataStateChanged(ObjectState.Modified, "VisitEpiTypeId");
            		this.visitEpiTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string VisitEpisode
        {
            get { return this.visitEpisode; }
            set { 
				if(this.visitEpisode != value) {
					DataStateChanged(ObjectState.Modified, "VisitEpisode");
            		this.visitEpisode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public Nullable<DateTime> VisitDtIni
        {
            get { return this.visitDtIni; }
            set { 
				if(!this.visitDtIni.Equals(value)) {
					DataStateChanged(ObjectState.Modified, "VisitDtIni");
					this.visitDtIni = value;
				}
		}

		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public Nullable<DateTime> VisitDtEnd
        {
            get { return this.visitDtEnd; }
            set { 
				if(!this.visitDtEnd.Equals(value)) {
					DataStateChanged(ObjectState.Modified, "VisitDtEnd");
					this.visitDtEnd = value;
				}
		}

		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long VisitEntId
        {
            get { return this.visitEntId; }
            set { 
				if(this.visitEntId != value) {
					DataStateChanged(ObjectState.Modified, "VisitEntId");
            		this.visitEntId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long VisitInstId
        {
            get { return this.visitInstId; }
            set { 
				if(this.visitInstId != value) {
					DataStateChanged(ObjectState.Modified, "VisitInstId");
            		this.visitInstId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long VisitLocalId
        {
            get { return this.visitLocalId; }
            set { 
				if(this.visitLocalId != value) {
					DataStateChanged(ObjectState.Modified, "VisitLocalId");
            		this.visitLocalId = value;
				}
			}
		}
		
		
		
		public EpisodeType VisitEpisodeType
		{
			get { return this.visitEpisodeType; }
			set { 
				if(this.visitEpisodeType != value) {
					DataStateChanged(ObjectState.Modified, "VisitEpisodeType");
            				this.visitEpisodeType = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "VISITID":
							if (!reader.IsDBNull(i)) this.visitId = reader.GetInt64(i);
							break;
						case "VISITPARENTID":
							if (!reader.IsDBNull(i)) this.visitParentId = reader.GetInt64(i);
							break;
						case "VISITEPITYPEID":
							if (!reader.IsDBNull(i)) this.visitEpiTypeId = reader.GetInt64(i);
							break;
						case "VISITEPISODE":
							if (!reader.IsDBNull(i)) this.visitEpisode = Convert.ToString(reader.GetValue(i));
							break;
						case "VISITDTINI":
							if (!reader.IsDBNull(i)) this.visitDtIni = reader.GetDateTime(i);
							break;
						case "VISITDTEND":
							if (!reader.IsDBNull(i)) this.visitDtEnd = reader.GetDateTime(i);
							break;
						case "VISITENTID":
							if (!reader.IsDBNull(i)) this.visitEntId = reader.GetInt64(i);
							break;
						case "VISITINSTID":
							if (!reader.IsDBNull(i)) this.visitInstId = reader.GetInt64(i);
							break;
						case "VISITLOCALID":
							if (!reader.IsDBNull(i)) this.visitLocalId = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Visit visit = obj as Visit;
			if (visit == null)
				return false;
			return visit.VisitId == VisitId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


