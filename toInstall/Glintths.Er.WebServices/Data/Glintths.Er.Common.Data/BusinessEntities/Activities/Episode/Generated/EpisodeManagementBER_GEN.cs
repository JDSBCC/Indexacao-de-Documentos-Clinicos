
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 10 de Novembro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class EpisodeManagementBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		
		#region Variables
		#endregion
	
		protected EpisodeManagementBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("ActivitiesWCF");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}
	
    #region TABLES OPERATIONS
	
		#region Cache EPISODETYPE
		#endregion
	
	
		#region Select EPISODETYPE Operations
		//
		//SELECT OPERATIONS EPISODETYPE
		//
		//
		//
		//
		public virtual EpisodeTypeList GetAllEpisodeTypes(string companyDB)
		{
			IDataReader reader = GetAllEpisodeTypesDB(companyDB);
			EpisodeTypeList list = new EpisodeTypeList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new EpisodeType(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual EpisodeTypeList GetEpiTypesForExternalAccess(string companyDB, string entIds , long? epiTypeId , string epiId , long? instId , long? placeId , long? appId , long? docTypeId , string docRef , string elemType )
		{
			IDataReader reader = GetEpiTypesForExternalAccessDB(companyDB, entIds , epiTypeId , epiId , instId , placeId , appId , docTypeId , docRef , elemType );
			EpisodeTypeList list = new EpisodeTypeList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new EpisodeType(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual EpisodeType GetEpisodeTypeByCode(string companyDB, string epiTypeCode)
		{
			IDataReader reader = GetEpisodeTypeByCodeDB(companyDB, epiTypeCode);
			EpisodeType obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new EpisodeType(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAllEpisodeTypesDBMethod(string companyDB)
		{
			string proc = GetAllEpisodeTypesDBMethodName;
            string package = GetAllEpisodeTypesDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAllEpisodeTypesDBMethodName
		{
            get { return "GetAllEpisodeTypes"; }
        }
		
        protected virtual string GetAllEpisodeTypesDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetAllEpisodeTypesDB(string companyDB)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAllEpisodeTypesDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetEpiTypesForExternalAccessDBMethod(string companyDB)
		{
			string proc = GetEpiTypesForExternalAccessDBMethodName;
            string package = GetEpiTypesForExternalAccessDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetEpiTypesForExternalAccessDBMethodName
		{
            get { return "GetEpiTypesForExternalAccess"; }
        }
		
        protected virtual string GetEpiTypesForExternalAccessDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetEpiTypesForExternalAccessDB(string companyDB, string entIds , long? epiTypeId , string epiId , long? instId , long? placeId , long? appId , long? docTypeId , string docRef , string elemType )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetEpiTypesForExternalAccessDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds , epiTypeId , epiId , instId , placeId , appId , docTypeId , docRef , elemType , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetEpisodeTypeByCodeDBMethod(string companyDB)
		{
			string proc = GetEpisodeTypeByCodeDBMethodName;
            string package = GetEpisodeTypeByCodeDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetEpisodeTypeByCodeDBMethodName
		{
            get { return "GetEpisodeTypeByCode"; }
        }
		
        protected virtual string GetEpisodeTypeByCodeDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetEpisodeTypeByCodeDB(string companyDB, string epiTypeCode)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetEpisodeTypeByCodeDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, epiTypeCode, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache VISIT
		#endregion
	
	
		#region Select VISIT Operations
		//
		//SELECT OPERATIONS VISIT
		//
		//
		//
		//
		public virtual VisitList GetPatientEpisodes(string companyDB, long visitInstId, long visitLocalId, string patientid )
		{
			IDataReader reader = GetPatientEpisodesDB(companyDB, visitInstId, visitLocalId, patientid );
			VisitList list = new VisitList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Visit(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual Visit GetPatientEpisodeByIds(string companyDB, long visitEpiTypeId, string visitEpisode)
		{
			IDataReader reader = GetPatientEpisodeByIdsDB(companyDB, visitEpiTypeId, visitEpisode);
			Visit obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new Visit(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		//
		//
		//
		public virtual Visit GetOrInsertEpisode(string companyDB, string Episode , string EpisodeType , string PatientId , string PatientType , long InstId , long PlaceId , long AppId )
		{
			IDataReader reader = GetOrInsertEpisodeDB(companyDB, Episode , EpisodeType , PatientId , PatientType , InstId , PlaceId , AppId );
			Visit obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new Visit(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		//
		//
		//
		public virtual VisitList GetPatientEpisodesBySearchData(string companyDB, string Name , string PatientNr , string ProcessNr , string SnsNr , string instId , string placeId , string patId )
		{
			IDataReader reader = GetPatientEpisodesBySearchDataDB(companyDB, Name , PatientNr , ProcessNr , SnsNr , instId , placeId , patId );
			VisitList list = new VisitList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Visit(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetPatientEpisodesDBMethod(string companyDB)
		{
			string proc = GetPatientEpisodesDBMethodName;
            string package = GetPatientEpisodesDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetPatientEpisodesDBMethodName
		{
            get { return "GetPatientEpisodes"; }
        }
		
        protected virtual string GetPatientEpisodesDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetPatientEpisodesDB(string companyDB, long visitInstId, long visitLocalId, string patientid )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetPatientEpisodesDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, visitInstId, visitLocalId, patientid , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetPatientEpisodeByIdsDBMethod(string companyDB)
		{
			string proc = GetPatientEpisodeByIdsDBMethodName;
            string package = GetPatientEpisodeByIdsDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetPatientEpisodeByIdsDBMethodName
		{
            get { return "GetPatientEpisodeByIds"; }
        }
		
        protected virtual string GetPatientEpisodeByIdsDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetPatientEpisodeByIdsDB(string companyDB, long visitEpiTypeId, string visitEpisode)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetPatientEpisodeByIdsDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, visitEpiTypeId, visitEpisode, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetOrInsertEpisodeDBMethod(string companyDB)
		{
			string proc = GetOrInsertEpisodeDBMethodName;
            string package = GetOrInsertEpisodeDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetOrInsertEpisodeDBMethodName
		{
            get { return "GetOrInsertEpisode"; }
        }
		
        protected virtual string GetOrInsertEpisodeDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetOrInsertEpisodeDB(string companyDB, string Episode , string EpisodeType , string PatientId , string PatientType , long InstId , long PlaceId , long AppId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetOrInsertEpisodeDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, Episode , EpisodeType , PatientId , PatientType , InstId , PlaceId , AppId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetPatientEpisodesBySearchDataDBMethod(string companyDB)
		{
			string proc = GetPatientEpisodesBySearchDataDBMethodName;
            string package = GetPatientEpisodesBySearchDataDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetPatientEpisodesBySearchDataDBMethodName
		{
            get { return "GetPatientEpisodesBySearchData"; }
        }
		
        protected virtual string GetPatientEpisodesBySearchDataDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetPatientEpisodesBySearchDataDB(string companyDB, string Name , string PatientNr , string ProcessNr , string SnsNr , string instId , string placeId , string patId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetPatientEpisodesBySearchDataDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, Name , PatientNr , ProcessNr , SnsNr , instId , placeId , patId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache EXTERNALEPISODE
		#endregion
	
	
		#region Select EXTERNALEPISODE Operations
		//
		//SELECT OPERATIONS EXTERNALEPISODE
		//
		//
		//
		//
		public virtual ExternalEpisodeList GetPatientEpisodesFromExternalProvider(string companyDB, string pattype, string patid, string userId )
		{
			IDataReader reader = GetPatientEpisodesFromExternalProviderDB(companyDB, pattype, patid, userId );
			ExternalEpisodeList list = new ExternalEpisodeList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new ExternalEpisode(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetPatientEpisodesFromExternalProviderDBMethod(string companyDB)
		{
			string proc = GetPatientEpisodesFromExternalProviderDBMethodName;
            string package = GetPatientEpisodesFromExternalProviderDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetPatientEpisodesFromExternalProviderDBMethodName
		{
            get { return "GetPatientEpisodesFromExternalProvider"; }
        }
		
        protected virtual string GetPatientEpisodesFromExternalProviderDBPackageName
		{
            get { return "PCK_ACTIVITIES_EPISODE_GEN"; }
        }

		
		protected virtual IDataReader GetPatientEpisodesFromExternalProviderDB(string companyDB, string pattype, string patid, string userId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetPatientEpisodesFromExternalProviderDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, pattype, patid, userId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
    
    #endregion
    
    #region OBJECTS OPERATIONS
    
    #endregion
	
    }
}


