using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;

using Microsoft.Practices.EnterpriseLibrary.Logging;
	
using CPCHS.Common.BusinessEntities;
	

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 21 de Julho de 2009
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class EpisodeType_GEN : AbstractEntity
    {	
		#region Variables
	
		
		private long epiTypeId; ///
		private string epiTypeCode; ///
		private string epiTypeAcronym; ///
		private string epiTypeDescription; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty EpisodeType object.
        /// </summary>
        public EpisodeType_GEN() : base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty EpisodeType object.
        /// </summary>
        public EpisodeType_GEN(long epiTypeId) : base(ObjectState.Added, null) 
        {
			this.epiTypeId = epiTypeId;
        }
		/// <summary>
        /// Initialize an new empty EpisodeType object.
        /// </summary>
        public EpisodeType_GEN(IDataReader reader, string companyDB) : base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  EpisodeType object with the given parameters.
        /// </summary>
        public  EpisodeType_GEN(long epiTypeId, string epiTypeCode, string epiTypeAcronym, string epiTypeDescription) : base(ObjectState.Added, null) 
        {	 
			this.epiTypeId = epiTypeId;
			this.epiTypeCode = epiTypeCode;
			this.epiTypeAcronym = epiTypeAcronym;
			this.epiTypeDescription = epiTypeDescription;
        }
		#endregion
		
		#region Properties
		

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long EpiTypeId
        {
            get { return this.epiTypeId; }
            set { 
				if(this.epiTypeId != value) {
					DataStateChanged(ObjectState.Modified, "EpiTypeId");
            		this.epiTypeId = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EpiTypeCode
        {
            get { return this.epiTypeCode; }
            set { 
				if(this.epiTypeCode != value) {
					DataStateChanged(ObjectState.Modified, "EpiTypeCode");
            		this.epiTypeCode = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EpiTypeAcronym
        {
            get { return this.epiTypeAcronym; }
            set { 
				if(this.epiTypeAcronym != value) {
					DataStateChanged(ObjectState.Modified, "EpiTypeAcronym");
            		this.epiTypeAcronym = value;
				}
			}
		}
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string EpiTypeDescription
        {
            get { return this.epiTypeDescription; }
            set { 
				if(this.epiTypeDescription != value) {
					DataStateChanged(ObjectState.Modified, "EpiTypeDescription");
            		this.epiTypeDescription = value;
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "EPITYPEID":
							if (!reader.IsDBNull(i)) this.epiTypeId = reader.GetInt64(i);
							break;
						case "EPITYPECODE":
							if (!reader.IsDBNull(i)) this.epiTypeCode = Convert.ToString(reader.GetValue(i));
							break;
						case "EPITYPEACRONYM":
							if (!reader.IsDBNull(i)) this.epiTypeAcronym = Convert.ToString(reader.GetValue(i));
							break;
						case "EPITYPEDESCRIPTION":
							if (!reader.IsDBNull(i)) this.epiTypeDescription = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			EpisodeType episodetype = obj as EpisodeType;
			if (episodetype == null)
				return false;
			return episodetype.EpiTypeId == EpiTypeId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


