using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quarta-feira, 10 de Novembro de 2010
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class ExternalEpisode_GEN : AbstractEntity
    {	
		#region Variables
		
		private string pattype = string.Empty; ///
		private string patid = string.Empty; ///
		private string episodetype = string.Empty; ///
		private string episodeid = string.Empty; ///
		private DateTime? episodestartdt = null; ///
		private DateTime? episodeenddt = null; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty ExternalEpisode object.
        /// </summary>
        public ExternalEpisode_GEN() 
			: base(ObjectState.Added, null) 
        {
        }

		/// <summary>
        /// Initialize an new empty ExternalEpisode object.
        /// </summary>
        public ExternalEpisode_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, null, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  ExternalEpisode object with the given parameters.
        /// </summary>
        public  ExternalEpisode_GEN(string pattype, string patid, string episodetype, string episodeid, DateTime? episodestartdt, DateTime? episodeenddt) 
			: base(ObjectState.Added, null) 
        {	 
			this.pattype = pattype;
			this.patid = patid;
			this.episodetype = episodetype;
			this.episodeid = episodeid;
			this.episodestartdt = episodestartdt;
			this.episodeenddt = episodeenddt;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Pattype
        {
            get { return this.pattype; }
            set { 
				if(this.pattype != value) {
					this.pattype = value;
					DataStateChanged(ObjectState.Modified, "Pattype");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Patid
        {
            get { return this.patid; }
            set { 
				if(this.patid != value) {
					this.patid = value;
					DataStateChanged(ObjectState.Modified, "Patid");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Episodetype
        {
            get { return this.episodetype; }
            set { 
				if(this.episodetype != value) {
					this.episodetype = value;
					DataStateChanged(ObjectState.Modified, "Episodetype");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Episodeid
        {
            get { return this.episodeid; }
            set { 
				if(this.episodeid != value) {
					this.episodeid = value;
					DataStateChanged(ObjectState.Modified, "Episodeid");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? Episodestartdt
        {
            get { return this.episodestartdt; }
            set { 
				if(!this.episodestartdt.Equals(value)) {
					this.episodestartdt = value;
					DataStateChanged(ObjectState.Modified, "Episodestartdt");
				}
		}

		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public DateTime? Episodeenddt
        {
            get { return this.episodeenddt; }
            set { 
				if(!this.episodeenddt.Equals(value)) {
					this.episodeenddt = value;
					DataStateChanged(ObjectState.Modified, "Episodeenddt");
				}
		}

		}
		
		
		
		#endregion
	
		#region Methods
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "PATTYPE":
							if (!reader.IsDBNull(i)) this.pattype = Convert.ToString(reader.GetValue(i));
							break;
						case "PATID":
							if (!reader.IsDBNull(i)) this.patid = Convert.ToString(reader.GetValue(i));
							break;
						case "EPISODETYPE":
							if (!reader.IsDBNull(i)) this.episodetype = Convert.ToString(reader.GetValue(i));
							break;
						case "EPISODEID":
							if (!reader.IsDBNull(i)) this.episodeid = Convert.ToString(reader.GetValue(i));
							break;
						case "EPISODESTARTDT":
							if (!reader.IsDBNull(i)) this.episodestartdt = reader.GetDateTime(i);
							break;
						case "EPISODEENDDT":
							if (!reader.IsDBNull(i)) this.episodeenddt = reader.GetDateTime(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			return base.Equals(obj);
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


