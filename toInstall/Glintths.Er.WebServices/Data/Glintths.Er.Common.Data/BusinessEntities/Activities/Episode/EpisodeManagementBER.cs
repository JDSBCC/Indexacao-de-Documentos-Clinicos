
using System;
using System.Data;
using System.Collections;

using Cpchs.Eresults.Common.WCF.BusinessEntities;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;
	
using CPCHS.Common.BusinessEntities;

using Microsoft.Practices.EnterpriseLibrary.Caching;

using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using System.Data.Common;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: segunda-feira, 6 de Outubro de 2008
    /// Created By: Generated by CodeSmith
		/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public sealed class EpisodeManagementBER : EpisodeManagementBER_GEN
    {
		#region Singleton
		private static EpisodeManagementBER instance = new EpisodeManagementBER();
		
		public static EpisodeManagementBER Instance
		{
			get { return instance; }
		}
		#endregion

        protected override string GetPatientEpisodesDBPackageName
        {
            get
            {
                return "PCK_ACTIVITIES_EPISODE";
            }
        }

        protected override string GetEpiTypesForExternalAccessDBPackageName
        {
            get
            {
                return "PCK_ACTIVITIES_EPISODE";
            }
        }

        protected override string GetPatientEpisodeByIdsDBPackageName
        {
            get
            {
                return "PCK_ACTIVITIES_EPISODE";
            }
        }

        protected override string GetPatientEpisodesBySearchDataDBPackageName
        {
            get
            {
                return "PCK_ACTIVITIES_EPISODE";
            }
        }

		private EpisodeManagementBER()
		{
			
		}
        
        protected override string  GetOrInsertEpisodeDBPackageName
        {
            get { return "PCK_ENTITIES_REQUEST"; }
        }

        protected override string GetOrInsertEpisodeDBMethodName
        {
            get { return "GetOrInsertEpisodeGH"; }
        }

        protected override string GetPatientEpisodesBySearchDataDBMethodName
        {
            get
            {
                return "GetPatientEpisodesBySearchDat2";
            }
        }

        protected override string GetPatientEpisodesFromExternalProviderDBMethodName
        {
            get { return "GetEpisodesFromExtProvider"; }
        }

        protected override string GetPatientEpisodesFromExternalProviderDBPackageName
        {
            get { return "PCK_ACTIVITIES_EPISODE"; }
        }


        #region DBMethods

        #region GetPatientEpisodesBySearchDat3

        public VisitList GetPatientEpisodesBySearchDat3(string companyDB, string tDoente, string doente)
        {
            IDataReader reader = GetPatientEpisodesBySearchDat3DB(companyDB, tDoente, doente);
            VisitList list = new VisitList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Visit(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected IDataReader GetPatientEpisodesBySearchDat3DB(string companyDB, string tDoente, string doente)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetPatientEpisodesBySearchDat3DBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, tDoente, doente, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        protected string GetPatientEpisodesBySearchDat3DBMethod(string companyDB)
        {
            string proc = GetPatientEpisodesBySearchDat3DBMethodName;
            string package = GetPatientEpisodesBySearchDat3DBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetPatientEpisodesBySearchDat3DBMethodName
        {
            get { return "GetPatientEpisodesBySearchDat3"; }
        }

        protected string GetPatientEpisodesBySearchDat3DBPackageName
        {
            get { return "PCK_ACTIVITIES_EPISODE"; }
        }

        #endregion

        #region GetEpisodeTypesFromExternalProvider

        public EpisodeTypeList GetEpisodeTypesFromExternalProvider(string companyDB)
        {
            IDataReader reader = GetEpisodeTypesFromExternalProviderDB(companyDB);
            EpisodeTypeList list = new EpisodeTypeList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new EpisodeType(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected IDataReader GetEpisodeTypesFromExternalProviderDB(string companyDB)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetEpisodeTypesFromExternalProviderDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        protected string GetEpisodeTypesFromExternalProviderDBMethod(string companyDB)
        {
            string proc = GetEpisodeTypesFromExternalProviderDBMethodName;
            string package = GetEpisodeTypesFromExternalProviderDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetEpisodeTypesFromExternalProviderDBMethodName
        {
            get { return "GetEpisodeTypesFromExtProvider"; }
        }

        protected string GetEpisodeTypesFromExternalProviderDBPackageName
        {
            get { return "PCK_ACTIVITIES_EPISODE"; }
        }

        #endregion

        #region GetEpisodesFromExternalProvider

        public VisitList GetEpisodesFromExternalProvider(string companyDB, string tDoente, string doente, string tEpisodio, string episodio)
        {
            IDataReader reader = GetEpisodesFromExternalProviderDB(companyDB, tDoente, doente, tEpisodio, episodio);
            VisitList list = new VisitList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Visit(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected IDataReader GetEpisodesFromExternalProviderDB(string companyDB, string tDoente, string doente, string tEpisodio, string episodio)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetEpisodesFromExternalProviderDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, tDoente, doente, tEpisodio, episodio, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        protected string GetEpisodesFromExternalProviderDBMethod(string companyDB)
        {
            string proc = GetEpisodesFromExternalProviderDBMethodName;
            string package = GetEpisodesFromExternalProviderDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string GetEpisodesFromExternalProviderDBMethodName
        {
            get { return "GetEpisodesFromExtProvider2"; }
        }

        protected string GetEpisodesFromExternalProviderDBPackageName
        {
            get { return "PCK_ACTIVITIES_EPISODE"; }
        }

        #endregion

        #region ImportEpisodeToPatientFromExternalProvider

        public VisitList ImportEpisodeToPatientFromExternalProvider(string companyDB, string tDoente, string doente, string tEpisodio, string episodio)
        {
            IDataReader reader = ImportEpisodeToPatientFromExternalProviderDB(companyDB, tDoente, doente, tEpisodio, episodio);
            VisitList list = new VisitList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Visit(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected IDataReader ImportEpisodeToPatientFromExternalProviderDB(string companyDB, string tDoente, string doente, string tEpisodio, string episodio)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = ImportEpisodeToPatientFromExternalProviderDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, tDoente, doente, tEpisodio, episodio, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        protected string ImportEpisodeToPatientFromExternalProviderDBMethod(string companyDB)
        {
            string proc = ImportEpisodeToPatientFromExternalProviderDBMethodName;
            string package = ImportEpisodeToPatientFromExternalProviderDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string ImportEpisodeToPatientFromExternalProviderDBMethodName
        {
            get { return "ImportEpisodeFromExtProvider"; }
        }

        protected string ImportEpisodeToPatientFromExternalProviderDBPackageName
        {
            get { return "PCK_ACTIVITIES_EPISODE"; }
        }

        #endregion

        #region SearchEpisode

        public VisitList SearchEpisode(string companyDB, string tEpisodio, string episodio)
        {
            IDataReader reader = SearchEpisodeDB(companyDB, tEpisodio, episodio);
            VisitList list = new VisitList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new Visit(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        protected IDataReader SearchEpisodeDB(string companyDB, string tEpisodio, string episodio)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = SearchEpisodeDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, tEpisodio, episodio, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        protected string SearchEpisodeDBMethod(string companyDB)
        {
            string proc = SearchEpisodeDBMethodName;
            string package = SearchEpisodeDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("ActivitiesWCF", companyDB);
            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected string SearchEpisodeDBMethodName
        {
            get { return "SearchEpisode"; }
        }

        protected string SearchEpisodeDBPackageName
        {
            get { return "PCK_ACTIVITIES_EPISODE"; }
        }

        #endregion

        #endregion

    }
}


