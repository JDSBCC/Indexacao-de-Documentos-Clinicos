using System;
using System.Data;
using System.Runtime.Serialization;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: sexta-feira, 6 de Julho de 2012
    /// Created By: Generated by CodeSmith
    /// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "AnaRes", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class AnaRes : AnaRes_GEN
    {
        public string EpiType { get; set; }

        public string EpiId { get; set; }

        public Nullable<DateTime> EpiBeginDate { get; set; }

        public Nullable<DateTime> EpiEndDate { get; set; }

        public string EspReq { get; set; }

        public string EspExec { get; set; }

        public string SerReq { get; set; }

        public string SerExec { get; set; }

        public string ExtId { get; set; }

        public string ReqId { get; set; }

        public Nullable<DateTime> ExecDate { get; set; }

        public Nullable<DateTime> ValDate { get; set; }

        public Nullable<DateTime> EmiDate { get; set; }

        public long DocId { get; set; }

        public long AppId { get; set; }

        public long DocTypeId { get; set; }

        /// <summary>
        /// Initialize an new empty AnaRes object.
        /// </summary>
        public AnaRes()
            : base()
        {
        }

        /// <summary>
        /// Initialize an new empty AnaRes object.
        /// </summary>
        public AnaRes(IDataReader reader, string companyDB)
            : base(reader, companyDB)
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                {
                    case "EPITYPE":
                        if (!reader.IsDBNull(i)) this.EpiType = reader.GetString(i);
                        break;
                    case "EPIID":
                        if (!reader.IsDBNull(i)) this.EpiId = reader.GetString(i);
                        break;
                    case "EPIBEGINDATE":
                        if (!reader.IsDBNull(i)) this.EpiBeginDate = reader.GetDateTime(i);
                        break;
                    case "EPIENDDATE":
                        if (!reader.IsDBNull(i)) this.EpiEndDate = reader.GetDateTime(i);
                        break;
                    case "ESPREQ":
                        if (!reader.IsDBNull(i)) this.EspReq = reader.GetString(i);
                        break;
                    case "ESPEXEC":
                        if (!reader.IsDBNull(i)) this.EspExec = reader.GetString(i);
                        break;
                    case "SERREQ":
                        if (!reader.IsDBNull(i)) this.SerReq = reader.GetString(i);
                        break;
                    case "SEREXEC":
                        if (!reader.IsDBNull(i)) this.SerExec = reader.GetString(i);
                        break;
                    case "EXTID":
                        if (!reader.IsDBNull(i)) this.ExtId = reader.GetString(i);
                        break;
                    case "REQID":
                        if (!reader.IsDBNull(i)) this.ReqId = reader.GetString(i);
                        break;
                    case "EXECDATE":
                        if (!reader.IsDBNull(i)) this.ExecDate = reader.GetDateTime(i);
                        break;
                    case "VALDATE":
                        if (!reader.IsDBNull(i)) this.ValDate = reader.GetDateTime(i);
                        break;
                    case "EMIDATE":
                        if (!reader.IsDBNull(i)) this.EmiDate = reader.GetDateTime(i);
                        break;
                    case "APPID":
                        if (!reader.IsDBNull(i)) this.AppId = reader.GetInt64(i);
                        break;
                    case "DOCTYPEID":
                        if (!reader.IsDBNull(i)) this.DocTypeId = reader.GetInt64(i);
                        break;
                    case "DOCID":
                        if (!reader.IsDBNull(i)) this.DocId = reader.GetInt64(i);
                        break;
                    case "EXAMCODE":
                        if (!reader.IsDBNull(i)) this.Exam.Code = reader.GetString(i);
                        break;
                    case "EXAMDESCR":
                        if (!reader.IsDBNull(i)) this.Exam.Descr = reader.GetString(i);
                        break;
                    case "PRODCODE":
                        if (!reader.IsDBNull(i)) this.Prod.Code = reader.GetString(i);
                        break;
                    case "PRODDESCR":
                        if (!reader.IsDBNull(i)) this.Prod.Descr = reader.GetString(i);
                        break;
                }
            }
        }

        /// <summary>
        /// Initialize a new  AnaRes object with the given parameters.
        /// </summary>
        public AnaRes(long parId, long elemId, long version, long examOrder, string grouper)
            : base(parId, elemId, version, examOrder, grouper)
        {
        }

        public AnaRes(long id)
            : base(id)
        {
        }

        protected void LoadAnaRes(IDataReader reader, string companyDb)
        {
        }
    }
}