using System;
using System.Data;
using System.Runtime.Serialization;
using Cpchs.Eresults.Common.WCF.BusinessEntities.Generated;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities
{
    /// <summary>
    /// Date Created: sexta-feira, 6 de Julho de 2012
    /// Created By: Generated by CodeSmith
    /// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "AttachRes", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class AttachRes : AttachRes_GEN
    {
        public string ReqId { get; set; }

        public Nullable<DateTime> ReqDate { get; set; }

        public string Product { get; set; }

        public Nullable<DateTime> ResDate { get; set; }

        public Nullable<DateTime> ValDate { get; set; }

        public NoteList ReqNotes { get; set; }

        public string EpiType { get; set; }

        public string EpiId { get; set; }

        public Nullable<DateTime> EpiBeginDate { get; set; }

        public Nullable<DateTime> EpiEndDate { get; set; }

        public string SerReq { get; set; }

        public string SerExec { get; set; }

        public string EspReq { get; set; }

        public string EspExec { get; set; }

        public string ExtId { get; set; }

        public Nullable<DateTime> DocDate { get; set; }

        public long DocId { get; set; }

        public long ElemId { get; set; }

        public long VerCod { get; set; }

        public long AppId { get; set; }

        public long DocTypeId { get; set; }

        /// <summary>
        /// Initialize an new empty AttachRes object.
        /// </summary>
        public AttachRes()
            : base()
        {
        }

        /// <summary>
        /// Initialize an new empty AttachRes object.
        /// </summary>
        public AttachRes(IDataReader reader, string companyDB)
            : base(reader, companyDB)
        {
            for (int i = 0; i < reader.FieldCount; i++)
            {
                switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                {
                    case "APPID":
                        if (!reader.IsDBNull(i)) this.AppId = reader.GetInt64(i);
                        break;
                    case "DOCTYPEID":
                        if (!reader.IsDBNull(i)) this.DocTypeId = reader.GetInt64(i);
                        break;
                }
            }
        }

        /// <summary>
        /// Initialize a new  AttachRes object with the given parameters.
        /// </summary>
        public AttachRes(long anaResId, string name, long resOrder, string descr)
            : base(anaResId, name, resOrder, descr)
        {
        }

        public AttachRes(long id)
            : base(id)
        {
        }

        protected void LoadAttachRes(IDataReader reader, string companyDb)
        {
        }
    }
}