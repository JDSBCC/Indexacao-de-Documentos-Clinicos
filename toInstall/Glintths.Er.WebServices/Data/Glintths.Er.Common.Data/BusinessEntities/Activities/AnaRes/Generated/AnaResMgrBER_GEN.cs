
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Cpchs.Eresults.Common.WCF.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 10 de Julho de 2012
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class AnaResMgrBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		
		#region Variables
		#endregion
	
		protected AnaResMgrBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("AnaRes");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}
	
    #region TABLES OPERATIONS
	
		#region Cache ALPHANUMRES
		#endregion
	
	
		#region Select ALPHANUMRES Operations
		//
		//SELECT OPERATIONS ALPHANUMRES
		//
		//
		//
		//
		public virtual AlphanumResList GetAlphanumResByDocId(string companyDB, long docId )
		{
			IDataReader reader = GetAlphanumResByDocIdDB(companyDB, docId );
			AlphanumResList list = new AlphanumResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AlphanumRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual AlphanumResList GetAlphanumResByMultiCrit(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader reader = GetAlphanumResByMultiCritDB(companyDB, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username );
			AlphanumResList list = new AlphanumResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AlphanumRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAlphanumResByDocIdDBMethod(string companyDB)
		{
			string proc = GetAlphanumResByDocIdDBMethodName;
            string package = GetAlphanumResByDocIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAlphanumResByDocIdDBMethodName
		{
            get { return "GetAlphanumResByDocId"; }
        }
		
        protected virtual string GetAlphanumResByDocIdDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetAlphanumResByDocIdDB(string companyDB, long docId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAlphanumResByDocIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, docId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetAlphanumResByMultiCritDBMethod(string companyDB)
		{
			string proc = GetAlphanumResByMultiCritDBMethodName;
            string package = GetAlphanumResByMultiCritDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAlphanumResByMultiCritDBMethodName
		{
            get { return "GetAlphanumResByMultiCrit"; }
        }
		
        protected virtual string GetAlphanumResByMultiCritDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetAlphanumResByMultiCritDB(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAlphanumResByMultiCritDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache MICRORES
		#endregion
	
	
		#region Select MICRORES Operations
		//
		//SELECT OPERATIONS MICRORES
		//
		//
		//
		//
		public virtual MicroResList GetMicroResByDocId(string companyDB, long docId )
		{
			IDataReader reader = GetMicroResByDocIdDB(companyDB, docId );
			MicroResList list = new MicroResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new MicroRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual MicroResList GetMicroResByMultiCrit(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader reader = GetMicroResByMultiCritDB(companyDB, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username );
			MicroResList list = new MicroResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new MicroRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetMicroResByDocIdDBMethod(string companyDB)
		{
			string proc = GetMicroResByDocIdDBMethodName;
            string package = GetMicroResByDocIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetMicroResByDocIdDBMethodName
		{
            get { return "GetMicroResByDocId"; }
        }
		
        protected virtual string GetMicroResByDocIdDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetMicroResByDocIdDB(string companyDB, long docId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetMicroResByDocIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, docId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetMicroResByMultiCritDBMethod(string companyDB)
		{
			string proc = GetMicroResByMultiCritDBMethodName;
            string package = GetMicroResByMultiCritDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetMicroResByMultiCritDBMethodName
		{
            get { return "GetMicroResByMultiCrit"; }
        }
		
        protected virtual string GetMicroResByMultiCritDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetMicroResByMultiCritDB(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetMicroResByMultiCritDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache ANTIBRES
		#endregion
	
	
		#region Select ANTIBRES Operations
		//
		//SELECT OPERATIONS ANTIBRES
		//
		//
		//
		//
		public virtual AntibResList GetAntibResByDocId(string companyDB, long docId )
		{
			IDataReader reader = GetAntibResByDocIdDB(companyDB, docId );
			AntibResList list = new AntibResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AntibRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual AntibResList GetAntibResByMultiCrit(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader reader = GetAntibResByMultiCritDB(companyDB, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username );
			AntibResList list = new AntibResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AntibRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAntibResByDocIdDBMethod(string companyDB)
		{
			string proc = GetAntibResByDocIdDBMethodName;
            string package = GetAntibResByDocIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAntibResByDocIdDBMethodName
		{
            get { return "GetAntibResByDocId"; }
        }
		
        protected virtual string GetAntibResByDocIdDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetAntibResByDocIdDB(string companyDB, long docId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAntibResByDocIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, docId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetAntibResByMultiCritDBMethod(string companyDB)
		{
			string proc = GetAntibResByMultiCritDBMethodName;
            string package = GetAntibResByMultiCritDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAntibResByMultiCritDBMethodName
		{
            get { return "GetAntibResByMultiCrit"; }
        }
		
        protected virtual string GetAntibResByMultiCritDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetAntibResByMultiCritDB(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAntibResByMultiCritDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion

        #region Cache ATTACHRES
        #endregion


        #region Select ATTACHRES Operations
        //
        //SELECT OPERATIONS ATTACHRES
        //
        //
        //
        //
        public virtual AttachResList GetAttachResByDocId(string companyDB, long docId)
        {
            IDataReader reader = GetAttachResByDocIdDB(companyDB, docId);
            AttachResList list = new AttachResList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new AttachRes(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }

        //
        //
        //
        public virtual AttachResList GetAttachResByMultiCrit(string companyDB, string entIds, long? epiTypeId, string epi, string doc, string extId, Nullable<DateTime> epiBeginDate, Nullable<DateTime> epiEndDate, long? docTypeId, long? appId, long? placeId, long? instId, Nullable<DateTime> docBeginDate, Nullable<DateTime> docEndDate, Nullable<DateTime> valBeginDate, Nullable<DateTime> valEndDate, string globalFilters, string docsSession, string servsSession, string username)
        {
            IDataReader reader = GetAttachResByMultiCritDB(companyDB, entIds, epiTypeId, epi, doc, extId, epiBeginDate, epiEndDate, docTypeId, appId, placeId, instId, docBeginDate, docEndDate, valBeginDate, valEndDate, globalFilters, docsSession, servsSession, username);
            AttachResList list = new AttachResList();
            while (reader.Read())
            {
                try
                {
                    list.Add(new AttachRes(reader, companyDB));
                }
                catch (Exception ex)
                {
                    // Quick Start is configured so that the Propagate Policy will
                    // log the exception and then recommend a rethrow.
                    bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
                    if (rethrow)
                    {
                        throw;
                    }
                }
            }
            reader.Close();
            return list;
        }


        //
        // DB
        //
        protected virtual string GetAttachResByDocIdDBMethod(string companyDB)
        {
            string proc = GetAttachResByDocIdDBMethodName;
            string package = GetAttachResByDocIdDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetAttachResByDocIdDBMethodName
        {
            get { return "GetAttachResByDocId"; }
        }

        protected virtual string GetAttachResByDocIdDBPackageName
        {
            get { return "PCK_ER_ANA_RES_GEN"; }
        }


        protected virtual IDataReader GetAttachResByDocIdDB(string companyDB, long docId)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetAttachResByDocIdDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, docId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }

        //
        // DB
        //
        protected virtual string GetAttachResByMultiCritDBMethod(string companyDB)
        {
            string proc = GetAttachResByMultiCritDBMethodName;
            string package = GetAttachResByMultiCritDBPackageName;

            dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);

            proc = GetDBMethod(dal, proc, package);

            return proc;
        }

        protected virtual string GetAttachResByMultiCritDBMethodName
        {
            get { return "GetAttachResByMultiCrit"; }
        }

        protected virtual string GetAttachResByMultiCritDBPackageName
        {
            get { return "PCK_ER_ANA_RES_GEN"; }
        }


        protected virtual IDataReader GetAttachResByMultiCritDB(string companyDB, string entIds, long? epiTypeId, string epi, string doc, string extId, Nullable<DateTime> epiBeginDate, Nullable<DateTime> epiEndDate, long? docTypeId, long? appId, long? placeId, long? instId, Nullable<DateTime> docBeginDate, Nullable<DateTime> docEndDate, Nullable<DateTime> valBeginDate, Nullable<DateTime> valEndDate, string globalFilters, string docsSession, string servsSession, string username)
        {
            IDataReader ret = null;
            try
            {
                string dbMethod = GetAttachResByMultiCritDBMethod(companyDB);
                DbCommand dbCommand;

                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds, epiTypeId, epi, doc, extId, epiBeginDate, epiEndDate, docTypeId, appId, placeId, instId, docBeginDate, docEndDate, valBeginDate, valEndDate, globalFilters, docsSession, servsSession, username, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);


            }
            catch (Exception ex)
            {
                // Quick Start is configured so that the Propagate Policy will
                // log the exception and then recommend a rethrow.
                bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
                if (rethrow)
                {
                    throw;
                }
            }
            return ret;
        }


        #endregion
		
		
        #region Cache NOTE
		#endregion
	
	
		#region Select NOTE Operations
		//
		//SELECT OPERATIONS NOTE
		//
		//
		//
		//
		public virtual NoteList GetNotesByDocId(string companyDB, long docId )
		{
			IDataReader reader = GetNotesByDocIdDB(companyDB, docId );
			NoteList list = new NoteList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Note(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual NoteList GetNotesByMultiCrit(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader reader = GetNotesByMultiCritDB(companyDB, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username );
			NoteList list = new NoteList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Note(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetNotesByDocIdDBMethod(string companyDB)
		{
			string proc = GetNotesByDocIdDBMethodName;
            string package = GetNotesByDocIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetNotesByDocIdDBMethodName
		{
            get { return "GetNotesByDocId"; }
        }
		
        protected virtual string GetNotesByDocIdDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetNotesByDocIdDB(string companyDB, long docId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetNotesByDocIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, docId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetNotesByMultiCritDBMethod(string companyDB)
		{
			string proc = GetNotesByMultiCritDBMethodName;
            string package = GetNotesByMultiCritDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetNotesByMultiCritDBMethodName
		{
            get { return "GetNotesByMultiCrit"; }
        }
		
        protected virtual string GetNotesByMultiCritDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetNotesByMultiCritDB(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetNotesByMultiCritDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Cache ANARES
		#endregion
	
	
		#region Select ANARES Operations
		//
		//SELECT OPERATIONS ANARES
		//
		//
		//
		//
		public virtual AnaResList GetAnaResByDocId(string companyDB, long docId , string username , string sessionId )
		{
			IDataReader reader = GetAnaResByDocIdDB(companyDB, docId , username , sessionId );
			AnaResList list = new AnaResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AnaRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual AnaResList GetAnaResByMultiCrit(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username , string sessionId )
		{
			IDataReader reader = GetAnaResByMultiCritDB(companyDB, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username , sessionId );
			AnaResList list = new AnaResList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new AnaRes(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetAnaResByDocIdDBMethod(string companyDB)
		{
			string proc = GetAnaResByDocIdDBMethodName;
            string package = GetAnaResByDocIdDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAnaResByDocIdDBMethodName
		{
            get { return "GetAnaResByDocId"; }
        }
		
        protected virtual string GetAnaResByDocIdDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetAnaResByDocIdDB(string companyDB, long docId , string username , string sessionId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAnaResByDocIdDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, docId , username , sessionId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetAnaResByMultiCritDBMethod(string companyDB)
		{
			string proc = GetAnaResByMultiCritDBMethodName;
            string package = GetAnaResByMultiCritDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("AnaRes", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetAnaResByMultiCritDBMethodName
		{
            get { return "GetAnaResByMultiCrit"; }
        }
		
        protected virtual string GetAnaResByMultiCritDBPackageName
		{
            get { return "PCK_ER_ANA_RES_GEN"; }
        }

		
		protected virtual IDataReader GetAnaResByMultiCritDB(string companyDB, string entIds , long? epiTypeId , string epi , string doc , string extId , Nullable<DateTime> epiBeginDate , Nullable<DateTime> epiEndDate , long? docTypeId , long? appId , long? placeId , long? instId , Nullable<DateTime> docBeginDate , Nullable<DateTime> docEndDate , Nullable<DateTime> valBeginDate , Nullable<DateTime> valEndDate , string globalFilters , string docsSession , string servsSession , string username , string sessionId )
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetAnaResByMultiCritDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, entIds , epiTypeId , epi , doc , extId , epiBeginDate , epiEndDate , docTypeId , appId , placeId , instId , docBeginDate , docEndDate , valBeginDate , valEndDate , globalFilters , docsSession , servsSession , username , sessionId , DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
    
    #endregion
    
    #region OBJECTS OPERATIONS
    
    #endregion
	
    }
}


