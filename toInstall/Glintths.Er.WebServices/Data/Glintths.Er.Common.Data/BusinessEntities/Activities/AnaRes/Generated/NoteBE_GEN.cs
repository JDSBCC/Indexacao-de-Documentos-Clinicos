using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 10 de Julho de 2012
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "Note_GEN", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Note_GEN : AbstractEntity
    {	
		#region Variables
		
		private long id = 0; ///
		private string domId = string.Empty; ///
		private string domName = string.Empty; ///
		private string subdomId = string.Empty; ///
		private string subdomName = string.Empty; ///
		private string body = string.Empty; ///
		
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Note object.
        /// </summary>
        public Note_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Note object.
        /// </summary>
        public Note_GEN(long id) 
			: base(ObjectState.Added , null) 
        {
			this.id = id;
        }
		/// <summary>
        /// Initialize an new empty Note object.
        /// </summary>
        public Note_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, reader, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Note object with the given parameters.
        /// </summary>
        public  Note_GEN(string domId, string domName, string subdomId, string subdomName, string body) 
			: base(ObjectState.Added, null) 
        {	 
			this.domId = domId;
			this.domName = domName;
			this.subdomId = subdomId;
			this.subdomName = subdomName;
			this.body = body;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long Id
        {
            get { return this.id; }
            set { 
				if(this.id != value) {
					this.id = value;
					DataStateChanged(ObjectState.Modified, "Id");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DomId
        {
            get { return this.domId; }
            set { 
				if(this.domId != value) {
					this.domId = value;
					DataStateChanged(ObjectState.Modified, "DomId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string DomName
        {
            get { return this.domName; }
            set { 
				if(this.domName != value) {
					this.domName = value;
					DataStateChanged(ObjectState.Modified, "DomName");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string SubdomId
        {
            get { return this.subdomId; }
            set { 
				if(this.subdomId != value) {
					this.subdomId = value;
					DataStateChanged(ObjectState.Modified, "SubdomId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string SubdomName
        {
            get { return this.subdomName; }
            set { 
				if(this.subdomName != value) {
					this.subdomName = value;
					DataStateChanged(ObjectState.Modified, "SubdomName");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Body
        {
            get { return this.body; }
            set { 
				if(this.body != value) {
					this.body = value;
					DataStateChanged(ObjectState.Modified, "Body");
				}
			}
		}
		
		
		
		#endregion
	
		#region Methods
		
		protected void LoadNote_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "ID":
							if (!reader.IsDBNull(i)) this.id = reader.GetInt64(i);
							break;
						case "DOMID":
							if (!reader.IsDBNull(i)) this.domId = Convert.ToString(reader.GetValue(i));
							break;
						case "DOMNAME":
							if (!reader.IsDBNull(i)) this.domName = Convert.ToString(reader.GetValue(i));
							break;
						case "SUBDOMID":
							if (!reader.IsDBNull(i)) this.subdomId = Convert.ToString(reader.GetValue(i));
							break;
						case "SUBDOMNAME":
							if (!reader.IsDBNull(i)) this.subdomName = Convert.ToString(reader.GetValue(i));
							break;
						case "BODY":
							if (!reader.IsDBNull(i)) this.body = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Note note = obj as Note;
			if (note == null)
				return false;
			return note.Id == Id;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


