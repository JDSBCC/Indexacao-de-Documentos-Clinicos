using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;
using Cpchs.Eresults.Common.WCF;

namespace Cpchs.Eresults.Common.WCF.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: ter?a-feira, 10 de Julho de 2012
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "MicroRes_GEN", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class MicroRes_GEN : AbstractEntity
    {	
		#region Variables
		
		private long id = 0; ///
		private long anaResId = 0; ///
		private string quantif = string.Empty; ///
		private long microOrder = 0; ///
		
		private Codif micro = new Codif();
		private AntibResList antibs = new AntibResList();
		private NoteList notes = new NoteList();
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty MicroRes object.
        /// </summary>
        public MicroRes_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty MicroRes object.
        /// </summary>
        public MicroRes_GEN(long id) 
			: base(ObjectState.Added , null) 
        {
			this.id = id;
        }
		/// <summary>
        /// Initialize an new empty MicroRes object.
        /// </summary>
        public MicroRes_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, reader, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  MicroRes object with the given parameters.
        /// </summary>
        public  MicroRes_GEN(long anaResId, string quantif, long microOrder) 
			: base(ObjectState.Added, null) 
        {	 
			this.anaResId = anaResId;
			this.quantif = quantif;
			this.microOrder = microOrder;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long Id
        {
            get { return this.id; }
            set { 
				if(this.id != value) {
					this.id = value;
					DataStateChanged(ObjectState.Modified, "Id");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long AnaResId
        {
            get { return this.anaResId; }
            set { 
				if(this.anaResId != value) {
					this.anaResId = value;
					DataStateChanged(ObjectState.Modified, "AnaResId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string Quantif
        {
            get { return this.quantif; }
            set { 
				if(this.quantif != value) {
					this.quantif = value;
					DataStateChanged(ObjectState.Modified, "Quantif");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long MicroOrder
        {
            get { return this.microOrder; }
            set { 
				if(this.microOrder != value) {
					this.microOrder = value;
					DataStateChanged(ObjectState.Modified, "MicroOrder");
				}
			}
		}
		
		
		
		[DataMember]
		public Codif Micro
		{
			get { return this.micro; }
			set { 
				if(this.micro != value) {
					DataStateChanged(ObjectState.Modified, "Micro");
            				this.micro = value;
				}
			}
		}
		
		
		[DataMember]
		public AntibResList Antibs
		{
			get { return this.antibs; }
			set { 
				if(this.antibs != value) {
					DataStateChanged(ObjectState.Modified, "Antibs");
            				this.antibs = value;
				}
			}
		}
		
		
		[DataMember]
		public NoteList Notes
		{
			get { return this.notes; }
			set { 
				if(this.notes != value) {
					DataStateChanged(ObjectState.Modified, "Notes");
            				this.notes = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
		
		protected void LoadMicroRes_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		public virtual void AddAntibs(AntibRes obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.antibs.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemoveAntibs(AntibRes obj)
		{
			this.antibs.RemoveItem(obj);
			/*obj = this.antibs[this.antibs.IndexOf(obj)];
			this.antibs.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.antibsToRemove.Add(obj);
			base.Change();*/
		}
		public virtual void AddNotes(Note obj, bool loading)
		{
			if(!loading)
				obj.ObjectState = ObjectState.Added;
			this.notes.Add(obj);
			//if(!loading)
			//	base.Change();
		}

		public virtual void RemoveNotes(Note obj)
		{
			this.notes.RemoveItem(obj);
			/*obj = this.notes[this.notes.IndexOf(obj)];
			this.notes.Remove(obj);
			if (obj.ObjectState == ObjectState.Unchanged || obj.ObjectState == ObjectState.Modified)
				this.notesToRemove.Add(obj);
			base.Change();*/
		}
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "ID":
							if (!reader.IsDBNull(i)) this.id = reader.GetInt64(i);
							break;
						case "ANARESID":
							if (!reader.IsDBNull(i)) this.anaResId = reader.GetInt64(i);
							break;
						case "QUANTIF":
							if (!reader.IsDBNull(i)) this.quantif = Convert.ToString(reader.GetValue(i));
							break;
						case "MICROORDER":
							if (!reader.IsDBNull(i)) this.microOrder = reader.GetInt64(i);
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			MicroRes microres = obj as MicroRes;
			if (microres == null)
				return false;
			return microres.Id == Id;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


