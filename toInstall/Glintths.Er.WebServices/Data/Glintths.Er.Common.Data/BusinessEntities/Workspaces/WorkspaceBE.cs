using System;
using System.Data;
using System.Runtime.Serialization;
using CPCHS.Common.BusinessEntities;
using Glintths.Er.Common.BusinessEntities.Generated;
	
namespace Glintths.Er.Common.BusinessEntities
{
    /// <summary>
    /// Date Created: quinta-feira, 24 de Mar?o de 2011
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "Workspace", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public class Workspace : Workspace_GEN
	{
        #region variables

        private int workspaceLevel;
        private bool workspaceIsLeaf;
        
        #endregion

        #region Properties

        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public int WorkspaceLevel
        {
            get { return this.workspaceLevel; }
            set
            {
                if (this.workspaceLevel != value)
                {
                    this.workspaceLevel = value;
                    DataStateChanged(ObjectState.Modified, "WorkspaceLevel");
                }
            }
        }

        [DataMember]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public bool WorkspaceIsLeaf
        {
            get { return this.workspaceIsLeaf; }
            set
            {
                if (this.workspaceIsLeaf != value)
                {
                    this.workspaceIsLeaf = value;
                    DataStateChanged(ObjectState.Modified, "WorkspaceIsLeaf");
                }
            }
        }
        
        #endregion


        /// <summary>
        /// Initialize an new empty Workspace object.
        /// </summary>
        public Workspace() : base()
        {
        }
		
		/// <summary>
        /// Initialize an new empty Workspace object.
        /// </summary>
        public Workspace(IDataReader reader, string companyDB) : base(reader, companyDB)
        {
            LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Workspace object with the given parameters.
        /// </summary>
        public  Workspace(long? workspaceParentId, bool workspaceActive, string workspaceName, string workspaceDesc) : base(workspaceParentId, workspaceActive, workspaceName, workspaceDesc)
        {
        }
		
        public Workspace(long workspaceId) : base(workspaceId)
        {
			
        }

        private void LoadFromReader(IDataReader reader)
        {
            if (reader != null && !reader.IsClosed)
            {
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    switch (reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture))
                    {
                        case "WORKSPACELEVEL":
                            if (!reader.IsDBNull(i)) this.WorkspaceLevel = reader.GetInt32(i);
                            break;
                        case "WORKSPACEISLEAF":
                            if (!reader.IsDBNull(i)) this.WorkspaceIsLeaf = reader.GetBoolean(i);
                            break;
                    }
                }
            }
        }
	}
}


