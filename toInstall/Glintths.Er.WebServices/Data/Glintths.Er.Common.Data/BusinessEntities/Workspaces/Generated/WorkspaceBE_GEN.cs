using System;
using System.Data;
using System.Xml;
using System.Xml.Serialization;
using System.IO;
using System.Text;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using CPCHS.Common.BusinessEntities;
using System.Runtime.Serialization;
using Glintths.Er.Common.BusinessEntities;

namespace Glintths.Er.Common.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quinta-feira, 24 de Mar?o de 2011
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
    [DataContract(Name = "Workspace_GEN", Namespace = "http://glintt.com/types")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class Workspace_GEN : AbstractEntity
    {	
		#region Variables
		
		private long workspaceId = 0; ///
		private long? workspaceParentId = null; ///
		private bool workspaceActive = false; ///
		private string workspaceName = string.Empty; ///
		private string workspaceDesc = string.Empty; ///
		
		private WorkspaceMemberList workspaceMembers;
		private WorkspaceDocumentList workspaceDocuments;
		private WorkspaceList workspaceChilds;
	
		#endregion
		
        #region Constructors
		
		/// <summary>
        /// Initialize an new empty Workspace object.
        /// </summary>
        public Workspace_GEN() 
			: base(ObjectState.Added, null) 
        {
        }
	
		/// <summary>
        /// Initialize an new empty Workspace object.
        /// </summary>
        public Workspace_GEN(long workspaceId) 
			: base(ObjectState.Added , null) 
        {
			this.workspaceId = workspaceId;
        }
		/// <summary>
        /// Initialize an new empty Workspace object.
        /// </summary>
        public Workspace_GEN(IDataReader reader, string companyDB) 
			: base(ObjectState.Unchanged, reader, companyDB) 
        {
			LoadFromReader(reader);
        }
		
        /// <summary>
        /// Initialize a new  Workspace object with the given parameters.
        /// </summary>
        public  Workspace_GEN(long? workspaceParentId, bool workspaceActive, string workspaceName, string workspaceDesc) 
			: base(ObjectState.Added, null) 
        {	 
			this.workspaceParentId = workspaceParentId;
			this.workspaceActive = workspaceActive;
			this.workspaceName = workspaceName;
			this.workspaceDesc = workspaceDesc;
        }
		#endregion
		
		#region Properties
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long WorkspaceId
        {
            get { return this.workspaceId; }
            set { 
				if(this.workspaceId != value) {
					this.workspaceId = value;
					DataStateChanged(ObjectState.Modified, "WorkspaceId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public long? WorkspaceParentId
        {
            get { return this.workspaceParentId; }
            set { 
				if(this.workspaceParentId != value) {
					this.workspaceParentId = value;
					DataStateChanged(ObjectState.Modified, "WorkspaceParentId");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public bool WorkspaceActive
        {
            get { return this.workspaceActive; }
            set { 
				if(this.workspaceActive != value) {
					this.workspaceActive = value;
					DataStateChanged(ObjectState.Modified, "WorkspaceActive");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string WorkspaceName
        {
            get { return this.workspaceName; }
            set { 
				if(this.workspaceName != value) {
					this.workspaceName = value;
					DataStateChanged(ObjectState.Modified, "WorkspaceName");
				}
			}
		}
		
		
		[DataMember]
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        public string WorkspaceDesc
        {
            get { return this.workspaceDesc; }
            set { 
				if(this.workspaceDesc != value) {
					this.workspaceDesc = value;
					DataStateChanged(ObjectState.Modified, "WorkspaceDesc");
				}
			}
		}
		
		
		
		[DataMember]
		public WorkspaceMemberList WorkspaceMembers
		{
			get { return this.workspaceMembers; }
			set { 
				if(this.workspaceMembers != value) {
					DataStateChanged(ObjectState.Modified, "WorkspaceMembers");
            				this.workspaceMembers = value;
				}
			}
		}
		
		
		[DataMember]
		public WorkspaceDocumentList WorkspaceDocuments
		{
			get { return this.workspaceDocuments; }
			set { 
				if(this.workspaceDocuments != value) {
					DataStateChanged(ObjectState.Modified, "WorkspaceDocuments");
            				this.workspaceDocuments = value;
				}
			}
		}
		
		
		[DataMember]
		public WorkspaceList WorkspaceChilds
		{
			get { return this.workspaceChilds; }
			set { 
				if(this.workspaceChilds != value) {
					DataStateChanged(ObjectState.Modified, "WorkspaceChilds");
            				this.workspaceChilds = value;
				}
			}
		}
		
		
		#endregion
	
		#region Methods
		
		protected void LoadWorkspace_GEN(IDataReader reader, string companyDb)
        {
			base.CompanyDB = companyDb;
            base.ObjectState = CPCHS.Common.BusinessEntities.ObjectState.Unchanged;

			LoadFromReader(reader);
        }
	
		private void LoadFromReader(IDataReader reader)
		{
			if (reader != null && !reader.IsClosed)
            {	
				for(int i=0; i<reader.FieldCount; i++) {
					switch(reader.GetName(i).ToUpper(System.Globalization.CultureInfo.CurrentCulture)) {
						case "WORKSPACEID":
							if (!reader.IsDBNull(i)) this.workspaceId = reader.GetInt64(i);
							break;
						case "WORKSPACEPARENTID":
							if (!reader.IsDBNull(i)) this.workspaceParentId = reader.GetInt64(i);
							break;
						case "WORKSPACEACTIVE":
							if (!reader.IsDBNull(i)) this.workspaceActive = reader.GetBoolean(i);
							break;
						case "WORKSPACENAME":
							if (!reader.IsDBNull(i)) this.workspaceName = Convert.ToString(reader.GetValue(i));
							break;
						case "WORKSPACEDESC":
							if (!reader.IsDBNull(i)) this.workspaceDesc = Convert.ToString(reader.GetValue(i));
							break;
					}
				}
            }
		}
		
		public override bool Equals(object obj)
		{
			Workspace workspace = obj as Workspace;
			if (workspace == null)
				return false;
			return workspace.WorkspaceId == WorkspaceId;; 
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode ();
		}
		
		#endregion
    }
}


