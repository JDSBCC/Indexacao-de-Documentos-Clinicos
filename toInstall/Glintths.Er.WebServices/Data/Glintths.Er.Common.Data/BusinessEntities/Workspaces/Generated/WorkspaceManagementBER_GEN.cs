
using System;
using System.Data;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.Remoting.Messaging;
using Glintths.Er.Common.BusinessEntities;
using CPCHS.Common.BusinessEntities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Microsoft.Practices.EnterpriseLibrary.Caching.Expirations;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;

namespace Glintths.Er.Common.BusinessEntities.Generated
{
    /// <summary>
    /// Date Created: quinta-feira, 5 de Maio de 2011
    /// Created By: Generated by CodeSmith
	/// Template Created By: CPCHS psilva, 2005
    /// </summary>
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores"), Serializable]
    public abstract class WorkspaceManagementBER_GEN : CommonBER
    {
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2235:MarkAllNonSerializableFields"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
		protected Microsoft.Practices.EnterpriseLibrary.Data.Database dal;	
		
		#region Variables
		#endregion
	
		protected WorkspaceManagementBER_GEN()
		{
			/*try
			{
				dal=DatabaseFactory.CreateDatabase("ErWorkspaces");
			}
			catch 
			{	
				dal = DatabaseFactory.CreateDatabase();
			}*/
	
		}
	
    #region TABLES OPERATIONS
	
		#region Cache WORKSPACE
		#endregion
	
	
		#region Select WORKSPACE Operations
		//
		//SELECT OPERATIONS WORKSPACE
		//
		//
		//
		//
		public virtual Workspace GetWorkspace(string companyDB, long workspaceId)
		{
			IDataReader reader = GetWorkspaceDB(companyDB, workspaceId);
			Workspace obj = null;
			if(reader.Read())
			{
				try
      			{
					obj = new Workspace(reader, companyDB);
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
            		// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
	           		 	throw;
  	          		} 
				}
			} 
			reader.Close();

			return obj;
		}
		
		//
		//
		//
		public virtual WorkspaceList GetChildWorkspaces(string companyDB, long workspaceId)
		{
			IDataReader reader = GetChildWorkspacesDB(companyDB, workspaceId);
			WorkspaceList list = new WorkspaceList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Workspace(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		//
		//
		//
		public virtual WorkspaceList GetWorkspaceTree(string companyDB, long workspaceId, string USER_CRI)
		{
			IDataReader reader = GetWorkspaceTreeDB(companyDB, workspaceId, USER_CRI);
			WorkspaceList list = new WorkspaceList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new Workspace(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetWorkspaceDBMethod(string companyDB)
		{
			string proc = GetWorkspaceDBMethodName;
            string package = GetWorkspaceDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetWorkspaceDBMethodName
		{
            get { return "GetWorkspace"; }
        }
		
        protected virtual string GetWorkspaceDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }

		
		protected virtual IDataReader GetWorkspaceDB(string companyDB, long workspaceId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetWorkspaceDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, workspaceId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetChildWorkspacesDBMethod(string companyDB)
		{
			string proc = GetChildWorkspacesDBMethodName;
            string package = GetChildWorkspacesDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetChildWorkspacesDBMethodName
		{
            get { return "GetChildWorkspaces"; }
        }
		
        protected virtual string GetChildWorkspacesDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }

		
		protected virtual IDataReader GetChildWorkspacesDB(string companyDB, long workspaceId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetChildWorkspacesDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, workspaceId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		
		//
		// DB
		//
		protected virtual string GetWorkspaceTreeDBMethod(string companyDB)
		{
			string proc = GetWorkspaceTreeDBMethodName;
            string package = GetWorkspaceTreeDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetWorkspaceTreeDBMethodName
		{
            get { return "GetWorkspaceTree"; }
        }
		
        protected virtual string GetWorkspaceTreeDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }

		
		protected virtual IDataReader GetWorkspaceTreeDB(string companyDB, long workspaceId, string USER_CRI)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetWorkspaceTreeDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, workspaceId, USER_CRI, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Insert WORKSPACE Operations
		//
		//INSERT OPERATIONS WORKSPACE
		//
		//
		//
		//
		public virtual Workspace CreateWorkspace(string companyDB, Workspace obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					CreateWorkspaceDB(companyDB, null, obj);
				else
					CreateWorkspaceDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string CreateWorkspaceDBMethod(string companyDB)
		{
			string proc = CreateWorkspaceDBMethodName;
            string package = CreateWorkspaceDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
			
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}

		protected virtual string CreateWorkspaceDBMethodName
		{
           get { return "CreateWorkspace"; }
        }
        
        protected virtual string CreateWorkspaceDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }

		protected virtual object[] CreateWorkspaceDBParametersExtra(Workspace obj)
		{
            return new object[] {};
        }
		protected object[] CreateWorkspaceDBParameters(Workspace obj)
    	{
        	ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
					obj.WorkspaceParentId
                  ,	obj.WorkspaceActive
                  ,	obj.WorkspaceName
                  ,	obj.WorkspaceDesc
				  , CallContext.GetData("UserName")  , DBNull.Value 
					};

        	finalParameters.AddRange(standardParameters);
        	finalParameters.AddRange(CreateWorkspaceDBParametersExtra(obj));

        	return finalParameters.ToArray();
    	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void CreateWorkspaceDB(string companyDB, DbTransaction transaction, Workspace obj)
		{
			try
      		{
				string dbMethod = CreateWorkspaceDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					CreateWorkspaceDBParameters(obj)
				);

				CreateWorkspaceDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				CreateWorkspaceDBPosQuery(dbCommand, obj);

				obj.WorkspaceId = Convert.ToInt64(GetParameterValue(dal, dbCommand, "p_sequence"), CultureInfo.CurrentCulture);
				
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void CreateWorkspaceDBPosQuery(DbCommand dbCommand, Workspace obj)
		{
			
        }
    	protected virtual void CreateWorkspaceDBPreQuery(DbCommand dbCommand, Workspace obj)
    	{        
		
    	}

		
		#endregion
		
		#region Update WORKSPACE Operations
		//
		//UPDATE OPERATIONS WORKSPACE
		//
		//
		//
		//
		public virtual Workspace UpdateWorkspace(string companyDB, Workspace obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateWorkspaceDB(companyDB, null, obj);
				else	
					UpdateWorkspaceDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual Workspace UpdateWorkspaceActiveState(string companyDB, Workspace obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateWorkspaceActiveStateDB(companyDB, null, obj);
				else	
					UpdateWorkspaceActiveStateDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		//
		//
		//
		public virtual Workspace UpdateWorkspaceParent(string companyDB, Workspace obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState != ObjectState.Modified) 
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					UpdateWorkspaceParentDB(companyDB, null, obj);
				else	
					UpdateWorkspaceParentDB(companyDB, transaction[0], obj);
	
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string UpdateWorkspaceDBMethod(string companyDB)
		{
			string proc = UpdateWorkspaceDBMethodName;
            string package = UpdateWorkspaceDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateWorkspaceDBMethodName
		{
            get { return "UpdateWorkspace"; }
        }
        
        protected virtual string UpdateWorkspaceDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }
		
		protected virtual object[] UpdateWorkspaceDBParametersExtra(Workspace obj)
		{
            return new object[] {};
        }
		private object[] UpdateWorkspaceDBParameters(Workspace obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.WorkspaceId,obj.WorkspaceParentId,obj.WorkspaceActive,obj.WorkspaceName,obj.WorkspaceDesc,obj.WorkspaceId
				 ,CallContext.GetData("UserName")
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateWorkspaceDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateWorkspaceDB(string companyDB, DbTransaction transaction, Workspace obj)
		{
			try
      		{
				string dbMethod = UpdateWorkspaceDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateWorkspaceDBParameters(obj)
				);
				
				UpdateWorkspaceDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateWorkspaceDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateWorkspaceDBPosQuery(DbCommand dbCommand, Workspace obj)
		{
			
        }
    	protected virtual void UpdateWorkspaceDBPreQuery(DbCommand dbCommand, Workspace obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateWorkspaceActiveStateDBMethod(string companyDB)
		{
			string proc = UpdateWorkspaceActiveStateDBMethodName;
            string package = UpdateWorkspaceActiveStateDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateWorkspaceActiveStateDBMethodName
		{
            get { return "UpdateWorkspaceActiveState"; }
        }
        
        protected virtual string UpdateWorkspaceActiveStateDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }
		
		protected virtual object[] UpdateWorkspaceActiveStateDBParametersExtra(Workspace obj)
		{
            return new object[] {};
        }
		private object[] UpdateWorkspaceActiveStateDBParameters(Workspace obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.WorkspaceActive,obj.WorkspaceId
				 ,CallContext.GetData("UserName")
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateWorkspaceActiveStateDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateWorkspaceActiveStateDB(string companyDB, DbTransaction transaction, Workspace obj)
		{
			try
      		{
				string dbMethod = UpdateWorkspaceActiveStateDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateWorkspaceActiveStateDBParameters(obj)
				);
				
				UpdateWorkspaceActiveStateDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateWorkspaceActiveStateDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateWorkspaceActiveStateDBPosQuery(DbCommand dbCommand, Workspace obj)
		{
			
        }
    	protected virtual void UpdateWorkspaceActiveStateDBPreQuery(DbCommand dbCommand, Workspace obj)
    	{        
		
    	}
		
		//
		// DB
		//
		protected virtual string UpdateWorkspaceParentDBMethod(string companyDB)
		{
			string proc = UpdateWorkspaceParentDBMethodName;
            string package = UpdateWorkspaceParentDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
			
			proc = GetDBMethod(dal, proc, package);				
			
			return proc;
		}
		
		protected virtual string UpdateWorkspaceParentDBMethodName
		{
            get { return "UpdateWorkspaceParent"; }
        }
        
        protected virtual string UpdateWorkspaceParentDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }
		
		protected virtual object[] UpdateWorkspaceParentDBParametersExtra(Workspace obj)
		{
            return new object[] {};
        }
		private object[] UpdateWorkspaceParentDBParameters(Workspace obj)
       	{
            ArrayList finalParameters = new ArrayList();
			object[] standardParameters = new object[]
			{
			obj.WorkspaceParentId,obj.WorkspaceId
				 ,CallContext.GetData("UserName")
            };

            finalParameters.AddRange(standardParameters);
            finalParameters.AddRange(UpdateWorkspaceParentDBParametersExtra(obj));
           	return finalParameters.ToArray();
        }

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void UpdateWorkspaceParentDB(string companyDB, DbTransaction transaction, Workspace obj)
		{
			try
      		{
				string dbMethod = UpdateWorkspaceParentDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                		dbMethod,
				UpdateWorkspaceParentDBParameters(obj)
				);
				
				UpdateWorkspaceParentDBPreQuery(dbCommand, obj);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);

				UpdateWorkspaceParentDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void UpdateWorkspaceParentDBPosQuery(DbCommand dbCommand, Workspace obj)
		{
			
        }
    	protected virtual void UpdateWorkspaceParentDBPreQuery(DbCommand dbCommand, Workspace obj)
    	{        
		
    	}
		
		
		#endregion
		
		#region Cache WORKSPACEDOCUMENT
		#endregion
	
	
		#region Select WORKSPACEDOCUMENT Operations
		//
		//SELECT OPERATIONS WORKSPACEDOCUMENT
		//
		//
		//
		//
		public virtual WorkspaceDocumentList GetWorkspaceDocuments(string companyDB, long workspaceId)
		{
			IDataReader reader = GetWorkspaceDocumentsDB(companyDB, workspaceId);
			WorkspaceDocumentList list = new WorkspaceDocumentList();
			while(reader.Read())
			{
				try
    			{
					list.Add(new WorkspaceDocument(reader, companyDB));
				}
				catch(Exception ex)
				{
					// Quick Start is configured so that the Propagate Policy will
           			// log the exception and then recommend a rethrow.
            		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
            		if (rethrow)
            		{
            			throw;
            			} 
				}
			} 
			reader.Close();
			return list;
		}
		
		
		//
		// DB
		//
		protected virtual string GetWorkspaceDocumentsDBMethod(string companyDB)
		{
			string proc = GetWorkspaceDocumentsDBMethodName;
            string package = GetWorkspaceDocumentsDBPackageName;
			
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
            
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}
		
		protected virtual string GetWorkspaceDocumentsDBMethodName
		{
            get { return "GetWorkspaceDocuments"; }
        }
		
        protected virtual string GetWorkspaceDocumentsDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }

		
		protected virtual IDataReader GetWorkspaceDocumentsDB(string companyDB, long workspaceId)
		{
			IDataReader ret = null;
			try
      		{
				string dbMethod = GetWorkspaceDocumentsDBMethod(companyDB);
                DbCommand dbCommand;
                
                dbCommand = GetStoredProcCommand(dal, dbMethod, workspaceId, DBNull.Value);
                ret = dal.ExecuteReader(dbCommand);
                
                
			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
			return ret;
		}
		

		#endregion
		
		#region Insert WORKSPACEDOCUMENT Operations
		//
		//INSERT OPERATIONS WORKSPACEDOCUMENT
		//
		//
		//
		//
		public virtual WorkspaceDocument AddDocumentToWorkspace(string companyDB, WorkspaceDocument obj,params DbTransaction[] transaction)
		{		
			try
     		{
     			if (transaction.Length==0)
					AddDocumentToWorkspaceDB(companyDB, null, obj);
				else
					AddDocumentToWorkspaceDB(companyDB, transaction[0], obj);
				
				obj.ObjectState = ObjectState.Unchanged;
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
			
			return obj;
		}
		
		
		//
		// DB
		//
		protected virtual string AddDocumentToWorkspaceDBMethod(string companyDB)
		{
			string proc = AddDocumentToWorkspaceDBMethodName;
            string package = AddDocumentToWorkspaceDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);
			
            proc = GetDBMethod(dal, proc, package);
			
			return proc;
		}

		protected virtual string AddDocumentToWorkspaceDBMethodName
		{
           get { return "AddDocumentToWorkspace"; }
        }
        
        protected virtual string AddDocumentToWorkspaceDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }

		protected virtual object[] AddDocumentToWorkspaceDBParametersExtra(WorkspaceDocument obj)
		{
            return new object[] {};
        }
		protected object[] AddDocumentToWorkspaceDBParameters(WorkspaceDocument obj)
    	{
        	ArrayList finalParameters=new ArrayList();

			object[] standardParameters = new object[]{
					obj.WorkspaceId
                  ,	obj.DocumentId
				  , CallContext.GetData("UserName")
					};

        	finalParameters.AddRange(standardParameters);
        	finalParameters.AddRange(AddDocumentToWorkspaceDBParametersExtra(obj));

        	return finalParameters.ToArray();
    	}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void AddDocumentToWorkspaceDB(string companyDB, DbTransaction transaction, WorkspaceDocument obj)
		{
			try
      		{
				string dbMethod = AddDocumentToWorkspaceDBMethod(companyDB);
				
				DbCommand dbCommand = dal.GetStoredProcCommand(
                			dbMethod,
					AddDocumentToWorkspaceDBParameters(obj)
				);

				AddDocumentToWorkspaceDBPreQuery(dbCommand, obj);
	
				if (transaction != null)
				{
					dal.ExecuteNonQuery(dbCommand, transaction);
				}
				else
				{
					dal.ExecuteNonQuery(dbCommand);
				}

				AddDocumentToWorkspaceDBPosQuery(dbCommand, obj);

			}
			catch(Exception ex)
			{
			  	// Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		protected virtual void AddDocumentToWorkspaceDBPosQuery(DbCommand dbCommand, WorkspaceDocument obj)
		{
			
        }
    	protected virtual void AddDocumentToWorkspaceDBPreQuery(DbCommand dbCommand, WorkspaceDocument obj)
    	{        
		
    	}

		
		#endregion
		
		#region Delete WORKSPACEDOCUMENT Operations
		//
		//DELETE OPERATIONS WORKSPACEDOCUMENT
		//
		//
		//
		//
		public virtual void RemoveWorkspaceDocument(string companyDB, WorkspaceDocument obj,params DbTransaction[] transaction)
		{
			//if(obj.ObjectState == ObjectState.Added)
			//	throw new InvalidOperationException();
	
			try
      		{
      			if (transaction.Length==0)
					RemoveWorkspaceDocumentDB(companyDB, null, obj);
				else
					RemoveWorkspaceDocumentDB(companyDB, transaction[0], obj);
			}
			catch(Exception ex)
			{
				// Quick Start is configured so that the Propagate Policy will
          		// log the exception and then recommend a rethrow.
          		bool rethrow = ExceptionPolicy.HandleException(ex, "Business Entities Exception Policy");
          		if (rethrow)
          		{
          			throw;
          		} 
			}
		}
		
		
		//
		// DB
		//
		protected virtual string RemoveWorkspaceDocumentDBMethod(string companyDB)
		{
			string proc = RemoveWorkspaceDocumentDBMethodName;
            string package = RemoveWorkspaceDocumentDBPackageName;
            
			dal = CPCHS.Common.Database.Database.GetDatabase("ErWorkspaces", companyDB);

            proc = GetDBMethod(dal, proc, package);
				
			return proc;
		}

		protected virtual string RemoveWorkspaceDocumentDBMethodName
		{
            get { return "RemoveWorkspaceDocument"; }
        }
        protected virtual string RemoveWorkspaceDocumentDBPackageName
		{
            get { return "PCK_ER_WORKSPACES_GEN"; }
        }
		
		
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
		protected virtual void RemoveWorkspaceDocumentDB(string companyDB, DbTransaction transaction, WorkspaceDocument obj)
		{
			try
      		{
				string dbMethod = RemoveWorkspaceDocumentDBMethod(companyDB);
				int rowsAffected = 0;
				DbCommand dbCommand = dal.GetStoredProcCommand(
                dbMethod
				, obj.WorkspaceId, obj.DocumentId
				);

				rowsAffected = (transaction != null)?
					dal.ExecuteNonQuery(dbCommand, transaction):
					dal.ExecuteNonQuery(dbCommand);
	
				if (rowsAffected <= 0)
					throw new DBConcurrencyException();
	
			}
			catch(Exception ex)
			{
				  // Quick Start is configured so that the Propagate Policy will
        		// log the exception and then recommend a rethrow.
        		bool rethrow = ExceptionPolicy.HandleException(ex, "Database Exception Policy");
        		if (rethrow)
        		{
        			throw;
        		} 
			}
		}
		
		
		#endregion
		
    
    #endregion
    
    #region OBJECTS OPERATIONS
    
    #endregion
	
    }
}


